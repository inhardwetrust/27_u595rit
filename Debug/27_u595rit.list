
27_u595rit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010240  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08010490  08010490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010698  08010698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080106a0  080106a0  000116a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080106a4  080106a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000000  080106a8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000036d8  2000006c  08010714  0001206c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20003744  08010714  00012744  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004f405  00000000  00000000  000120a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b664  00000000  00000000  000614a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002470  00000000  00000000  0006cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a0d  00000000  00000000  0006ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044f2e  00000000  00000000  0007098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a457  00000000  00000000  000b58bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169cb5  00000000  00000000  000ffd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002699c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b90  00000000  00000000  00269a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000108  00000000  00000000  0027159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000006c 	.word	0x2000006c
 800026c:	00000000 	.word	0x00000000
 8000270:	08010478 	.word	0x08010478

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000070 	.word	0x20000070
 800028c:	08010478 	.word	0x08010478

08000290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4917      	ldr	r1, [pc, #92]	@ (80002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	4816      	ldr	r0, [pc, #88]	@ (80002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a8:	4912      	ldr	r1, [pc, #72]	@ (80002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002b2:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002cc:	490d      	ldr	r1, [pc, #52]	@ (8000304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_BadHandler>

080002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002e2:	f000 f897 	bl	8000414 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_NMIHandler>

080002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002fc:	20002b64 	.word	0x20002b64
    LDR     r1, =SYSTICK_CYCLES
 8000300:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000304:	40ff0000 	.word	0x40ff0000

08000308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032e:	f3bf 8f6f 	isb	sy

08000332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000332:	e7fe      	b.n	8000332 <__tx_wait_here>

08000334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000336:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033e:	b191      	cbz	r1, 8000366 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034e:	d101      	bne.n	8000354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000354:	4c1e      	ldr	r4, [pc, #120]	@ (80003d0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800035a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000360:	b10d      	cbz	r5, 8000366 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000362:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000364:	6023      	str	r3, [r4, #0]

08000366 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000366:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000368:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800036a:	b1d1      	cbz	r1, 80003a2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800036c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i

08000370 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000370:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000372:	4c17      	ldr	r4, [pc, #92]	@ (80003d0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000374:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000376:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800037a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800037c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000382:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000386:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800038a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000392:	d101      	bne.n	8000398 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000394:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000398 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000398:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800039c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a0:	4770      	bx	lr

080003a2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003a2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a8:	b909      	cbnz	r1, 80003ae <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003ac:	e7f9      	b.n	80003a2 <__tx_ts_wait>

080003ae <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003ae:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003b2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ba:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003bc:	e7d8      	b.n	8000370 <__tx_ts_restore>
 80003be:	bf00      	nop

080003c0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c0:	4770      	bx	lr
 80003c2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c4:	20002c00 	.word	0x20002c00
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c8:	20002b68 	.word	0x20002b68
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003cc:	20002b6c 	.word	0x20002b6c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d0:	2000316c 	.word	0x2000316c

080003d4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003da:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003de:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003e2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ea:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003ec:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ee:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003f2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003fa:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000400:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000406:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000408:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800040a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000410:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000412:	4770      	bx	lr

08000414 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000414:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000416:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000418:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800041c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000422:	b13a      	cbz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000428:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800042a:	b91a      	cbnz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000432:	6018      	str	r0, [r3, #0]

08000434 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000434:	491d      	ldr	r1, [pc, #116]	@ (80004ac <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000436:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000438:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800043a:	b122      	cbz	r2, 8000446 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000442:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000444:	e008      	b.n	8000458 <__tx_timer_done>

08000446 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000446:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800044c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000450:	d101      	bne.n	8000456 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000454:	6818      	ldr	r0, [r3, #0]

08000456 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000456:	6008      	str	r0, [r1, #0]

08000458 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800045c:	b912      	cbnz	r2, 8000464 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045e:	4914      	ldr	r1, [pc, #80]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000462:	b1c8      	cbz	r0, 8000498 <__tx_timer_nothing_expired>

08000464 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000464:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800046a:	b108      	cbz	r0, 8000470 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800046c:	f00b f948 	bl	800b700 <_tx_timer_expiration_process>

08000470 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000472:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000474:	b172      	cbz	r2, 8000494 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000476:	f00b f8b5 	bl	800b5e4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800047c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047e:	b949      	cbnz	r1, 8000494 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000486:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000490:	d000      	beq.n	8000494 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000492:	6002      	str	r2, [r0, #0]

08000494 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000494:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000498 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000498:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800049c:	4770      	bx	lr
 800049e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	20002c0c 	.word	0x20002c0c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a4:	2000316c 	.word	0x2000316c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	20002c10 	.word	0x20002c10
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004ac:	20002c9c 	.word	0x20002c9c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b0:	20002ca0 	.word	0x20002ca0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b4:	20002c98 	.word	0x20002c98
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b8:	20002c94 	.word	0x20002c94
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004bc:	20002c00 	.word	0x20002c00
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c0:	20002b68 	.word	0x20002b68
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c4:	20002b6c 	.word	0x20002b6c
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <strlen>:
 80004cc:	4603      	mov	r3, r0
 80004ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1fb      	bne.n	80004ce <strlen+0x2>
 80004d6:	1a18      	subs	r0, r3, r0
 80004d8:	3801      	subs	r0, #1
 80004da:	4770      	bx	lr

080004dc <__aeabi_uldivmod>:
 80004dc:	b953      	cbnz	r3, 80004f4 <__aeabi_uldivmod+0x18>
 80004de:	b94a      	cbnz	r2, 80004f4 <__aeabi_uldivmod+0x18>
 80004e0:	2900      	cmp	r1, #0
 80004e2:	bf08      	it	eq
 80004e4:	2800      	cmpeq	r0, #0
 80004e6:	bf1c      	itt	ne
 80004e8:	f04f 31ff 	movne.w	r1, #4294967295
 80004ec:	f04f 30ff 	movne.w	r0, #4294967295
 80004f0:	f000 b97e 	b.w	80007f0 <__aeabi_idiv0>
 80004f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004fc:	f000 f806 	bl	800050c <__udivmoddi4>
 8000500:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000508:	b004      	add	sp, #16
 800050a:	4770      	bx	lr

0800050c <__udivmoddi4>:
 800050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000510:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000512:	460c      	mov	r4, r1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d14d      	bne.n	80005b4 <__udivmoddi4+0xa8>
 8000518:	428a      	cmp	r2, r1
 800051a:	460f      	mov	r7, r1
 800051c:	4684      	mov	ip, r0
 800051e:	4696      	mov	lr, r2
 8000520:	fab2 f382 	clz	r3, r2
 8000524:	d960      	bls.n	80005e8 <__udivmoddi4+0xdc>
 8000526:	b14b      	cbz	r3, 800053c <__udivmoddi4+0x30>
 8000528:	fa02 fe03 	lsl.w	lr, r2, r3
 800052c:	f1c3 0220 	rsb	r2, r3, #32
 8000530:	409f      	lsls	r7, r3
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f202 	lsr.w	r2, r0, r2
 800053a:	4317      	orrs	r7, r2
 800053c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000540:	fa1f f48e 	uxth.w	r4, lr
 8000544:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000548:	fbb7 f1f6 	udiv	r1, r7, r6
 800054c:	fb06 7711 	mls	r7, r6, r1, r7
 8000550:	fb01 f004 	mul.w	r0, r1, r4
 8000554:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000558:	4290      	cmp	r0, r2
 800055a:	d908      	bls.n	800056e <__udivmoddi4+0x62>
 800055c:	eb1e 0202 	adds.w	r2, lr, r2
 8000560:	f101 37ff 	add.w	r7, r1, #4294967295
 8000564:	d202      	bcs.n	800056c <__udivmoddi4+0x60>
 8000566:	4290      	cmp	r0, r2
 8000568:	f200 812d 	bhi.w	80007c6 <__udivmoddi4+0x2ba>
 800056c:	4639      	mov	r1, r7
 800056e:	1a12      	subs	r2, r2, r0
 8000570:	fa1f fc8c 	uxth.w	ip, ip
 8000574:	fbb2 f0f6 	udiv	r0, r2, r6
 8000578:	fb06 2210 	mls	r2, r6, r0, r2
 800057c:	fb00 f404 	mul.w	r4, r0, r4
 8000580:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000584:	4564      	cmp	r4, ip
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x8e>
 8000588:	eb1e 0c0c 	adds.w	ip, lr, ip
 800058c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000590:	d202      	bcs.n	8000598 <__udivmoddi4+0x8c>
 8000592:	4564      	cmp	r4, ip
 8000594:	f200 811a 	bhi.w	80007cc <__udivmoddi4+0x2c0>
 8000598:	4610      	mov	r0, r2
 800059a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800059e:	ebac 0c04 	sub.w	ip, ip, r4
 80005a2:	2100      	movs	r1, #0
 80005a4:	b125      	cbz	r5, 80005b0 <__udivmoddi4+0xa4>
 80005a6:	fa2c f303 	lsr.w	r3, ip, r3
 80005aa:	2200      	movs	r2, #0
 80005ac:	e9c5 3200 	strd	r3, r2, [r5]
 80005b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d905      	bls.n	80005c4 <__udivmoddi4+0xb8>
 80005b8:	b10d      	cbz	r5, 80005be <__udivmoddi4+0xb2>
 80005ba:	e9c5 0100 	strd	r0, r1, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7f5      	b.n	80005b0 <__udivmoddi4+0xa4>
 80005c4:	fab3 f183 	clz	r1, r3
 80005c8:	2900      	cmp	r1, #0
 80005ca:	d14d      	bne.n	8000668 <__udivmoddi4+0x15c>
 80005cc:	42a3      	cmp	r3, r4
 80005ce:	f0c0 80f2 	bcc.w	80007b6 <__udivmoddi4+0x2aa>
 80005d2:	4290      	cmp	r0, r2
 80005d4:	f080 80ef 	bcs.w	80007b6 <__udivmoddi4+0x2aa>
 80005d8:	4606      	mov	r6, r0
 80005da:	4623      	mov	r3, r4
 80005dc:	4608      	mov	r0, r1
 80005de:	2d00      	cmp	r5, #0
 80005e0:	d0e6      	beq.n	80005b0 <__udivmoddi4+0xa4>
 80005e2:	e9c5 6300 	strd	r6, r3, [r5]
 80005e6:	e7e3      	b.n	80005b0 <__udivmoddi4+0xa4>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f040 80a2 	bne.w	8000732 <__udivmoddi4+0x226>
 80005ee:	1a8a      	subs	r2, r1, r2
 80005f0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80005f4:	fa1f f68e 	uxth.w	r6, lr
 80005f8:	2101      	movs	r1, #1
 80005fa:	fbb2 f4f7 	udiv	r4, r2, r7
 80005fe:	fb07 2014 	mls	r0, r7, r4, r2
 8000602:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000606:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800060a:	fb06 f004 	mul.w	r0, r6, r4
 800060e:	4290      	cmp	r0, r2
 8000610:	d90f      	bls.n	8000632 <__udivmoddi4+0x126>
 8000612:	eb1e 0202 	adds.w	r2, lr, r2
 8000616:	f104 38ff 	add.w	r8, r4, #4294967295
 800061a:	bf2c      	ite	cs
 800061c:	f04f 0901 	movcs.w	r9, #1
 8000620:	f04f 0900 	movcc.w	r9, #0
 8000624:	4290      	cmp	r0, r2
 8000626:	d903      	bls.n	8000630 <__udivmoddi4+0x124>
 8000628:	f1b9 0f00 	cmp.w	r9, #0
 800062c:	f000 80c8 	beq.w	80007c0 <__udivmoddi4+0x2b4>
 8000630:	4644      	mov	r4, r8
 8000632:	1a12      	subs	r2, r2, r0
 8000634:	fa1f fc8c 	uxth.w	ip, ip
 8000638:	fbb2 f0f7 	udiv	r0, r2, r7
 800063c:	fb07 2210 	mls	r2, r7, r0, r2
 8000640:	fb00 f606 	mul.w	r6, r0, r6
 8000644:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000648:	4566      	cmp	r6, ip
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x152>
 800064c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000650:	f100 32ff 	add.w	r2, r0, #4294967295
 8000654:	d202      	bcs.n	800065c <__udivmoddi4+0x150>
 8000656:	4566      	cmp	r6, ip
 8000658:	f200 80bb 	bhi.w	80007d2 <__udivmoddi4+0x2c6>
 800065c:	4610      	mov	r0, r2
 800065e:	ebac 0c06 	sub.w	ip, ip, r6
 8000662:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000666:	e79d      	b.n	80005a4 <__udivmoddi4+0x98>
 8000668:	f1c1 0620 	rsb	r6, r1, #32
 800066c:	408b      	lsls	r3, r1
 800066e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000672:	fa22 f706 	lsr.w	r7, r2, r6
 8000676:	fa20 fc06 	lsr.w	ip, r0, r6
 800067a:	40f4      	lsrs	r4, r6
 800067c:	408a      	lsls	r2, r1
 800067e:	431f      	orrs	r7, r3
 8000680:	ea4e 030c 	orr.w	r3, lr, ip
 8000684:	fa00 fe01 	lsl.w	lr, r0, r1
 8000688:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800068c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000690:	fa1f fc87 	uxth.w	ip, r7
 8000694:	fbb4 f0f8 	udiv	r0, r4, r8
 8000698:	fb08 4410 	mls	r4, r8, r0, r4
 800069c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006a0:	fb00 f90c 	mul.w	r9, r0, ip
 80006a4:	45a1      	cmp	r9, r4
 80006a6:	d90e      	bls.n	80006c6 <__udivmoddi4+0x1ba>
 80006a8:	193c      	adds	r4, r7, r4
 80006aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80006ae:	bf2c      	ite	cs
 80006b0:	f04f 0b01 	movcs.w	fp, #1
 80006b4:	f04f 0b00 	movcc.w	fp, #0
 80006b8:	45a1      	cmp	r9, r4
 80006ba:	d903      	bls.n	80006c4 <__udivmoddi4+0x1b8>
 80006bc:	f1bb 0f00 	cmp.w	fp, #0
 80006c0:	f000 8093 	beq.w	80007ea <__udivmoddi4+0x2de>
 80006c4:	4650      	mov	r0, sl
 80006c6:	eba4 0409 	sub.w	r4, r4, r9
 80006ca:	fa1f f983 	uxth.w	r9, r3
 80006ce:	fbb4 f3f8 	udiv	r3, r4, r8
 80006d2:	fb08 4413 	mls	r4, r8, r3, r4
 80006d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80006da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006de:	45a4      	cmp	ip, r4
 80006e0:	d906      	bls.n	80006f0 <__udivmoddi4+0x1e4>
 80006e2:	193c      	adds	r4, r7, r4
 80006e4:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e8:	d201      	bcs.n	80006ee <__udivmoddi4+0x1e2>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	d87a      	bhi.n	80007e4 <__udivmoddi4+0x2d8>
 80006ee:	4643      	mov	r3, r8
 80006f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80006f4:	eba4 040c 	sub.w	r4, r4, ip
 80006f8:	fba0 9802 	umull	r9, r8, r0, r2
 80006fc:	4544      	cmp	r4, r8
 80006fe:	46cc      	mov	ip, r9
 8000700:	4643      	mov	r3, r8
 8000702:	d302      	bcc.n	800070a <__udivmoddi4+0x1fe>
 8000704:	d106      	bne.n	8000714 <__udivmoddi4+0x208>
 8000706:	45ce      	cmp	lr, r9
 8000708:	d204      	bcs.n	8000714 <__udivmoddi4+0x208>
 800070a:	3801      	subs	r0, #1
 800070c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000710:	eb68 0307 	sbc.w	r3, r8, r7
 8000714:	b15d      	cbz	r5, 800072e <__udivmoddi4+0x222>
 8000716:	ebbe 020c 	subs.w	r2, lr, ip
 800071a:	eb64 0403 	sbc.w	r4, r4, r3
 800071e:	fa04 f606 	lsl.w	r6, r4, r6
 8000722:	fa22 f301 	lsr.w	r3, r2, r1
 8000726:	40cc      	lsrs	r4, r1
 8000728:	431e      	orrs	r6, r3
 800072a:	e9c5 6400 	strd	r6, r4, [r5]
 800072e:	2100      	movs	r1, #0
 8000730:	e73e      	b.n	80005b0 <__udivmoddi4+0xa4>
 8000732:	fa02 fe03 	lsl.w	lr, r2, r3
 8000736:	f1c3 0120 	rsb	r1, r3, #32
 800073a:	fa04 f203 	lsl.w	r2, r4, r3
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	40cc      	lsrs	r4, r1
 8000744:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000748:	fa20 f101 	lsr.w	r1, r0, r1
 800074c:	fa1f f68e 	uxth.w	r6, lr
 8000750:	fbb4 f0f7 	udiv	r0, r4, r7
 8000754:	430a      	orrs	r2, r1
 8000756:	fb07 4410 	mls	r4, r7, r0, r4
 800075a:	0c11      	lsrs	r1, r2, #16
 800075c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000760:	fb00 f406 	mul.w	r4, r0, r6
 8000764:	428c      	cmp	r4, r1
 8000766:	d90e      	bls.n	8000786 <__udivmoddi4+0x27a>
 8000768:	eb1e 0101 	adds.w	r1, lr, r1
 800076c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000770:	bf2c      	ite	cs
 8000772:	f04f 0901 	movcs.w	r9, #1
 8000776:	f04f 0900 	movcc.w	r9, #0
 800077a:	428c      	cmp	r4, r1
 800077c:	d902      	bls.n	8000784 <__udivmoddi4+0x278>
 800077e:	f1b9 0f00 	cmp.w	r9, #0
 8000782:	d02c      	beq.n	80007de <__udivmoddi4+0x2d2>
 8000784:	4640      	mov	r0, r8
 8000786:	1b09      	subs	r1, r1, r4
 8000788:	b292      	uxth	r2, r2
 800078a:	fbb1 f4f7 	udiv	r4, r1, r7
 800078e:	fb07 1114 	mls	r1, r7, r4, r1
 8000792:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000796:	fb04 f106 	mul.w	r1, r4, r6
 800079a:	4291      	cmp	r1, r2
 800079c:	d907      	bls.n	80007ae <__udivmoddi4+0x2a2>
 800079e:	eb1e 0202 	adds.w	r2, lr, r2
 80007a2:	f104 38ff 	add.w	r8, r4, #4294967295
 80007a6:	d201      	bcs.n	80007ac <__udivmoddi4+0x2a0>
 80007a8:	4291      	cmp	r1, r2
 80007aa:	d815      	bhi.n	80007d8 <__udivmoddi4+0x2cc>
 80007ac:	4644      	mov	r4, r8
 80007ae:	1a52      	subs	r2, r2, r1
 80007b0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007b4:	e721      	b.n	80005fa <__udivmoddi4+0xee>
 80007b6:	1a86      	subs	r6, r0, r2
 80007b8:	eb64 0303 	sbc.w	r3, r4, r3
 80007bc:	2001      	movs	r0, #1
 80007be:	e70e      	b.n	80005de <__udivmoddi4+0xd2>
 80007c0:	3c02      	subs	r4, #2
 80007c2:	4472      	add	r2, lr
 80007c4:	e735      	b.n	8000632 <__udivmoddi4+0x126>
 80007c6:	3902      	subs	r1, #2
 80007c8:	4472      	add	r2, lr
 80007ca:	e6d0      	b.n	800056e <__udivmoddi4+0x62>
 80007cc:	44f4      	add	ip, lr
 80007ce:	3802      	subs	r0, #2
 80007d0:	e6e3      	b.n	800059a <__udivmoddi4+0x8e>
 80007d2:	44f4      	add	ip, lr
 80007d4:	3802      	subs	r0, #2
 80007d6:	e742      	b.n	800065e <__udivmoddi4+0x152>
 80007d8:	3c02      	subs	r4, #2
 80007da:	4472      	add	r2, lr
 80007dc:	e7e7      	b.n	80007ae <__udivmoddi4+0x2a2>
 80007de:	3802      	subs	r0, #2
 80007e0:	4471      	add	r1, lr
 80007e2:	e7d0      	b.n	8000786 <__udivmoddi4+0x27a>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	443c      	add	r4, r7
 80007e8:	e782      	b.n	80006f0 <__udivmoddi4+0x1e4>
 80007ea:	3802      	subs	r0, #2
 80007ec:	443c      	add	r4, r7
 80007ee:	e76a      	b.n	80006c6 <__udivmoddi4+0x1ba>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000800:	2334      	movs	r3, #52	@ 0x34
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <tx_application_define+0x70>)
 800080a:	4917      	ldr	r1, [pc, #92]	@ (8000868 <tx_application_define+0x74>)
 800080c:	4817      	ldr	r0, [pc, #92]	@ (800086c <tx_application_define+0x78>)
 800080e:	f00b fa21 	bl	800bc54 <_txe_byte_pool_create>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10a      	bne.n	800082e <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <tx_application_define+0x78>)
 800081a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	f000 f82d 	bl	800087c <App_ThreadX_Init>
 8000822:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800082e:	2334      	movs	r3, #52	@ 0x34
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000836:	4a0e      	ldr	r2, [pc, #56]	@ (8000870 <tx_application_define+0x7c>)
 8000838:	490e      	ldr	r1, [pc, #56]	@ (8000874 <tx_application_define+0x80>)
 800083a:	480f      	ldr	r0, [pc, #60]	@ (8000878 <tx_application_define+0x84>)
 800083c:	f00b fa0a 	bl	800bc54 <_txe_byte_pool_create>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10a      	bne.n	800085c <tx_application_define+0x68>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <tx_application_define+0x84>)
 8000848:	60bb      	str	r3, [r7, #8]
    status = MX_USBX_Device_Init(memory_ptr);
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f00e fec0 	bl	800f5d0 <MX_USBX_Device_Init>
 8000850:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <tx_application_define+0x68>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <tx_application_define+0x64>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000088 	.word	0x20000088
 8000868:	08010490 	.word	0x08010490
 800086c:	20000488 	.word	0x20000488
 8000870:	200004bc 	.word	0x200004bc
 8000874:	080104a4 	.word	0x080104a4
 8000878:	200024bc 	.word	0x200024bc

0800087c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000888:	68fb      	ldr	r3, [r7, #12]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Before_Kernel_Start */

  /* USER CODE END Before_Kernel_Start */

  tx_kernel_enter();
 800089a:	f009 fa8d 	bl	8009db8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN Kernel_Start_Error */

  /* USER CODE END Kernel_Start_Error */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a6:	f000 fb11 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80008aa:	f000 f868 	bl	800097e <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f80e 	bl	80008ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 f8f3 	bl	8000a9c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80008b6:	f000 f871 	bl	800099c <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 80008ba:	f000 f88f 	bl	80009dc <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80008be:	f000 f8a1 	bl	8000a04 <MX_USART1_UART_Init>
 // HAL_PCD_DevConnect(&hpcd_USB_OTG_HS);


  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80008c2:	f7ff ffe8 	bl	8000896 <MX_ThreadX_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  USBX_Device_Process(NULL);
	      HAL_Delay(1);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fb50 	bl	8000f6c <HAL_Delay>
 80008cc:	e7fb      	b.n	80008c6 <main+0x24>

080008ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b09e      	sub	sp, #120	@ 0x78
 80008d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	2260      	movs	r2, #96	@ 0x60
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f00f fd9f 	bl	8010420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80008f2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80008f6:	f002 fc4b 	bl	8003190 <HAL_PWREx_ControlVoltageScaling>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000900:	f000 f908 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800090c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	2303      	movs	r3, #3
 8000914:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800091e:	2308      	movs	r3, #8
 8000920:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000922:	2308      	movs	r3, #8
 8000924:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
 800092a:	2308      	movs	r3, #8
 800092c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800092e:	230c      	movs	r3, #12
 8000930:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fd24 	bl	8003388 <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000946:	f000 f8e5 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	231f      	movs	r3, #31
 800094c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f003 fbea 	bl	8004140 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000972:	f000 f8cf 	bl	8000b14 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3778      	adds	r7, #120	@ 0x78
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000982:	f002 fcf1 	bl	8003368 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000986:	2002      	movs	r0, #2
 8000988:	f002 fc8e 	bl	80032a8 <HAL_PWREx_ConfigSupply>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000992:	f000 f8bf 	bl	8000b14 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <MX_GPDMA1_Init+0x3c>)
 80009a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a8:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <MX_GPDMA1_Init+0x3c>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_GPDMA1_Init+0x3c>)
 80009b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	201d      	movs	r0, #29
 80009c6:	f000 fbad 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80009ca:	201d      	movs	r0, #29
 80009cc:	f000 fbc4 	bl	8001158 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	46020c00 	.word	0x46020c00

080009dc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fb41 	bl	8002068 <HAL_ICACHE_ConfigAssociativityMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80009ec:	f000 f892 	bl	8000b14 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009f0:	f001 fb5a 	bl	80020a8 <HAL_ICACHE_Enable>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80009fa:	f000 f88b 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <MX_USART1_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a4e:	f007 fa4d 	bl	8007eec <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f85c 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a60:	f007 fe9a 	bl	8008798 <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f853 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a72:	f007 fecf 	bl	8008814 <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f84a 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_USART1_UART_Init+0x90>)
 8000a82:	f007 fe50 	bl	8008726 <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f842 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200024f0 	.word	0x200024f0
 8000a98:	40013800 	.word	0x40013800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_GPIO_Init+0x50>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa8:	4a10      	ldr	r2, [pc, #64]	@ (8000aec <MX_GPIO_Init+0x50>)
 8000aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_GPIO_Init+0x50>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_GPIO_Init+0x50>)
 8000ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac6:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <MX_GPIO_Init+0x50>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_GPIO_Init+0x50>)
 8000ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	46020c00 	.word	0x46020c00

08000af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b02:	f000 fa13 	bl	8000f2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40001000 	.word	0x40001000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <Error_Handler+0x8>

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_MspInit+0x30>)
 8000b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b2c:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x30>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x30>)
 8000b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000b44:	f002 fc00 	bl	8003348 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	46020c00 	.word	0x46020c00

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0c0      	sub	sp, #256	@ 0x100
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	22d8      	movs	r2, #216	@ 0xd8
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00f fc53 	bl	8010420 <memset>
  if(huart->Instance==USART1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a48      	ldr	r2, [pc, #288]	@ (8000ca0 <HAL_UART_MspInit+0x14c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	f040 8087 	bne.w	8000c94 <HAL_UART_MspInit+0x140>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b86:	f04f 0201 	mov.w	r2, #1
 8000b8a:	f04f 0300 	mov.w	r3, #0
 8000b8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b92:	2300      	movs	r3, #0
 8000b94:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 fed8 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ba6:	f7ff ffb5 	bl	8000b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000baa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca4 <HAL_UART_MspInit+0x150>)
 8000bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000bb0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ca4 <HAL_UART_MspInit+0x150>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000bba:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca4 <HAL_UART_MspInit+0x150>)
 8000bbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000bc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b36      	ldr	r3, [pc, #216]	@ (8000ca4 <HAL_UART_MspInit+0x150>)
 8000bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bce:	4a35      	ldr	r2, [pc, #212]	@ (8000ca4 <HAL_UART_MspInit+0x150>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <HAL_UART_MspInit+0x150>)
 8000bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c00:	2307      	movs	r3, #7
 8000c02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4826      	ldr	r0, [pc, #152]	@ (8000ca8 <HAL_UART_MspInit+0x154>)
 8000c0e:	f001 f853 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000c12:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c14:	4a26      	ldr	r2, [pc, #152]	@ (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000c16:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8000c18:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c1a:	2219      	movs	r2, #25
 8000c1c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000c66:	4811      	ldr	r0, [pc, #68]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c68:	f000 fadc 	bl	8001224 <HAL_DMA_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 8000c72:	f7ff ff4f 	bl	8000b14 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c7a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000c82:	2110      	movs	r1, #16
 8000c84:	4809      	ldr	r0, [pc, #36]	@ (8000cac <HAL_UART_MspInit+0x158>)
 8000c86:	f000 fd5a 	bl	800173e <HAL_DMA_ConfigChannelAttributes>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8000c90:	f7ff ff40 	bl	8000b14 <Error_Handler>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	46020c00 	.word	0x46020c00
 8000ca8:	42020000 	.word	0x42020000
 8000cac:	20002584 	.word	0x20002584
 8000cb0:	40020050 	.word	0x40020050

08000cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	@ 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d80 <HAL_InitTick+0xcc>)
 8000cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cca:	4a2d      	ldr	r2, [pc, #180]	@ (8000d80 <HAL_InitTick+0xcc>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <HAL_InitTick+0xcc>)
 8000cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce2:	f107 0210 	add.w	r2, r7, #16
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fd71 	bl	80047d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf2:	f003 fd33 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8000cf6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cfa:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <HAL_InitTick+0xd0>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	0c9b      	lsrs	r3, r3, #18
 8000d02:	3b01      	subs	r3, #1
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d08:	4a20      	ldr	r2, [pc, #128]	@ (8000d8c <HAL_InitTick+0xd8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d14:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d26:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d28:	f006 fd20 	bl	800776c <HAL_TIM_Base_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000d32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d118      	bne.n	8000d6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d3a:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <HAL_InitTick+0xd4>)
 8000d3c:	f006 fd78 	bl	8007830 <HAL_TIM_Base_Start_IT>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000d46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10e      	bne.n	8000d6c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d808      	bhi.n	8000d66 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2031      	movs	r0, #49	@ 0x31
 8000d5a:	f000 f9e3 	bl	8001124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <HAL_InitTick+0xdc>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e002      	b.n	8000d6c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000d6c:	2031      	movs	r0, #49	@ 0x31
 8000d6e:	f000 f9f3 	bl	8001158 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000d72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3738      	adds	r7, #56	@ 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	46020c00 	.word	0x46020c00
 8000d84:	431bde83 	.word	0x431bde83
 8000d88:	20002ae0 	.word	0x20002ae0
 8000d8c:	40001000 	.word	0x40001000
 8000d90:	20000004 	.word	0x20000004

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <GPDMA1_Channel0_IRQHandler+0x10>)
 8000dd2:	f000 fb53 	bl	800147c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20002584 	.word	0x20002584

08000de0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <TIM6_IRQHandler+0x10>)
 8000de6:	f006 fdc3 	bl	8007970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20002ae0 	.word	0x20002ae0

08000df4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <OTG_HS_IRQHandler+0x10>)
 8000dfa:	f001 f965 	bl	80020c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200025fc 	.word	0x200025fc

08000e08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <SystemInit+0x68>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <SystemInit+0x68>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <SystemInit+0x6c>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <SystemInit+0x6c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <SystemInit+0x6c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <SystemInit+0x6c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <SystemInit+0x6c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <SystemInit+0x6c>)
 8000e3a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e3e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e42:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <SystemInit+0x6c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <SystemInit+0x6c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <SystemInit+0x6c>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <SystemInit+0x6c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SystemInit+0x68>)
 8000e5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e62:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00
 8000e74:	46020c00 	.word	0x46020c00

08000e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e7c:	f7ff ffc4 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e82:	e003      	b.n	8000e8c <LoopCopyDataInit>

08000e84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e8a:	3104      	adds	r1, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e8c:	480a      	ldr	r0, [pc, #40]	@ (8000eb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e94:	d3f6      	bcc.n	8000e84 <CopyDataInit>
	ldr	r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e98:	e002      	b.n	8000ea0 <LoopFillZerobss>

08000e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e9c:	f842 3b04 	str.w	r3, [r2], #4

08000ea0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ea2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea4:	d3f9      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f00f fac3 	bl	8010430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eaa:	f7ff fcfa 	bl	80008a2 <main>

08000eae <LoopForever>:

LoopForever:
    b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000eb0:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000eb4:	080106a8 	.word	0x080106a8
	ldr	r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ebc:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8000ec0:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8000ec4:	20003744 	.word	0x20003744

08000ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_2_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_Init+0x50>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <HAL_Init+0x50>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f916 	bl	800110e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ee2:	f003 fb1f 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_Init+0x54>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <HAL_Init+0x58>)
 8000ef2:	5ccb      	ldrb	r3, [r1, r3]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <HAL_Init+0x5c>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000efc:	2004      	movs	r0, #4
 8000efe:	f000 f939 	bl	8001174 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f02:	200f      	movs	r0, #15
 8000f04:	f7ff fed6 	bl	8000cb4 <HAL_InitTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e002      	b.n	8000f18 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f12:	f7ff fe05 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40022000 	.word	0x40022000
 8000f20:	46020c00 	.word	0x46020c00
 8000f24:	08010598 	.word	0x08010598
 8000f28:	20000000 	.word	0x20000000

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20002b2c 	.word	0x20002b2c

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20002b2c 	.word	0x20002b2c

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	@ (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff4c 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001132:	f7ff ff63 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001136:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	6978      	ldr	r0, [r7, #20]
 800113e:	f7ff ffb3 	bl	80010a8 <NVIC_EncodePriority>
 8001142:	4602      	mov	r2, r0
 8001144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff82 	bl	8001054 <__NVIC_SetPriority>
}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff56 	bl	8001018 <__NVIC_EnableIRQ>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d844      	bhi.n	800120c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001182:	a201      	add	r2, pc, #4	@ (adr r2, 8001188 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001188:	080011ab 	.word	0x080011ab
 800118c:	080011c9 	.word	0x080011c9
 8001190:	080011eb 	.word	0x080011eb
 8001194:	0800120d 	.word	0x0800120d
 8001198:	0800119d 	.word	0x0800119d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1e      	ldr	r2, [pc, #120]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6013      	str	r3, [r2, #0]
      break;
 80011a8:	e031      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011b0:	f023 0304 	bic.w	r3, r3, #4
 80011b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011c6:	e022      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a13      	ldr	r2, [pc, #76]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ce:	f023 0304 	bic.w	r3, r3, #4
 80011d2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011de:	4a10      	ldr	r2, [pc, #64]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011e8:	e011      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001202:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800120a:	e000      	b.n	800120e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800120c:	bf00      	nop
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010
 8001220:	46020c00 	.word	0x46020c00

08001224 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff fe92 	bl	8000f54 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0db      	b.n	80013f4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a6e      	ldr	r2, [pc, #440]	@ (80013fc <HAL_DMA_Init+0x1d8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f000 809f 	beq.w	8001386 <HAL_DMA_Init+0x162>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6c      	ldr	r2, [pc, #432]	@ (8001400 <HAL_DMA_Init+0x1dc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	f000 8099 	beq.w	8001386 <HAL_DMA_Init+0x162>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a6a      	ldr	r2, [pc, #424]	@ (8001404 <HAL_DMA_Init+0x1e0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f000 8093 	beq.w	8001386 <HAL_DMA_Init+0x162>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a68      	ldr	r2, [pc, #416]	@ (8001408 <HAL_DMA_Init+0x1e4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	f000 808d 	beq.w	8001386 <HAL_DMA_Init+0x162>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a66      	ldr	r2, [pc, #408]	@ (800140c <HAL_DMA_Init+0x1e8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	f000 8087 	beq.w	8001386 <HAL_DMA_Init+0x162>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a64      	ldr	r2, [pc, #400]	@ (8001410 <HAL_DMA_Init+0x1ec>)
 800127e:	4293      	cmp	r3, r2
 8001280:	f000 8081 	beq.w	8001386 <HAL_DMA_Init+0x162>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a62      	ldr	r2, [pc, #392]	@ (8001414 <HAL_DMA_Init+0x1f0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d07b      	beq.n	8001386 <HAL_DMA_Init+0x162>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a61      	ldr	r2, [pc, #388]	@ (8001418 <HAL_DMA_Init+0x1f4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d076      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a5f      	ldr	r2, [pc, #380]	@ (800141c <HAL_DMA_Init+0x1f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d071      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001420 <HAL_DMA_Init+0x1fc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d06c      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a5c      	ldr	r2, [pc, #368]	@ (8001424 <HAL_DMA_Init+0x200>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d067      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001428 <HAL_DMA_Init+0x204>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d062      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a59      	ldr	r2, [pc, #356]	@ (800142c <HAL_DMA_Init+0x208>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d05d      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a58      	ldr	r2, [pc, #352]	@ (8001430 <HAL_DMA_Init+0x20c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d058      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a56      	ldr	r2, [pc, #344]	@ (8001434 <HAL_DMA_Init+0x210>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d053      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a55      	ldr	r2, [pc, #340]	@ (8001438 <HAL_DMA_Init+0x214>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d04e      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a53      	ldr	r2, [pc, #332]	@ (800143c <HAL_DMA_Init+0x218>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d049      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a52      	ldr	r2, [pc, #328]	@ (8001440 <HAL_DMA_Init+0x21c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d044      	beq.n	8001386 <HAL_DMA_Init+0x162>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a50      	ldr	r2, [pc, #320]	@ (8001444 <HAL_DMA_Init+0x220>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d03f      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a4f      	ldr	r2, [pc, #316]	@ (8001448 <HAL_DMA_Init+0x224>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d03a      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a4d      	ldr	r2, [pc, #308]	@ (800144c <HAL_DMA_Init+0x228>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d035      	beq.n	8001386 <HAL_DMA_Init+0x162>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_DMA_Init+0x22c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d030      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a4a      	ldr	r2, [pc, #296]	@ (8001454 <HAL_DMA_Init+0x230>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d02b      	beq.n	8001386 <HAL_DMA_Init+0x162>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a49      	ldr	r2, [pc, #292]	@ (8001458 <HAL_DMA_Init+0x234>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d026      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a47      	ldr	r2, [pc, #284]	@ (800145c <HAL_DMA_Init+0x238>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d021      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a46      	ldr	r2, [pc, #280]	@ (8001460 <HAL_DMA_Init+0x23c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d01c      	beq.n	8001386 <HAL_DMA_Init+0x162>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <HAL_DMA_Init+0x240>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d017      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a43      	ldr	r2, [pc, #268]	@ (8001468 <HAL_DMA_Init+0x244>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d012      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a41      	ldr	r2, [pc, #260]	@ (800146c <HAL_DMA_Init+0x248>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_DMA_Init+0x162>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a40      	ldr	r2, [pc, #256]	@ (8001470 <HAL_DMA_Init+0x24c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d008      	beq.n	8001386 <HAL_DMA_Init+0x162>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a3e      	ldr	r2, [pc, #248]	@ (8001474 <HAL_DMA_Init+0x250>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d003      	beq.n	8001386 <HAL_DMA_Init+0x162>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a3d      	ldr	r2, [pc, #244]	@ (8001478 <HAL_DMA_Init+0x254>)
 8001384:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2202      	movs	r2, #2
 8001392:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0206 	orr.w	r2, r2, #6
 80013a4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80013a6:	e00f      	b.n	80013c8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80013a8:	f7ff fdd4 	bl	8000f54 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d908      	bls.n	80013c8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2210      	movs	r2, #16
 80013ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e015      	b.n	80013f4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1e8      	bne.n	80013a8 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f9ee 	bl	80017b8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40020050 	.word	0x40020050
 8001400:	50020050 	.word	0x50020050
 8001404:	400200d0 	.word	0x400200d0
 8001408:	500200d0 	.word	0x500200d0
 800140c:	40020150 	.word	0x40020150
 8001410:	50020150 	.word	0x50020150
 8001414:	400201d0 	.word	0x400201d0
 8001418:	500201d0 	.word	0x500201d0
 800141c:	40020250 	.word	0x40020250
 8001420:	50020250 	.word	0x50020250
 8001424:	400202d0 	.word	0x400202d0
 8001428:	500202d0 	.word	0x500202d0
 800142c:	40020350 	.word	0x40020350
 8001430:	50020350 	.word	0x50020350
 8001434:	400203d0 	.word	0x400203d0
 8001438:	500203d0 	.word	0x500203d0
 800143c:	40020450 	.word	0x40020450
 8001440:	50020450 	.word	0x50020450
 8001444:	400204d0 	.word	0x400204d0
 8001448:	500204d0 	.word	0x500204d0
 800144c:	40020550 	.word	0x40020550
 8001450:	50020550 	.word	0x50020550
 8001454:	400205d0 	.word	0x400205d0
 8001458:	500205d0 	.word	0x500205d0
 800145c:	40020650 	.word	0x40020650
 8001460:	50020650 	.word	0x50020650
 8001464:	400206d0 	.word	0x400206d0
 8001468:	500206d0 	.word	0x500206d0
 800146c:	40020750 	.word	0x40020750
 8001470:	50020750 	.word	0x50020750
 8001474:	400207d0 	.word	0x400207d0
 8001478:	500207d0 	.word	0x500207d0

0800147c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800148c:	f023 030f 	bic.w	r3, r3, #15
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	3b50      	subs	r3, #80	@ 0x50
 800149c:	09db      	lsrs	r3, r3, #7
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2201      	movs	r2, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 813b 	beq.w	8001732 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d011      	beq.n	80014ee <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00a      	beq.n	80014ee <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d011      	beq.n	8001520 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001512:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	f043 0202 	orr.w	r2, r3, #2
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d011      	beq.n	8001552 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00a      	beq.n	8001552 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001544:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f043 0204 	orr.w	r2, r3, #4
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d011      	beq.n	8001584 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001576:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	f043 0208 	orr.w	r2, r3, #8
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800158e:	2b00      	cmp	r3, #0
 8001590:	d013      	beq.n	80015ba <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a8:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d04c      	beq.n	8001662 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d045      	beq.n	8001662 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015de:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d12e      	bne.n	800164a <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015fa:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0202 	orr.w	r2, r2, #2
 800160a:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001624:	2201      	movs	r2, #1
 8001626:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d07a      	beq.n	8001736 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
        }

        return;
 8001648:	e075      	b.n	8001736 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2205      	movs	r2, #5
 800164e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d039      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d032      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001686:	2b00      	cmp	r3, #0
 8001688:	d012      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d116      	bne.n	80016c2 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169a:	2b00      	cmp	r3, #0
 800169c:	d111      	bne.n	80016c2 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016aa:	2201      	movs	r2, #1
 80016ac:	731a      	strb	r2, [r3, #12]
 80016ae:	e008      	b.n	80016c2 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016ca:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d025      	beq.n	8001738 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0202 	orr.w	r2, r2, #2
 80016fa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001714:	2201      	movs	r2, #1
 8001716:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
 8001730:	e002      	b.n	8001738 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001732:	bf00      	nop
 8001734:	e000      	b.n	8001738 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001736:	bf00      	nop
    }
  }
}
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e02b      	b.n	80017aa <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800175a:	f023 030f 	bic.w	r3, r3, #15
 800175e:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001768:	3b50      	subs	r3, #80	@ 0x50
 800176a:	09db      	lsrs	r3, r3, #7
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2201      	movs	r2, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d012      	beq.n	80017a8 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f003 0311 	and.w	r3, r3, #17
 8001788:	2b11      	cmp	r3, #17
 800178a:	d106      	bne.n	800179a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	431a      	orrs	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	e006      	b.n	80017a8 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a53      	ldr	r2, [pc, #332]	@ (8001944 <DMA_Init+0x18c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f000 80a0 	beq.w	800193e <DMA_Init+0x186>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a51      	ldr	r2, [pc, #324]	@ (8001948 <DMA_Init+0x190>)
 8001804:	4293      	cmp	r3, r2
 8001806:	f000 809a 	beq.w	800193e <DMA_Init+0x186>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a4f      	ldr	r2, [pc, #316]	@ (800194c <DMA_Init+0x194>)
 8001810:	4293      	cmp	r3, r2
 8001812:	f000 8094 	beq.w	800193e <DMA_Init+0x186>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4d      	ldr	r2, [pc, #308]	@ (8001950 <DMA_Init+0x198>)
 800181c:	4293      	cmp	r3, r2
 800181e:	f000 808e 	beq.w	800193e <DMA_Init+0x186>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a4b      	ldr	r2, [pc, #300]	@ (8001954 <DMA_Init+0x19c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	f000 8088 	beq.w	800193e <DMA_Init+0x186>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a49      	ldr	r2, [pc, #292]	@ (8001958 <DMA_Init+0x1a0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	f000 8082 	beq.w	800193e <DMA_Init+0x186>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a47      	ldr	r2, [pc, #284]	@ (800195c <DMA_Init+0x1a4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d07c      	beq.n	800193e <DMA_Init+0x186>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a45      	ldr	r2, [pc, #276]	@ (8001960 <DMA_Init+0x1a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d077      	beq.n	800193e <DMA_Init+0x186>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a44      	ldr	r2, [pc, #272]	@ (8001964 <DMA_Init+0x1ac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d072      	beq.n	800193e <DMA_Init+0x186>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a42      	ldr	r2, [pc, #264]	@ (8001968 <DMA_Init+0x1b0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d06d      	beq.n	800193e <DMA_Init+0x186>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a41      	ldr	r2, [pc, #260]	@ (800196c <DMA_Init+0x1b4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d068      	beq.n	800193e <DMA_Init+0x186>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a3f      	ldr	r2, [pc, #252]	@ (8001970 <DMA_Init+0x1b8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d063      	beq.n	800193e <DMA_Init+0x186>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a3e      	ldr	r2, [pc, #248]	@ (8001974 <DMA_Init+0x1bc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d05e      	beq.n	800193e <DMA_Init+0x186>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a3c      	ldr	r2, [pc, #240]	@ (8001978 <DMA_Init+0x1c0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d059      	beq.n	800193e <DMA_Init+0x186>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3b      	ldr	r2, [pc, #236]	@ (800197c <DMA_Init+0x1c4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d054      	beq.n	800193e <DMA_Init+0x186>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a39      	ldr	r2, [pc, #228]	@ (8001980 <DMA_Init+0x1c8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d04f      	beq.n	800193e <DMA_Init+0x186>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a38      	ldr	r2, [pc, #224]	@ (8001984 <DMA_Init+0x1cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d04a      	beq.n	800193e <DMA_Init+0x186>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a36      	ldr	r2, [pc, #216]	@ (8001988 <DMA_Init+0x1d0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d045      	beq.n	800193e <DMA_Init+0x186>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a35      	ldr	r2, [pc, #212]	@ (800198c <DMA_Init+0x1d4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d040      	beq.n	800193e <DMA_Init+0x186>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a33      	ldr	r2, [pc, #204]	@ (8001990 <DMA_Init+0x1d8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d03b      	beq.n	800193e <DMA_Init+0x186>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <DMA_Init+0x1dc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d036      	beq.n	800193e <DMA_Init+0x186>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a30      	ldr	r2, [pc, #192]	@ (8001998 <DMA_Init+0x1e0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d031      	beq.n	800193e <DMA_Init+0x186>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2f      	ldr	r2, [pc, #188]	@ (800199c <DMA_Init+0x1e4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d02c      	beq.n	800193e <DMA_Init+0x186>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2d      	ldr	r2, [pc, #180]	@ (80019a0 <DMA_Init+0x1e8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d027      	beq.n	800193e <DMA_Init+0x186>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a2c      	ldr	r2, [pc, #176]	@ (80019a4 <DMA_Init+0x1ec>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d022      	beq.n	800193e <DMA_Init+0x186>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <DMA_Init+0x1f0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01d      	beq.n	800193e <DMA_Init+0x186>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a29      	ldr	r2, [pc, #164]	@ (80019ac <DMA_Init+0x1f4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d018      	beq.n	800193e <DMA_Init+0x186>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a27      	ldr	r2, [pc, #156]	@ (80019b0 <DMA_Init+0x1f8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <DMA_Init+0x186>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a26      	ldr	r2, [pc, #152]	@ (80019b4 <DMA_Init+0x1fc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00e      	beq.n	800193e <DMA_Init+0x186>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <DMA_Init+0x200>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d009      	beq.n	800193e <DMA_Init+0x186>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a23      	ldr	r2, [pc, #140]	@ (80019bc <DMA_Init+0x204>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d004      	beq.n	800193e <DMA_Init+0x186>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a21      	ldr	r2, [pc, #132]	@ (80019c0 <DMA_Init+0x208>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d142      	bne.n	80019c4 <DMA_Init+0x20c>
 800193e:	2301      	movs	r3, #1
 8001940:	e041      	b.n	80019c6 <DMA_Init+0x20e>
 8001942:	bf00      	nop
 8001944:	40020050 	.word	0x40020050
 8001948:	50020050 	.word	0x50020050
 800194c:	400200d0 	.word	0x400200d0
 8001950:	500200d0 	.word	0x500200d0
 8001954:	40020150 	.word	0x40020150
 8001958:	50020150 	.word	0x50020150
 800195c:	400201d0 	.word	0x400201d0
 8001960:	500201d0 	.word	0x500201d0
 8001964:	40020250 	.word	0x40020250
 8001968:	50020250 	.word	0x50020250
 800196c:	400202d0 	.word	0x400202d0
 8001970:	500202d0 	.word	0x500202d0
 8001974:	40020350 	.word	0x40020350
 8001978:	50020350 	.word	0x50020350
 800197c:	400203d0 	.word	0x400203d0
 8001980:	500203d0 	.word	0x500203d0
 8001984:	40020450 	.word	0x40020450
 8001988:	50020450 	.word	0x50020450
 800198c:	400204d0 	.word	0x400204d0
 8001990:	500204d0 	.word	0x500204d0
 8001994:	40020550 	.word	0x40020550
 8001998:	50020550 	.word	0x50020550
 800199c:	400205d0 	.word	0x400205d0
 80019a0:	500205d0 	.word	0x500205d0
 80019a4:	40020650 	.word	0x40020650
 80019a8:	50020650 	.word	0x50020650
 80019ac:	400206d0 	.word	0x400206d0
 80019b0:	500206d0 	.word	0x500206d0
 80019b4:	40020750 	.word	0x40020750
 80019b8:	50020750 	.word	0x50020750
 80019bc:	400207d0 	.word	0x400207d0
 80019c0:	500207d0 	.word	0x500207d0
 80019c4:	2300      	movs	r3, #0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d012      	beq.n	80019f0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	3b01      	subs	r3, #1
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80019da:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	3b01      	subs	r3, #1
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80019e8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a22:	f040 80b0 	bne.w	8001b86 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a82      	ldr	r2, [pc, #520]	@ (8001c34 <DMA_Init+0x47c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	f000 80a0 	beq.w	8001b72 <DMA_Init+0x3ba>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a80      	ldr	r2, [pc, #512]	@ (8001c38 <DMA_Init+0x480>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	f000 809a 	beq.w	8001b72 <DMA_Init+0x3ba>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7e      	ldr	r2, [pc, #504]	@ (8001c3c <DMA_Init+0x484>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f000 8094 	beq.w	8001b72 <DMA_Init+0x3ba>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c40 <DMA_Init+0x488>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	f000 808e 	beq.w	8001b72 <DMA_Init+0x3ba>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001c44 <DMA_Init+0x48c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f000 8088 	beq.w	8001b72 <DMA_Init+0x3ba>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a78      	ldr	r2, [pc, #480]	@ (8001c48 <DMA_Init+0x490>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	f000 8082 	beq.w	8001b72 <DMA_Init+0x3ba>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a76      	ldr	r2, [pc, #472]	@ (8001c4c <DMA_Init+0x494>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d07c      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a74      	ldr	r2, [pc, #464]	@ (8001c50 <DMA_Init+0x498>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d077      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a73      	ldr	r2, [pc, #460]	@ (8001c54 <DMA_Init+0x49c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d072      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a71      	ldr	r2, [pc, #452]	@ (8001c58 <DMA_Init+0x4a0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d06d      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a70      	ldr	r2, [pc, #448]	@ (8001c5c <DMA_Init+0x4a4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d068      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6e      	ldr	r2, [pc, #440]	@ (8001c60 <DMA_Init+0x4a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d063      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6d      	ldr	r2, [pc, #436]	@ (8001c64 <DMA_Init+0x4ac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d05e      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a6b      	ldr	r2, [pc, #428]	@ (8001c68 <DMA_Init+0x4b0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d059      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a6a      	ldr	r2, [pc, #424]	@ (8001c6c <DMA_Init+0x4b4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d054      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a68      	ldr	r2, [pc, #416]	@ (8001c70 <DMA_Init+0x4b8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d04f      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a67      	ldr	r2, [pc, #412]	@ (8001c74 <DMA_Init+0x4bc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04a      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a65      	ldr	r2, [pc, #404]	@ (8001c78 <DMA_Init+0x4c0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d045      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a64      	ldr	r2, [pc, #400]	@ (8001c7c <DMA_Init+0x4c4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d040      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a62      	ldr	r2, [pc, #392]	@ (8001c80 <DMA_Init+0x4c8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d03b      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a61      	ldr	r2, [pc, #388]	@ (8001c84 <DMA_Init+0x4cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d036      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a5f      	ldr	r2, [pc, #380]	@ (8001c88 <DMA_Init+0x4d0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d031      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a5e      	ldr	r2, [pc, #376]	@ (8001c8c <DMA_Init+0x4d4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d02c      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5c      	ldr	r2, [pc, #368]	@ (8001c90 <DMA_Init+0x4d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d027      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a5b      	ldr	r2, [pc, #364]	@ (8001c94 <DMA_Init+0x4dc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d022      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a59      	ldr	r2, [pc, #356]	@ (8001c98 <DMA_Init+0x4e0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01d      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a58      	ldr	r2, [pc, #352]	@ (8001c9c <DMA_Init+0x4e4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d018      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a56      	ldr	r2, [pc, #344]	@ (8001ca0 <DMA_Init+0x4e8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a55      	ldr	r2, [pc, #340]	@ (8001ca4 <DMA_Init+0x4ec>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a53      	ldr	r2, [pc, #332]	@ (8001ca8 <DMA_Init+0x4f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a52      	ldr	r2, [pc, #328]	@ (8001cac <DMA_Init+0x4f4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <DMA_Init+0x3ba>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	@ (8001cb0 <DMA_Init+0x4f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <DMA_Init+0x3be>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <DMA_Init+0x3c0>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00d      	beq.n	8001b98 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e008      	b.n	8001b98 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b8e:	d103      	bne.n	8001b98 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b96:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b9e:	4b45      	ldr	r3, [pc, #276]	@ (8001cb4 <DMA_Init+0x4fc>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	68f9      	ldr	r1, [r7, #12]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a36      	ldr	r2, [pc, #216]	@ (8001c94 <DMA_Init+0x4dc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d022      	beq.n	8001c04 <DMA_Init+0x44c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a35      	ldr	r2, [pc, #212]	@ (8001c98 <DMA_Init+0x4e0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d01d      	beq.n	8001c04 <DMA_Init+0x44c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a33      	ldr	r2, [pc, #204]	@ (8001c9c <DMA_Init+0x4e4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d018      	beq.n	8001c04 <DMA_Init+0x44c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <DMA_Init+0x4e8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <DMA_Init+0x44c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a30      	ldr	r2, [pc, #192]	@ (8001ca4 <DMA_Init+0x4ec>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00e      	beq.n	8001c04 <DMA_Init+0x44c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca8 <DMA_Init+0x4f0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d009      	beq.n	8001c04 <DMA_Init+0x44c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001cac <DMA_Init+0x4f4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <DMA_Init+0x44c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb0 <DMA_Init+0x4f8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <DMA_Init+0x450>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <DMA_Init+0x452>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40020050 	.word	0x40020050
 8001c38:	50020050 	.word	0x50020050
 8001c3c:	400200d0 	.word	0x400200d0
 8001c40:	500200d0 	.word	0x500200d0
 8001c44:	40020150 	.word	0x40020150
 8001c48:	50020150 	.word	0x50020150
 8001c4c:	400201d0 	.word	0x400201d0
 8001c50:	500201d0 	.word	0x500201d0
 8001c54:	40020250 	.word	0x40020250
 8001c58:	50020250 	.word	0x50020250
 8001c5c:	400202d0 	.word	0x400202d0
 8001c60:	500202d0 	.word	0x500202d0
 8001c64:	40020350 	.word	0x40020350
 8001c68:	50020350 	.word	0x50020350
 8001c6c:	400203d0 	.word	0x400203d0
 8001c70:	500203d0 	.word	0x500203d0
 8001c74:	40020450 	.word	0x40020450
 8001c78:	50020450 	.word	0x50020450
 8001c7c:	400204d0 	.word	0x400204d0
 8001c80:	500204d0 	.word	0x500204d0
 8001c84:	40020550 	.word	0x40020550
 8001c88:	50020550 	.word	0x50020550
 8001c8c:	400205d0 	.word	0x400205d0
 8001c90:	500205d0 	.word	0x500205d0
 8001c94:	40020650 	.word	0x40020650
 8001c98:	50020650 	.word	0x50020650
 8001c9c:	400206d0 	.word	0x400206d0
 8001ca0:	500206d0 	.word	0x500206d0
 8001ca4:	40020750 	.word	0x40020750
 8001ca8:	50020750 	.word	0x50020750
 8001cac:	400207d0 	.word	0x400207d0
 8001cb0:	500207d0 	.word	0x500207d0
 8001cb4:	3cc03180 	.word	0x3cc03180

08001cb8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cca:	e1ba      	b.n	8002042 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 81aa 	beq.w	800203c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a55      	ldr	r2, [pc, #340]	@ (8001e40 <HAL_GPIO_Init+0x188>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d15d      	bne.n	8001dac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001d20:	4a48      	ldr	r2, [pc, #288]	@ (8001e44 <HAL_GPIO_Init+0x18c>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d28:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_GPIO_Init+0x18c>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d42:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220b      	movs	r2, #11
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69f9      	ldr	r1, [r7, #28]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2202      	movs	r2, #2
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e067      	b.n	8001e7c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x104>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b12      	cmp	r3, #18
 8001dba:	d145      	bne.n	8001e48 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f003 020f 	and.w	r2, r3, #15
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	69f9      	ldr	r1, [r7, #28]
 8001e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e01e      	b.n	8001e7c <HAL_GPIO_Init+0x1c4>
 8001e3e:	bf00      	nop
 8001e40:	46020000 	.word	0x46020000
 8001e44:	080105f0 	.word	0x080105f0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d00b      	beq.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b12      	cmp	r3, #18
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d017      	beq.n	8001f36 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07c      	beq.n	800203c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f42:	4a47      	ldr	r2, [pc, #284]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3318      	adds	r3, #24
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0a9a      	lsrs	r2, r3, #10
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_GPIO_Init+0x3ac>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	00d2      	lsls	r2, r2, #3
 8001f76:	4093      	lsls	r3, r2
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f7e:	4938      	ldr	r1, [pc, #224]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3318      	adds	r3, #24
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f8c:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001fda:	4a21      	ldr	r2, [pc, #132]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8001fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fe6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002006:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800200e:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8002010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002014:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_GPIO_Init+0x3a8>)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f ae3d 	bne.w	8001ccc <HAL_GPIO_Init+0x14>
  }
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	3724      	adds	r7, #36	@ 0x24
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	46022000 	.word	0x46022000
 8002064:	002f7f7f 	.word	0x002f7f7f

08002068 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e007      	b.n	8002096 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 0204 	bic.w	r2, r3, #4
 800208e:	4905      	ldr	r1, [pc, #20]	@ (80020a4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40030400 	.word	0x40030400

080020a8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_ICACHE_Enable+0x1c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_ICACHE_Enable+0x1c>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40030400 	.word	0x40030400

080020c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b08d      	sub	sp, #52	@ 0x34
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f007 fab1 	bl	8009646 <USB_GetMode>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 84b9 	bne.w	8002a5e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f007 fa15 	bl	8009520 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 84af 	beq.w	8002a5c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f007 fa02 	bl	8009520 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f002 0202 	and.w	r2, r2, #2
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f007 f9f0 	bl	8009520 <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b10      	cmp	r3, #16
 8002148:	d161      	bne.n	800220e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	3304      	adds	r3, #4
 8002178:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	0c5b      	lsrs	r3, r3, #17
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	2b02      	cmp	r3, #2
 8002184:	d124      	bne.n	80021d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d035      	beq.n	80021fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800219c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a38      	ldr	r0, [r7, #32]
 80021a6:	f007 f8f5 	bl	8009394 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b6:	441a      	add	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c8:	441a      	add	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	615a      	str	r2, [r3, #20]
 80021ce:	e016      	b.n	80021fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	0c5b      	lsrs	r3, r3, #17
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d110      	bne.n	80021fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021e2:	2208      	movs	r2, #8
 80021e4:	4619      	mov	r1, r3
 80021e6:	6a38      	ldr	r0, [r7, #32]
 80021e8:	f007 f8d4 	bl	8009394 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f8:	441a      	add	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0210 	orr.w	r2, r2, #16
 800220c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f007 f984 	bl	8009520 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800221e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002222:	f040 80a7 	bne.w	8002374 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f007 f989 	bl	8009546 <USB_ReadDevAllOutEpInterrupt>
 8002234:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002236:	e099      	b.n	800236c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 808e 	beq.w	8002360 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f007 f9ad 	bl	80095ae <USB_ReadDevOutEPInterrupt>
 8002254:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	2301      	movs	r3, #1
 8002270:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002272:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fe51 	bl	8002f1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00c      	beq.n	800229e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	2308      	movs	r3, #8
 8002294:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002296:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 ff27 	bl	80030ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022b4:	461a      	mov	r2, r3
 80022b6:	2310      	movs	r3, #16
 80022b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d030      	beq.n	8002326 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022cc:	2b80      	cmp	r3, #128	@ 0x80
 80022ce:	d109      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	78db      	ldrb	r3, [r3, #3]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d108      	bne.n	8002314 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fba8 	bl	8002a64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2302      	movs	r3, #2
 8002324:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	2320      	movs	r3, #32
 8002340:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002358:	461a      	mov	r2, r3
 800235a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800235e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	3301      	adds	r3, #1
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	f47f af62 	bne.w	8002238 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f007 f8d1 	bl	8009520 <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002384:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002388:	f040 80db 	bne.w	8002542 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f007 f8f2 	bl	800957a <USB_ReadDevAllInEpInterrupt>
 8002396:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800239c:	e0cd      	b.n	800253a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80c2 	beq.w	800252e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f007 f918 	bl	80095ea <USB_ReadDevInEPInterrupt>
 80023ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d057      	beq.n	8002476 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	2201      	movs	r2, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69f9      	ldr	r1, [r7, #28]
 80023e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80023e6:	4013      	ands	r3, r2
 80023e8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023f6:	461a      	mov	r2, r3
 80023f8:	2301      	movs	r3, #1
 80023fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	799b      	ldrb	r3, [r3, #6]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d132      	bne.n	800246a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3320      	adds	r3, #32
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	331c      	adds	r3, #28
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4419      	add	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4403      	add	r3, r0
 8002438:	3320      	adds	r3, #32
 800243a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <HAL_PCD_IRQHandler+0x3a2>
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3324      	adds	r3, #36	@ 0x24
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d108      	bne.n	800246a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002462:	461a      	mov	r2, r3
 8002464:	2101      	movs	r1, #1
 8002466:	f007 f91f 	bl	80096a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f00c fde5 	bl	800f040 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800248c:	461a      	mov	r2, r3
 800248e:	2308      	movs	r3, #8
 8002490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024a8:	461a      	mov	r2, r3
 80024aa:	2310      	movs	r3, #16
 80024ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024c4:	461a      	mov	r2, r3
 80024c6:	2340      	movs	r3, #64	@ 0x40
 80024c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d023      	beq.n	800251c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024d6:	6a38      	ldr	r0, [r7, #32]
 80024d8:	f006 faca 	bl	8008a70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	3310      	adds	r3, #16
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	78db      	ldrb	r3, [r3, #3]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d108      	bne.n	800250a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2200      	movs	r2, #0
 80024fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	b2db      	uxtb	r3, r3
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fab9 	bl	8002a7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002516:	461a      	mov	r2, r3
 8002518:	2302      	movs	r3, #2
 800251a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002526:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fc6b 	bl	8002e04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f af2e 	bne.w	800239e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f006 ffea 	bl	8009520 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002556:	d122      	bne.n	800259e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800257e:	2100      	movs	r1, #0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fdf9 	bl	8003178 <HAL_PCDEx_LPM_Callback>
 8002586:	e002      	b.n	800258e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f00c ff09 	bl	800f3a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800259c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f006 ffbc 	bl	8009520 <USB_ReadInterrupts>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025b2:	d112      	bne.n	80025da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f00c fed5 	bl	800f374 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80025d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f006 ff9e 	bl	8009520 <USB_ReadInterrupts>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025ee:	d121      	bne.n	8002634 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80025fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002606:	2b00      	cmp	r3, #0
 8002608:	d111      	bne.n	800262e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	f003 020f 	and.w	r2, r3, #15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002624:	2101      	movs	r1, #1
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fda6 	bl	8003178 <HAL_PCDEx_LPM_Callback>
 800262c:	e002      	b.n	8002634 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f00c fea0 	bl	800f374 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f006 ff71 	bl	8009520 <USB_ReadInterrupts>
 800263e:	4603      	mov	r3, r0
 8002640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002648:	f040 80b7 	bne.w	80027ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2110      	movs	r1, #16
 8002666:	4618      	mov	r0, r3
 8002668:	f006 fa02 	bl	8008a70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002670:	e046      	b.n	8002700 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800267e:	461a      	mov	r2, r3
 8002680:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002684:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	440a      	add	r2, r1
 800269c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80026a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b2:	461a      	mov	r2, r3
 80026b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ca:	0151      	lsls	r1, r2, #5
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	440a      	add	r2, r1
 80026d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ea:	0151      	lsls	r1, r2, #5
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	440a      	add	r2, r1
 80026f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80026f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fc:	3301      	adds	r3, #1
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	461a      	mov	r2, r3
 8002706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002708:	4293      	cmp	r3, r2
 800270a:	d3b2      	bcc.n	8002672 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800271a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800271e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7bdb      	ldrb	r3, [r3, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d016      	beq.n	8002756 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800272e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002738:	f043 030b 	orr.w	r3, r3, #11
 800273c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800274e:	f043 030b 	orr.w	r3, r3, #11
 8002752:	6453      	str	r3, [r2, #68]	@ 0x44
 8002754:	e015      	b.n	8002782 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002764:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002768:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800276c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800277c:	f043 030b 	orr.w	r3, r3, #11
 8002780:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002790:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002794:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027a4:	461a      	mov	r2, r3
 80027a6:	f006 ff7f 	bl	80096a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80027b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f006 feae 	bl	8009520 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ce:	d123      	bne.n	8002818 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f006 ff44 	bl	8009662 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f006 f9a6 	bl	8008b30 <USB_GetDevSpeed>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681c      	ldr	r4, [r3, #0]
 80027f0:	f001 ff9a 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 80027f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	4620      	mov	r0, r4
 80027fe:	f006 f895 	bl	800892c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f00c fd52 	bl	800f2ac <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f006 fe7f 	bl	8009520 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b08      	cmp	r3, #8
 800282a:	d10a      	bne.n	8002842 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f00c fdcd 	bl	800f3cc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f002 0208 	and.w	r2, r2, #8
 8002840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f006 fe6a 	bl	8009520 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002852:	2b80      	cmp	r3, #128	@ 0x80
 8002854:	d123      	bne.n	800289e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002862:	2301      	movs	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
 8002866:	e014      	b.n	8002892 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa5e 	bl	8002d48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	3301      	adds	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	791b      	ldrb	r3, [r3, #4]
 8002896:	461a      	mov	r2, r3
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	4293      	cmp	r3, r2
 800289c:	d3e4      	bcc.n	8002868 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 fe3c 	bl	8009520 <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028b2:	d13c      	bne.n	800292e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028b4:	2301      	movs	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b8:	e02b      	b.n	8002912 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3318      	adds	r3, #24
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d115      	bne.n	800290c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da12      	bge.n	800290c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	3317      	adds	r3, #23
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa1e 	bl	8002d48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	3301      	adds	r3, #1
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	791b      	ldrb	r3, [r3, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	4293      	cmp	r3, r2
 800291c:	d3cd      	bcc.n	80028ba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800292c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f006 fdf4 	bl	8009520 <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002942:	d156      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002944:	2301      	movs	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
 8002948:	e045      	b.n	80029d6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d12e      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002972:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	da2b      	bge.n	80029d0 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	0c1a      	lsrs	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002982:	4053      	eors	r3, r2
 8002984:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002988:	2b00      	cmp	r3, #0
 800298a:	d121      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029cc:	6053      	str	r3, [r2, #4]
            break;
 80029ce:	e008      	b.n	80029e2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	3301      	adds	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	791b      	ldrb	r3, [r3, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	4293      	cmp	r3, r2
 80029e0:	d3b3      	bcc.n	800294a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80029f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f006 fd92 	bl	8009520 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a06:	d10a      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f00c fc7f 	bl	800f30c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f006 fd7c 	bl	8009520 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d115      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f00c fc77 	bl	800f338 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	e000      	b.n	8002a5e <HAL_PCD_IRQHandler+0x996>
      return;
 8002a5c:	bf00      	nop
    }
  }
}
 8002a5e:	3734      	adds	r7, #52	@ 0x34
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	70fb      	strb	r3, [r7, #3]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	803b      	strh	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da0f      	bge.n	8002ada <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	3310      	adds	r3, #16
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	705a      	strb	r2, [r3, #1]
 8002ad8:	e00f      	b.n	8002afa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b06:	883b      	ldrh	r3, [r7, #0]
 8002b08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	78ba      	ldrb	r2, [r7, #2]
 8002b14:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b28:	78bb      	ldrb	r3, [r7, #2]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d102      	bne.n	8002b34 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_EP_Open+0xae>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e00e      	b.n	8002b60 <HAL_PCD_EP_Open+0xcc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f006 f812 	bl	8008b7a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3304      	adds	r3, #4
 8002b90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	799b      	ldrb	r3, [r3, #6]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	799b      	ldrb	r3, [r3, #6]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	f006 f85a 	bl	8008c88 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 020f 	and.w	r2, r3, #15
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002c00:	681b      	ldr	r3, [r3, #0]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	3310      	adds	r3, #16
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	3304      	adds	r3, #4
 8002c34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	799b      	ldrb	r3, [r3, #6]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d102      	bne.n	8002c68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	799b      	ldrb	r3, [r3, #6]
 8002c70:	461a      	mov	r2, r3
 8002c72:	6979      	ldr	r1, [r7, #20]
 8002c74:	f006 f808 	bl	8008c88 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	7912      	ldrb	r2, [r2, #4]
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04f      	b.n	8002d40 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da0f      	bge.n	8002cc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00d      	b.n	8002ce4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	3304      	adds	r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_PCD_EP_SetStall+0x82>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e01d      	b.n	8002d40 <HAL_PCD_EP_SetStall+0xbe>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f006 fb96 	bl	8009444 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7999      	ldrb	r1, [r3, #6]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d30:	461a      	mov	r2, r3
 8002d32:	f006 fcb9 	bl	80096a8 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da0c      	bge.n	8002d76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 020f 	and.w	r2, r3, #15
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	3310      	adds	r3, #16
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e00c      	b.n	8002d90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f006 fa14 	bl	80091c4 <USB_EPStopXfer>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002da0:	7afb      	ldrb	r3, [r7, #11]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_PCD_EP_Flush+0x1a>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e01b      	b.n	8002dfc <HAL_PCD_EP_Flush+0x52>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8002dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da09      	bge.n	8002de8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f005 fe45 	bl	8008a70 <USB_FlushTxFifo>
 8002de6:	e004      	b.n	8002df2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 fe71 	bl	8008ad4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3310      	adds	r3, #16
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d901      	bls.n	8002e3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e06b      	b.n	8002f14 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d902      	bls.n	8002e58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3303      	adds	r3, #3
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e60:	e02a      	b.n	8002eb8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d902      	bls.n	8002e7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3303      	adds	r3, #3
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4603      	mov	r3, r0
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f006 fa3c 	bl	8009318 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d809      	bhi.n	8002ee2 <PCD_WriteEmptyTxFifo+0xde>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d203      	bcs.n	8002ee2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1bf      	bne.n	8002e62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d811      	bhi.n	8002f12 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	6939      	ldr	r1, [r7, #16]
 8002f0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f0e:	4013      	ands	r3, r2
 8002f10:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	333c      	adds	r3, #60	@ 0x3c
 8002f34:	3304      	adds	r3, #4
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	799b      	ldrb	r3, [r3, #6]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d17b      	bne.n	800304a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d015      	beq.n	8002f88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4a61      	ldr	r2, [pc, #388]	@ (80030e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	f240 80b9 	bls.w	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80b3 	beq.w	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f84:	6093      	str	r3, [r2, #8]
 8002f86:	e0a7      	b.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	6093      	str	r3, [r2, #8]
 8002fa4:	e098      	b.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 8093 	bne.w	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80030e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d90f      	bls.n	8002fda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fd6:	6093      	str	r3, [r2, #8]
 8002fd8:	e07e      	b.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	0159      	lsls	r1, r3, #5
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003006:	1ad2      	subs	r2, r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d114      	bne.n	800303c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003024:	461a      	mov	r2, r3
 8003026:	2101      	movs	r1, #1
 8003028:	f006 fb3e 	bl	80096a8 <USB_EP0_OutStart>
 800302c:	e006      	b.n	800303c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	441a      	add	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f00c f8b2 	bl	800f1ac <HAL_PCD_DataOutStageCallback>
 8003048:	e046      	b.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	4a26      	ldr	r2, [pc, #152]	@ (80030e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d124      	bne.n	800309c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003068:	461a      	mov	r2, r3
 800306a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	e032      	b.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003088:	461a      	mov	r2, r3
 800308a:	2320      	movs	r3, #32
 800308c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f00c f889 	bl	800f1ac <HAL_PCD_DataOutStageCallback>
 800309a:	e01d      	b.n	80030d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d114      	bne.n	80030cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030c4:	461a      	mov	r2, r3
 80030c6:	2100      	movs	r1, #0
 80030c8:	f006 faee 	bl	80096a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4619      	mov	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f00c f86a 	bl	800f1ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	4f54300a 	.word	0x4f54300a
 80030e8:	4f54310a 	.word	0x4f54310a

080030ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	333c      	adds	r3, #60	@ 0x3c
 8003104:	3304      	adds	r3, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a15      	ldr	r2, [pc, #84]	@ (8003174 <PCD_EP_OutSetupPacket_int+0x88>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d90e      	bls.n	8003140 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800313e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f00b ff03 	bl	800ef4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <PCD_EP_OutSetupPacket_int+0x88>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d90c      	bls.n	8003168 <PCD_EP_OutSetupPacket_int+0x7c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	799b      	ldrb	r3, [r3, #6]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003160:	461a      	mov	r2, r3
 8003162:	2101      	movs	r1, #1
 8003164:	f006 faa0 	bl	80096a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	4f54300a 	.word	0x4f54300a

08003178 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003198:	4b39      	ldr	r3, [pc, #228]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d10b      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d905      	bls.n	80031be <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80031b2:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031bc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e057      	b.n	8003272 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c8:	d90a      	bls.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80031ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031dc:	60d3      	str	r3, [r2, #12]
 80031de:	e007      	b.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80031e0:	4b27      	ldr	r3, [pc, #156]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80031e8:	4925      	ldr	r1, [pc, #148]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80031f0:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a24      	ldr	r2, [pc, #144]	@ (8003288 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	2232      	movs	r2, #50	@ 0x32
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	4a21      	ldr	r2, [pc, #132]	@ (8003288 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	3301      	adds	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800320e:	e002      	b.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003216:	4b1a      	ldr	r3, [pc, #104]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f3      	bne.n	8003210 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01b      	beq.n	8003266 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	2232      	movs	r2, #50	@ 0x32
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	4a11      	ldr	r2, [pc, #68]	@ (8003288 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	099b      	lsrs	r3, r3, #6
 8003248:	3301      	adds	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800324c:	e002      	b.n	8003254 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3b01      	subs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003254:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f3      	bne.n	800324e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e000      	b.n	8003272 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	46020800 	.word	0x46020800
 8003284:	20000000 	.word	0x20000000
 8003288:	10624dd3 	.word	0x10624dd3

0800328c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003290:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	46020800 	.word	0x46020800

080032a8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80032b0:	4b22      	ldr	r3, [pc, #136]	@ (800333c <HAL_PWREx_ConfigSupply+0x94>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <HAL_PWREx_ConfigSupply+0x98>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2232      	movs	r2, #50	@ 0x32
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003340 <HAL_PWREx_ConfigSupply+0x98>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d113      	bne.n	80032fc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_PWREx_ConfigSupply+0x9c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003344 <HAL_PWREx_ConfigSupply+0x9c>)
 80032da:	f023 0302 	bic.w	r3, r3, #2
 80032de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80032e0:	e002      	b.n	80032e8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80032e8:	4b16      	ldr	r3, [pc, #88]	@ (8003344 <HAL_PWREx_ConfigSupply+0x9c>)
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d116      	bne.n	8003322 <HAL_PWREx_ConfigSupply+0x7a>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f3      	bne.n	80032e2 <HAL_PWREx_ConfigSupply+0x3a>
 80032fa:	e012      	b.n	8003322 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_PWREx_ConfigSupply+0x9c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a10      	ldr	r2, [pc, #64]	@ (8003344 <HAL_PWREx_ConfigSupply+0x9c>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003308:	e002      	b.n	8003310 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b01      	subs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003310:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <HAL_PWREx_ConfigSupply+0x9c>)
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <HAL_PWREx_ConfigSupply+0x7a>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f3      	bne.n	800330a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e000      	b.n	800332e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000
 8003340:	10624dd3 	.word	0x10624dd3
 8003344:	46020800 	.word	0x46020800

08003348 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <HAL_PWREx_EnableVddUSB+0x1c>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003356:	6113      	str	r3, [r2, #16]
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	46020800 	.word	0x46020800

08003368 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	46020800 	.word	0x46020800

08003388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08e      	sub	sp, #56	@ 0x38
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f000 bec8 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a2:	4b99      	ldr	r3, [pc, #612]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ac:	4b96      	ldr	r3, [pc, #600]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 816c 	beq.w	800369c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_RCC_OscConfig+0x52>
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	f040 80de 	bne.w	800358e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 80da 	bne.w	800358e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f000 bea5 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ec:	4b86      	ldr	r3, [pc, #536]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_RCC_OscConfig+0x7a>
 80033f8:	4b83      	ldr	r3, [pc, #524]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003400:	e005      	b.n	800340e <HAL_RCC_OscConfig+0x86>
 8003402:	4b81      	ldr	r3, [pc, #516]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800340e:	4293      	cmp	r3, r2
 8003410:	d255      	bcs.n	80034be <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fa11 	bl	8004844 <RCC_SetFlashLatencyFromMSIRange>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f000 be82 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800342e:	4b76      	ldr	r3, [pc, #472]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4a75      	ldr	r2, [pc, #468]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003434:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003438:	6093      	str	r3, [r2, #8]
 800343a:	4b73      	ldr	r3, [pc, #460]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	4970      	ldr	r1, [pc, #448]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003454:	d309      	bcc.n	800346a <HAL_RCC_OscConfig+0xe2>
 8003456:	4b6c      	ldr	r3, [pc, #432]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f023 021f 	bic.w	r2, r3, #31
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4969      	ldr	r1, [pc, #420]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003464:	4313      	orrs	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
 8003468:	e07e      	b.n	8003568 <HAL_RCC_OscConfig+0x1e0>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	2b00      	cmp	r3, #0
 8003470:	da0a      	bge.n	8003488 <HAL_RCC_OscConfig+0x100>
 8003472:	4b65      	ldr	r3, [pc, #404]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	015b      	lsls	r3, r3, #5
 8003480:	4961      	ldr	r1, [pc, #388]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003482:	4313      	orrs	r3, r2
 8003484:	60cb      	str	r3, [r1, #12]
 8003486:	e06f      	b.n	8003568 <HAL_RCC_OscConfig+0x1e0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003490:	d30a      	bcc.n	80034a8 <HAL_RCC_OscConfig+0x120>
 8003492:	4b5d      	ldr	r3, [pc, #372]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	4959      	ldr	r1, [pc, #356]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60cb      	str	r3, [r1, #12]
 80034a6:	e05f      	b.n	8003568 <HAL_RCC_OscConfig+0x1e0>
 80034a8:	4b57      	ldr	r3, [pc, #348]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	03db      	lsls	r3, r3, #15
 80034b6:	4954      	ldr	r1, [pc, #336]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60cb      	str	r3, [r1, #12]
 80034bc:	e054      	b.n	8003568 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80034be:	4b52      	ldr	r3, [pc, #328]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4a51      	ldr	r2, [pc, #324]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034c8:	6093      	str	r3, [r2, #8]
 80034ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	494c      	ldr	r1, [pc, #304]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80034e4:	d309      	bcc.n	80034fa <HAL_RCC_OscConfig+0x172>
 80034e6:	4b48      	ldr	r3, [pc, #288]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f023 021f 	bic.w	r2, r3, #31
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4945      	ldr	r1, [pc, #276]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60cb      	str	r3, [r1, #12]
 80034f8:	e028      	b.n	800354c <HAL_RCC_OscConfig+0x1c4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da0a      	bge.n	8003518 <HAL_RCC_OscConfig+0x190>
 8003502:	4b41      	ldr	r3, [pc, #260]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	015b      	lsls	r3, r3, #5
 8003510:	493d      	ldr	r1, [pc, #244]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003512:	4313      	orrs	r3, r2
 8003514:	60cb      	str	r3, [r1, #12]
 8003516:	e019      	b.n	800354c <HAL_RCC_OscConfig+0x1c4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003520:	d30a      	bcc.n	8003538 <HAL_RCC_OscConfig+0x1b0>
 8003522:	4b39      	ldr	r3, [pc, #228]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	029b      	lsls	r3, r3, #10
 8003530:	4935      	ldr	r1, [pc, #212]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003532:	4313      	orrs	r3, r2
 8003534:	60cb      	str	r3, [r1, #12]
 8003536:	e009      	b.n	800354c <HAL_RCC_OscConfig+0x1c4>
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	03db      	lsls	r3, r3, #15
 8003546:	4930      	ldr	r1, [pc, #192]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f974 	bl	8004844 <RCC_SetFlashLatencyFromMSIRange>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f000 bde5 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003568:	f001 f8de 	bl	8004728 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <HAL_RCC_OscConfig+0x284>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fb9f 	bl	8000cb4 <HAL_InitTick>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800357c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 808a 	beq.w	800369a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800358a:	f000 bdd2 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d066      	beq.n	8003664 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003596:	4b1c      	ldr	r3, [pc, #112]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035a2:	f7fd fcd7 	bl	8000f54 <HAL_GetTick>
 80035a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80035a8:	e009      	b.n	80035be <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035aa:	f7fd fcd3 	bl	8000f54 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d902      	bls.n	80035be <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	f000 bdba 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80035be:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ef      	beq.n	80035aa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035d4:	6093      	str	r3, [r2, #8]
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	4909      	ldr	r1, [pc, #36]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80035f0:	d30e      	bcc.n	8003610 <HAL_RCC_OscConfig+0x288>
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f023 021f 	bic.w	r2, r3, #31
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	4902      	ldr	r1, [pc, #8]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
 8003604:	e04a      	b.n	800369c <HAL_RCC_OscConfig+0x314>
 8003606:	bf00      	nop
 8003608:	46020c00 	.word	0x46020c00
 800360c:	20000004 	.word	0x20000004
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	da0a      	bge.n	800362e <HAL_RCC_OscConfig+0x2a6>
 8003618:	4b98      	ldr	r3, [pc, #608]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	015b      	lsls	r3, r3, #5
 8003626:	4995      	ldr	r1, [pc, #596]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
 800362c:	e036      	b.n	800369c <HAL_RCC_OscConfig+0x314>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003636:	d30a      	bcc.n	800364e <HAL_RCC_OscConfig+0x2c6>
 8003638:	4b90      	ldr	r3, [pc, #576]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	498d      	ldr	r1, [pc, #564]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	60cb      	str	r3, [r1, #12]
 800364c:	e026      	b.n	800369c <HAL_RCC_OscConfig+0x314>
 800364e:	4b8b      	ldr	r3, [pc, #556]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	03db      	lsls	r3, r3, #15
 800365c:	4987      	ldr	r1, [pc, #540]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	60cb      	str	r3, [r1, #12]
 8003662:	e01b      	b.n	800369c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003664:	4b85      	ldr	r3, [pc, #532]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a84      	ldr	r2, [pc, #528]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003670:	f7fd fc70 	bl	8000f54 <HAL_GetTick>
 8003674:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003676:	e009      	b.n	800368c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003678:	f7fd fc6c 	bl	8000f54 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	f000 bd53 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800368c:	4b7b      	ldr	r3, [pc, #492]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ef      	bne.n	8003678 <HAL_RCC_OscConfig+0x2f0>
 8003698:	e000      	b.n	800369c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800369a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 808b 	beq.w	80037c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_OscConfig+0x334>
 80036b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d17d      	bne.n	80037c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f000 bd34 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x35a>
 80036d4:	4b69      	ldr	r3, [pc, #420]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a68      	ldr	r2, [pc, #416]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	e041      	b.n	8003766 <HAL_RCC_OscConfig+0x3de>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ea:	d112      	bne.n	8003712 <HAL_RCC_OscConfig+0x38a>
 80036ec:	4b63      	ldr	r3, [pc, #396]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a62      	ldr	r2, [pc, #392]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80036f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b60      	ldr	r3, [pc, #384]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5f      	ldr	r2, [pc, #380]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80036fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b5d      	ldr	r3, [pc, #372]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5c      	ldr	r2, [pc, #368]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e029      	b.n	8003766 <HAL_RCC_OscConfig+0x3de>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800371a:	d112      	bne.n	8003742 <HAL_RCC_OscConfig+0x3ba>
 800371c:	4b57      	ldr	r3, [pc, #348]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a56      	ldr	r2, [pc, #344]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003722:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b54      	ldr	r3, [pc, #336]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a53      	ldr	r2, [pc, #332]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800372e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b51      	ldr	r3, [pc, #324]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a50      	ldr	r2, [pc, #320]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e011      	b.n	8003766 <HAL_RCC_OscConfig+0x3de>
 8003742:	4b4e      	ldr	r3, [pc, #312]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4d      	ldr	r2, [pc, #308]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b4b      	ldr	r3, [pc, #300]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a4a      	ldr	r2, [pc, #296]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b48      	ldr	r3, [pc, #288]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a47      	ldr	r2, [pc, #284]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003760:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003764:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d014      	beq.n	8003798 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800376e:	f7fd fbf1 	bl	8000f54 <HAL_GetTick>
 8003772:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003774:	e009      	b.n	800378a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003776:	f7fd fbed 	bl	8000f54 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	@ 0x64
 8003782:	d902      	bls.n	800378a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	f000 bcd4 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800378a:	4b3c      	ldr	r3, [pc, #240]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ef      	beq.n	8003776 <HAL_RCC_OscConfig+0x3ee>
 8003796:	e013      	b.n	80037c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003798:	f7fd fbdc 	bl	8000f54 <HAL_GetTick>
 800379c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379e:	e009      	b.n	80037b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fd fbd8 	bl	8000f54 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	@ 0x64
 80037ac:	d902      	bls.n	80037b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	f000 bcbf 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037b4:	4b31      	ldr	r3, [pc, #196]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1ef      	bne.n	80037a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05f      	beq.n	800388c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d005      	beq.n	80037de <HAL_RCC_OscConfig+0x456>
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	d114      	bne.n	8003802 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d111      	bne.n	8003802 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f000 bca3 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	4920      	ldr	r1, [pc, #128]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003800:	e044      	b.n	800388c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d024      	beq.n	8003854 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800380a:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003814:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003816:	f7fd fb9d 	bl	8000f54 <HAL_GetTick>
 800381a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381c:	e009      	b.n	8003832 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381e:	f7fd fb99 	bl	8000f54 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d902      	bls.n	8003832 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	f000 bc80 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003832:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ef      	beq.n	800381e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800383e:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	490b      	ldr	r1, [pc, #44]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	610b      	str	r3, [r1, #16]
 8003852:	e01b      	b.n	800388c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003854:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a08      	ldr	r2, [pc, #32]	@ (800387c <HAL_RCC_OscConfig+0x4f4>)
 800385a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800385e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003860:	f7fd fb78 	bl	8000f54 <HAL_GetTick>
 8003864:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003868:	f7fd fb74 	bl	8000f54 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d904      	bls.n	8003880 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	f000 bc5b 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
 800387c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003880:	4baf      	ldr	r3, [pc, #700]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1ed      	bne.n	8003868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80c8 	beq.w	8003a2a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a0:	4ba7      	ldr	r3, [pc, #668]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d111      	bne.n	80038d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4ba4      	ldr	r3, [pc, #656]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80038b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b4:	4aa2      	ldr	r2, [pc, #648]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80038be:	4ba0      	ldr	r3, [pc, #640]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80038d2:	4b9c      	ldr	r3, [pc, #624]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d119      	bne.n	8003912 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80038de:	4b99      	ldr	r3, [pc, #612]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	4a98      	ldr	r2, [pc, #608]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7fd fb33 	bl	8000f54 <HAL_GetTick>
 80038ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80038f0:	e009      	b.n	8003906 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f2:	f7fd fb2f 	bl	8000f54 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d902      	bls.n	8003906 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	f000 bc16 	b.w	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003906:	4b8f      	ldr	r3, [pc, #572]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 8003908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ef      	beq.n	80038f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d05f      	beq.n	80039da <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800391a:	4b89      	ldr	r3, [pc, #548]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 800391c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003920:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392c:	429a      	cmp	r2, r3
 800392e:	d037      	beq.n	80039a0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e3f4      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01b      	beq.n	800398a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003952:	4b7b      	ldr	r3, [pc, #492]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003958:	4a79      	ldr	r2, [pc, #484]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 800395a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800395e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003962:	f7fd faf7 	bl	8000f54 <HAL_GetTick>
 8003966:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396a:	f7fd faf3 	bl	8000f54 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b05      	cmp	r3, #5
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e3da      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800397c:	4b70      	ldr	r3, [pc, #448]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 800397e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003982:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ef      	bne.n	800396a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800398a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 800398c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003990:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	4969      	ldr	r1, [pc, #420]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80039a0:	4b67      	ldr	r3, [pc, #412]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80039a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039a6:	4a66      	ldr	r2, [pc, #408]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80039a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80039b0:	f7fd fad0 	bl	8000f54 <HAL_GetTick>
 80039b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b8:	f7fd facc 	bl	8000f54 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e3b3      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80039ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80039cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ef      	beq.n	80039b8 <HAL_RCC_OscConfig+0x630>
 80039d8:	e01b      	b.n	8003a12 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80039da:	4b59      	ldr	r3, [pc, #356]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80039dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039e0:	4a57      	ldr	r2, [pc, #348]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 80039e2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80039e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80039ea:	f7fd fab3 	bl	8000f54 <HAL_GetTick>
 80039ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fd faaf 	bl	8000f54 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e396      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a04:	4b4e      	ldr	r3, [pc, #312]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ef      	bne.n	80039f2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a12:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b49      	ldr	r3, [pc, #292]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a20:	4a47      	ldr	r2, [pc, #284]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8111 	beq.w	8003c5a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b40      	ldr	r3, [pc, #256]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a52:	4a3b      	ldr	r2, [pc, #236]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003a5c:	4b38      	ldr	r3, [pc, #224]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a70:	4b34      	ldr	r3, [pc, #208]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d118      	bne.n	8003aae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003a7c:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	4a30      	ldr	r2, [pc, #192]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a88:	f7fd fa64 	bl	8000f54 <HAL_GetTick>
 8003a8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a90:	f7fd fa60 	bl	8000f54 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e347      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003aa2:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <HAL_RCC_OscConfig+0x7bc>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01f      	beq.n	8003afa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d010      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003acc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003adc:	4a18      	ldr	r2, [pc, #96]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ae6:	e018      	b.n	8003b1a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ae8:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aee:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003af8:	e00f      	b.n	8003b1a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003afa:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b00:	4a0f      	ldr	r2, [pc, #60]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b10:	4a0b      	ldr	r2, [pc, #44]	@ (8003b40 <HAL_RCC_OscConfig+0x7b8>)
 8003b12:	f023 0304 	bic.w	r3, r3, #4
 8003b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d057      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003b22:	f7fd fa17 	bl	8000f54 <HAL_GetTick>
 8003b26:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b28:	e00e      	b.n	8003b48 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fd fa13 	bl	8000f54 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d905      	bls.n	8003b48 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e2f8      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
 8003b40:	46020c00 	.word	0x46020c00
 8003b44:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b48:	4b9c      	ldr	r3, [pc, #624]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0e9      	beq.n	8003b2a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01b      	beq.n	8003b9a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b62:	4b96      	ldr	r3, [pc, #600]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b68:	4a94      	ldr	r2, [pc, #592]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fd f9ee 	bl	8000f54 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e2d3      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b8a:	4b8c      	ldr	r3, [pc, #560]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ed      	beq.n	8003b74 <HAL_RCC_OscConfig+0x7ec>
 8003b98:	e053      	b.n	8003c42 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b9a:	4b88      	ldr	r3, [pc, #544]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ba0:	4a86      	ldr	r2, [pc, #536]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fd f9d2 	bl	8000f54 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e2b7      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bc2:	4b7e      	ldr	r3, [pc, #504]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ed      	bne.n	8003bac <HAL_RCC_OscConfig+0x824>
 8003bd0:	e037      	b.n	8003c42 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003bd2:	f7fd f9bf 	bl	8000f54 <HAL_GetTick>
 8003bd6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f9bb 	bl	8000f54 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e2a0      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bf0:	4b72      	ldr	r3, [pc, #456]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ed      	bne.n	8003bda <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01a      	beq.n	8003c42 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c0c:	4b6b      	ldr	r3, [pc, #428]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c12:	4a6a      	ldr	r2, [pc, #424]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fd f999 	bl	8000f54 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e27e      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c34:	4b61      	ldr	r3, [pc, #388]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1ed      	bne.n	8003c1e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c42:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c50:	4a5a      	ldr	r2, [pc, #360]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c52:	f023 0304 	bic.w	r3, r3, #4
 8003c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d036      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003c6e:	4b53      	ldr	r3, [pc, #332]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a52      	ldr	r2, [pc, #328]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c78:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c7a:	f7fd f96b 	bl	8000f54 <HAL_GetTick>
 8003c7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c82:	f7fd f967 	bl	8000f54 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e24e      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c94:	4b49      	ldr	r3, [pc, #292]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x8fa>
 8003ca0:	e018      	b.n	8003cd4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003ca2:	4b46      	ldr	r3, [pc, #280]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a45      	ldr	r2, [pc, #276]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003ca8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003cae:	f7fd f951 	bl	8000f54 <HAL_GetTick>
 8003cb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb6:	f7fd f94d 	bl	8000f54 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e234      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d036      	beq.n	8003d4e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d019      	beq.n	8003d1c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003ce8:	4b34      	ldr	r3, [pc, #208]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a33      	ldr	r2, [pc, #204]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003cf4:	f7fd f92e 	bl	8000f54 <HAL_GetTick>
 8003cf8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003cfc:	f7fd f92a 	bl	8000f54 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e211      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x974>
 8003d1a:	e018      	b.n	8003d4e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003d1c:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a26      	ldr	r2, [pc, #152]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d28:	f7fd f914 	bl	8000f54 <HAL_GetTick>
 8003d2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003d30:	f7fd f910 	bl	8000f54 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1f7      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d07f      	beq.n	8003e5a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d062      	beq.n	8003e28 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003d62:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4a15      	ldr	r2, [pc, #84]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d6c:	6093      	str	r3, [r2, #8]
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7a:	4910      	ldr	r1, [pc, #64]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003d88:	d309      	bcc.n	8003d9e <HAL_RCC_OscConfig+0xa16>
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f023 021f 	bic.w	r2, r3, #31
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4909      	ldr	r1, [pc, #36]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60cb      	str	r3, [r1, #12]
 8003d9c:	e02a      	b.n	8003df4 <HAL_RCC_OscConfig+0xa6c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da0c      	bge.n	8003dc0 <HAL_RCC_OscConfig+0xa38>
 8003da6:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	015b      	lsls	r3, r3, #5
 8003db4:	4901      	ldr	r1, [pc, #4]	@ (8003dbc <HAL_RCC_OscConfig+0xa34>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60cb      	str	r3, [r1, #12]
 8003dba:	e01b      	b.n	8003df4 <HAL_RCC_OscConfig+0xa6c>
 8003dbc:	46020c00 	.word	0x46020c00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc8:	d30a      	bcc.n	8003de0 <HAL_RCC_OscConfig+0xa58>
 8003dca:	4ba1      	ldr	r3, [pc, #644]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	029b      	lsls	r3, r3, #10
 8003dd8:	499d      	ldr	r1, [pc, #628]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60cb      	str	r3, [r1, #12]
 8003dde:	e009      	b.n	8003df4 <HAL_RCC_OscConfig+0xa6c>
 8003de0:	4b9b      	ldr	r3, [pc, #620]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	03db      	lsls	r3, r3, #15
 8003dee:	4998      	ldr	r1, [pc, #608]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003df4:	4b96      	ldr	r3, [pc, #600]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a95      	ldr	r2, [pc, #596]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003dfa:	f043 0310 	orr.w	r3, r3, #16
 8003dfe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e00:	f7fd f8a8 	bl	8000f54 <HAL_GetTick>
 8003e04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003e08:	f7fd f8a4 	bl	8000f54 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e18b      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0xa80>
 8003e26:	e018      	b.n	8003e5a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003e28:	4b89      	ldr	r3, [pc, #548]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a88      	ldr	r2, [pc, #544]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003e2e:	f023 0310 	bic.w	r3, r3, #16
 8003e32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e34:	f7fd f88e 	bl	8000f54 <HAL_GetTick>
 8003e38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003e3c:	f7fd f88a 	bl	8000f54 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e171      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003e4e:	4b80      	ldr	r3, [pc, #512]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8166 	beq.w	8004130 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6a:	4b79      	ldr	r3, [pc, #484]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	f000 80f2 	beq.w	800405c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	f040 80c5 	bne.w	800400c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b73      	ldr	r3, [pc, #460]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a72      	ldr	r2, [pc, #456]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003e88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e8e:	f7fd f861 	bl	8000f54 <HAL_GetTick>
 8003e92:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fd f85d 	bl	8000f54 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e144      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ea8:	4b69      	ldr	r3, [pc, #420]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb4:	4b66      	ldr	r3, [pc, #408]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d111      	bne.n	8003ee6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec8:	4a61      	ldr	r2, [pc, #388]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8004054 <HAL_RCC_OscConfig+0xccc>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ef2:	d102      	bne.n	8003efa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003efa:	4b56      	ldr	r3, [pc, #344]	@ (8004054 <HAL_RCC_OscConfig+0xccc>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a55      	ldr	r2, [pc, #340]	@ (8004054 <HAL_RCC_OscConfig+0xccc>)
 8003f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f04:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003f06:	4b52      	ldr	r3, [pc, #328]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f1a:	3a01      	subs	r2, #1
 8003f1c:	0212      	lsls	r2, r2, #8
 8003f1e:	4311      	orrs	r1, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f24:	430a      	orrs	r2, r1
 8003f26:	494a      	ldr	r1, [pc, #296]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f2c:	4b48      	ldr	r3, [pc, #288]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f30:	4b49      	ldr	r3, [pc, #292]	@ (8004058 <HAL_RCC_OscConfig+0xcd0>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f38:	3a01      	subs	r2, #1
 8003f3a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f42:	3a01      	subs	r2, #1
 8003f44:	0252      	lsls	r2, r2, #9
 8003f46:	b292      	uxth	r2, r2
 8003f48:	4311      	orrs	r1, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f4e:	3a01      	subs	r2, #1
 8003f50:	0412      	lsls	r2, r2, #16
 8003f52:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	0612      	lsls	r2, r2, #24
 8003f60:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003f64:	430a      	orrs	r2, r1
 8003f66:	493a      	ldr	r1, [pc, #232]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003f6c:	4b38      	ldr	r3, [pc, #224]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	4a37      	ldr	r2, [pc, #220]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003f82:	4b33      	ldr	r3, [pc, #204]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	4a32      	ldr	r2, [pc, #200]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f88:	f043 0310 	orr.w	r3, r3, #16
 8003f8c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003f8e:	4b30      	ldr	r3, [pc, #192]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	f023 020c 	bic.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	492d      	ldr	r1, [pc, #180]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003fa0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d105      	bne.n	8003fb4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8004054 <HAL_RCC_OscConfig+0xccc>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a29      	ldr	r2, [pc, #164]	@ (8004054 <HAL_RCC_OscConfig+0xccc>)
 8003fae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003fb4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003fbc:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc2:	4a23      	ldr	r2, [pc, #140]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003fcc:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fd8:	f7fc ffbc 	bl	8000f54 <HAL_GetTick>
 8003fdc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fc ffb8 	bl	8000f54 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e09f      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003ff2:	4b17      	ldr	r3, [pc, #92]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ffe:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004008:	6293      	str	r3, [r2, #40]	@ 0x28
 800400a:	e091      	b.n	8004130 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0f      	ldr	r2, [pc, #60]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004018:	f7fc ff9c 	bl	8000f54 <HAL_GetTick>
 800401c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fc ff98 	bl	8000f54 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e07f      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004032:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800403e:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8004040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004042:	4a03      	ldr	r2, [pc, #12]	@ (8004050 <HAL_RCC_OscConfig+0xcc8>)
 8004044:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004048:	f023 0303 	bic.w	r3, r3, #3
 800404c:	6293      	str	r3, [r2, #40]	@ 0x28
 800404e:	e06f      	b.n	8004130 <HAL_RCC_OscConfig+0xda8>
 8004050:	46020c00 	.word	0x46020c00
 8004054:	46020800 	.word	0x46020800
 8004058:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800405c:	4b37      	ldr	r3, [pc, #220]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004062:	4b36      	ldr	r3, [pc, #216]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	2b01      	cmp	r3, #1
 800406e:	d039      	beq.n	80040e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0203 	and.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d132      	bne.n	80040e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d129      	bne.n	80040e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d122      	bne.n	80040e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d11a      	bne.n	80040e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	0a5b      	lsrs	r3, r3, #9
 80040b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d111      	bne.n	80040e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040cc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d108      	bne.n	80040e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e024      	b.n	8004132 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80040e8:	4b14      	ldr	r3, [pc, #80]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	08db      	lsrs	r3, r3, #3
 80040ee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d01a      	beq.n	8004130 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80040fa:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	4a0f      	ldr	r2, [pc, #60]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 8004100:	f023 0310 	bic.w	r3, r3, #16
 8004104:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fc ff25 	bl	8000f54 <HAL_GetTick>
 800410a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800410c:	bf00      	nop
 800410e:	f7fc ff21 	bl	8000f54 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	4293      	cmp	r3, r2
 8004118:	d0f9      	beq.n	800410e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411e:	4a07      	ldr	r2, [pc, #28]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	4a04      	ldr	r2, [pc, #16]	@ (800413c <HAL_RCC_OscConfig+0xdb4>)
 800412a:	f043 0310 	orr.w	r3, r3, #16
 800412e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3738      	adds	r7, #56	@ 0x38
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	46020c00 	.word	0x46020c00

08004140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e1d9      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b9b      	ldr	r3, [pc, #620]	@ (80043c4 <HAL_RCC_ClockConfig+0x284>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d910      	bls.n	8004184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b98      	ldr	r3, [pc, #608]	@ (80043c4 <HAL_RCC_ClockConfig+0x284>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 020f 	bic.w	r2, r3, #15
 800416a:	4996      	ldr	r1, [pc, #600]	@ (80043c4 <HAL_RCC_ClockConfig+0x284>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b94      	ldr	r3, [pc, #592]	@ (80043c4 <HAL_RCC_ClockConfig+0x284>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e1c1      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	4b8c      	ldr	r3, [pc, #560]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800419c:	429a      	cmp	r2, r3
 800419e:	d908      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80041a0:	4b89      	ldr	r3, [pc, #548]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	4986      	ldr	r1, [pc, #536]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	4b81      	ldr	r3, [pc, #516]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d909      	bls.n	80041e4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80041d0:	4b7d      	ldr	r3, [pc, #500]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	497a      	ldr	r1, [pc, #488]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b74      	ldr	r3, [pc, #464]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d908      	bls.n	8004212 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b71      	ldr	r3, [pc, #452]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	496e      	ldr	r1, [pc, #440]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 800420e:	4313      	orrs	r3, r2
 8004210:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d010      	beq.n	8004240 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	4b69      	ldr	r3, [pc, #420]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	429a      	cmp	r2, r3
 800422c:	d908      	bls.n	8004240 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800422e:	4b66      	ldr	r3, [pc, #408]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f023 020f 	bic.w	r2, r3, #15
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4963      	ldr	r1, [pc, #396]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 800423c:	4313      	orrs	r3, r2
 800423e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80d2 	beq.w	80043f2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800424e:	2300      	movs	r3, #0
 8004250:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d143      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425a:	4b5b      	ldr	r3, [pc, #364]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 800425c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d110      	bne.n	800428a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004268:	4b57      	ldr	r3, [pc, #348]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426e:	4a56      	ldr	r2, [pc, #344]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004278:	4b53      	ldr	r3, [pc, #332]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800428a:	f7fc fe63 	bl	8000f54 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004290:	4b4e      	ldr	r3, [pc, #312]	@ (80043cc <HAL_RCC_ClockConfig+0x28c>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00f      	beq.n	80042bc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800429e:	f7fc fe59 	bl	8000f54 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e12b      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80042b0:	4b46      	ldr	r3, [pc, #280]	@ (80043cc <HAL_RCC_ClockConfig+0x28c>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	4b41      	ldr	r3, [pc, #260]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042c8:	4a3f      	ldr	r2, [pc, #252]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042d2:	4b3d      	ldr	r3, [pc, #244]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d121      	bne.n	8004322 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e112      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ea:	4b37      	ldr	r3, [pc, #220]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d115      	bne.n	8004322 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e106      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004302:	4b31      	ldr	r3, [pc, #196]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0fa      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004312:	4b2d      	ldr	r3, [pc, #180]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0f2      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004322:	4b29      	ldr	r3, [pc, #164]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4926      	ldr	r1, [pc, #152]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 8004330:	4313      	orrs	r3, r2
 8004332:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004334:	f7fc fe0e 	bl	8000f54 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d112      	bne.n	8004368 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fc fe06 	bl	8000f54 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0d6      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435a:	4b1b      	ldr	r3, [pc, #108]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d1ee      	bne.n	8004344 <HAL_RCC_ClockConfig+0x204>
 8004366:	e044      	b.n	80043f2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d112      	bne.n	8004396 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004372:	f7fc fdef 	bl	8000f54 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e0bf      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d1ee      	bne.n	8004372 <HAL_RCC_ClockConfig+0x232>
 8004394:	e02d      	b.n	80043f2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d123      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fc fdd8 	bl	8000f54 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e0a8      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80043b6:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <HAL_RCC_ClockConfig+0x288>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ee      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x260>
 80043c2:	e016      	b.n	80043f2 <HAL_RCC_ClockConfig+0x2b2>
 80043c4:	40022000 	.word	0x40022000
 80043c8:	46020c00 	.word	0x46020c00
 80043cc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fc fdc0 	bl	8000f54 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e090      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d1ee      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	4b43      	ldr	r3, [pc, #268]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	429a      	cmp	r2, r3
 800440c:	d208      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800440e:	4b40      	ldr	r3, [pc, #256]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 020f 	bic.w	r2, r3, #15
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	493d      	ldr	r1, [pc, #244]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004420:	4b3c      	ldr	r3, [pc, #240]	@ (8004514 <HAL_RCC_ClockConfig+0x3d4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d210      	bcs.n	8004450 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <HAL_RCC_ClockConfig+0x3d4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 020f 	bic.w	r2, r3, #15
 8004436:	4937      	ldr	r1, [pc, #220]	@ (8004514 <HAL_RCC_ClockConfig+0x3d4>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b35      	ldr	r3, [pc, #212]	@ (8004514 <HAL_RCC_ClockConfig+0x3d4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e05b      	b.n	8004508 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d010      	beq.n	800447e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	4b2b      	ldr	r3, [pc, #172]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004468:	429a      	cmp	r2, r3
 800446a:	d208      	bcs.n	800447e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800446c:	4b28      	ldr	r3, [pc, #160]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4925      	ldr	r1, [pc, #148]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004498:	429a      	cmp	r2, r3
 800449a:	d209      	bcs.n	80044b0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800449c:	4b1c      	ldr	r3, [pc, #112]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	4919      	ldr	r1, [pc, #100]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d208      	bcs.n	80044de <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80044cc:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	490d      	ldr	r1, [pc, #52]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80044de:	f000 f821 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80044e2:	4602      	mov	r2, r0
 80044e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <HAL_RCC_ClockConfig+0x3d0>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	490a      	ldr	r1, [pc, #40]	@ (8004518 <HAL_RCC_ClockConfig+0x3d8>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
 80044f4:	4a09      	ldr	r2, [pc, #36]	@ (800451c <HAL_RCC_ClockConfig+0x3dc>)
 80044f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <HAL_RCC_ClockConfig+0x3e0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc fbd9 	bl	8000cb4 <HAL_InitTick>
 8004502:	4603      	mov	r3, r0
 8004504:	73fb      	strb	r3, [r7, #15]

  return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	46020c00 	.word	0x46020c00
 8004514:	40022000 	.word	0x40022000
 8004518:	08010598 	.word	0x08010598
 800451c:	20000000 	.word	0x20000000
 8004520:	20000004 	.word	0x20000004

08004524 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	b08b      	sub	sp, #44	@ 0x2c
 8004528:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004532:	4b78      	ldr	r3, [pc, #480]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800453c:	4b75      	ldr	r3, [pc, #468]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0x34>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b0c      	cmp	r3, #12
 8004550:	d121      	bne.n	8004596 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d11e      	bne.n	8004596 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004558:	4b6e      	ldr	r3, [pc, #440]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004564:	4b6b      	ldr	r3, [pc, #428]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800456a:	0b1b      	lsrs	r3, r3, #12
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
 8004572:	e005      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004574:	4b67      	ldr	r3, [pc, #412]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	0f1b      	lsrs	r3, r3, #28
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004580:	4a65      	ldr	r2, [pc, #404]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004594:	e00d      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004596:	4b5f      	ldr	r3, [pc, #380]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d102      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045a2:	4b5e      	ldr	r3, [pc, #376]	@ (800471c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	e004      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045ae:	4b5b      	ldr	r3, [pc, #364]	@ (800471c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80045b0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b0c      	cmp	r3, #12
 80045b6:	f040 80a5 	bne.w	8004704 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80045ba:	4b56      	ldr	r3, [pc, #344]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80045c4:	4b53      	ldr	r3, [pc, #332]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3301      	adds	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80045d2:	4b50      	ldr	r3, [pc, #320]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80045de:	4b4d      	ldr	r3, [pc, #308]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	08db      	lsrs	r3, r3, #3
 80045e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d003      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0xe4>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d022      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x128>
 8004606:	e043      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004720 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b3e      	ldr	r3, [pc, #248]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800461c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800462a:	ed97 6a01 	vldr	s12, [r7, #4]
 800462e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004724 <HAL_RCC_GetSysClockFreq+0x200>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800463a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464a:	e046      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004720 <HAL_RCC_GetSysClockFreq+0x1fc>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b2d      	ldr	r3, [pc, #180]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800466e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004672:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004724 <HAL_RCC_GetSysClockFreq+0x200>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800467e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800468e:	e024      	b.n	80046da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80046b8:	ed97 6a01 	vldr	s12, [r7, #4]
 80046bc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004724 <HAL_RCC_GetSysClockFreq+0x200>
 80046c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80046c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80046da:	4b0e      	ldr	r3, [pc, #56]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046de:	0e1b      	lsrs	r3, r3, #24
 80046e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e4:	3301      	adds	r3, #1
 80046e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fe:	ee17 3a90 	vmov	r3, s15
 8004702:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004704:	6a3b      	ldr	r3, [r7, #32]
}
 8004706:	4618      	mov	r0, r3
 8004708:	372c      	adds	r7, #44	@ 0x2c
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	46020c00 	.word	0x46020c00
 8004718:	080105b0 	.word	0x080105b0
 800471c:	00f42400 	.word	0x00f42400
 8004720:	4b742400 	.word	0x4b742400
 8004724:	46000000 	.word	0x46000000

08004728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800472c:	f7ff fefa 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <HAL_RCC_GetHCLKFreq+0x28>)
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	4906      	ldr	r1, [pc, #24]	@ (8004754 <HAL_RCC_GetHCLKFreq+0x2c>)
 800473c:	5ccb      	ldrb	r3, [r1, r3]
 800473e:	fa22 f303 	lsr.w	r3, r2, r3
 8004742:	4a05      	ldr	r2, [pc, #20]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x30>)
 8004744:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004746:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <HAL_RCC_GetHCLKFreq+0x30>)
 8004748:	681b      	ldr	r3, [r3, #0]
}
 800474a:	4618      	mov	r0, r3
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	46020c00 	.word	0x46020c00
 8004754:	08010598 	.word	0x08010598
 8004758:	20000000 	.word	0x20000000

0800475c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004760:	f7ff ffe2 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4903      	ldr	r1, [pc, #12]	@ (8004780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	46020c00 	.word	0x46020c00
 8004780:	080105a8 	.word	0x080105a8

08004784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004788:	f7ff ffce 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4903      	ldr	r1, [pc, #12]	@ (80047a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	46020c00 	.word	0x46020c00
 80047a8:	080105a8 	.word	0x080105a8

080047ac <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80047b0:	f7ff ffba 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <HAL_RCC_GetPCLK3Freq+0x20>)
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4903      	ldr	r1, [pc, #12]	@ (80047d0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	46020c00 	.word	0x46020c00
 80047d0:	080105a8 	.word	0x080105a8

080047d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	221f      	movs	r2, #31
 80047e2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80047e4:	4b15      	ldr	r3, [pc, #84]	@ (800483c <HAL_RCC_GetClockConfig+0x68>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80047f0:	4b12      	ldr	r3, [pc, #72]	@ (800483c <HAL_RCC_GetClockConfig+0x68>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80047fc:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <HAL_RCC_GetClockConfig+0x68>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <HAL_RCC_GetClockConfig+0x68>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_RCC_GetClockConfig+0x68>)
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004822:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <HAL_RCC_GetClockConfig+0x6c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 020f 	and.w	r2, r3, #15
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	46020c00 	.word	0x46020c00
 8004840:	40022000 	.word	0x40022000

08004844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800484c:	4b3e      	ldr	r3, [pc, #248]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800484e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800485a:	f7fe fd17 	bl	800328c <HAL_PWREx_GetVoltageRange>
 800485e:	6178      	str	r0, [r7, #20]
 8004860:	e019      	b.n	8004896 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	4b39      	ldr	r3, [pc, #228]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004868:	4a37      	ldr	r2, [pc, #220]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800486a:	f043 0304 	orr.w	r3, r3, #4
 800486e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004872:	4b35      	ldr	r3, [pc, #212]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004880:	f7fe fd04 	bl	800328c <HAL_PWREx_GetVoltageRange>
 8004884:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004886:	4b30      	ldr	r3, [pc, #192]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800488c:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800488e:	f023 0304 	bic.w	r3, r3, #4
 8004892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800489c:	d003      	beq.n	80048a6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048a4:	d109      	bne.n	80048ba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ac:	d202      	bcs.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80048ae:	2301      	movs	r3, #1
 80048b0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80048b2:	e033      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80048b8:	e030      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048c0:	d208      	bcs.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c8:	d102      	bne.n	80048d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80048ca:	2303      	movs	r3, #3
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	e025      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e035      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048da:	d90f      	bls.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048e8:	d902      	bls.n	80048f0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	e015      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80048f0:	2301      	movs	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	e012      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	e00f      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004902:	d109      	bne.n	8004918 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490a:	d102      	bne.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800490c:	2301      	movs	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e004      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004912:	2302      	movs	r3, #2
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	e001      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 020f 	bic.w	r2, r3, #15
 8004924:	4909      	ldr	r1, [pc, #36]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800492c:	4b07      	ldr	r3, [pc, #28]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	46020c00 	.word	0x46020c00
 800494c:	40022000 	.word	0x40022000

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004954:	b0c2      	sub	sp, #264	@ 0x108
 8004956:	af00      	add	r7, sp, #0
 8004958:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800495c:	2300      	movs	r3, #0
 800495e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004962:	2300      	movs	r3, #0
 8004964:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f002 0401 	and.w	r4, r2, #1
 8004974:	2500      	movs	r5, #0
 8004976:	ea54 0305 	orrs.w	r3, r4, r5
 800497a:	d00b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800497c:	4bd5      	ldr	r3, [pc, #852]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800497e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004982:	f023 0103 	bic.w	r1, r3, #3
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498c:	4ad1      	ldr	r2, [pc, #836]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800498e:	430b      	orrs	r3, r1
 8004990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f002 0802 	and.w	r8, r2, #2
 80049a0:	f04f 0900 	mov.w	r9, #0
 80049a4:	ea58 0309 	orrs.w	r3, r8, r9
 80049a8:	d00b      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80049aa:	4bca      	ldr	r3, [pc, #808]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049b0:	f023 010c 	bic.w	r1, r3, #12
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ba:	4ac6      	ldr	r2, [pc, #792]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f002 0a04 	and.w	sl, r2, #4
 80049ce:	f04f 0b00 	mov.w	fp, #0
 80049d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80049d6:	d00b      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80049d8:	4bbe      	ldr	r3, [pc, #760]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049de:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	4aba      	ldr	r2, [pc, #744]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049ea:	430b      	orrs	r3, r1
 80049ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f002 0308 	and.w	r3, r2, #8
 80049fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a06:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004a10:	4bb0      	ldr	r3, [pc, #704]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	4aac      	ldr	r2, [pc, #688]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a22:	430b      	orrs	r3, r1
 8004a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f002 0310 	and.w	r3, r2, #16
 8004a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004a48:	4ba2      	ldr	r3, [pc, #648]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	4a9e      	ldr	r2, [pc, #632]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004a80:	4b94      	ldr	r3, [pc, #592]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a90:	4a90      	ldr	r2, [pc, #576]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f002 0320 	and.w	r3, r2, #32
 8004aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004aae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ab8:	4b86      	ldr	r3, [pc, #536]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004abe:	f023 0107 	bic.w	r1, r3, #7
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ac8:	4a82      	ldr	r2, [pc, #520]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ae6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004aea:	460b      	mov	r3, r1
 8004aec:	4313      	orrs	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004af0:	4b78      	ldr	r3, [pc, #480]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004af6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b00:	4a74      	ldr	r2, [pc, #464]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b02:	430b      	orrs	r3, r1
 8004b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d00b      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004b28:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b38:	4a66      	ldr	r2, [pc, #408]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b50:	2300      	movs	r3, #0
 8004b52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004b60:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b70:	4a58      	ldr	r2, [pc, #352]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004b98:	4b4e      	ldr	r3, [pc, #312]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bc6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8004bd0:	4b40      	ldr	r3, [pc, #256]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bd6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be0:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004be2:	430b      	orrs	r3, r1
 8004be4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bfe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d00c      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8004c08:	4b32      	ldr	r3, [pc, #200]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004c2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c32:	2300      	movs	r3, #0
 8004c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c38:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d00c      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c48:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c54:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d00c      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004c7c:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c82:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8e:	4a11      	ldr	r2, [pc, #68]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	d010      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004cb6:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cbc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cc8:	4a02      	ldr	r2, [pc, #8]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cd0:	e002      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8004cd2:	bf00      	nop
 8004cd4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d04c      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d00:	2b80      	cmp	r3, #128	@ 0x80
 8004d02:	d02d      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004d04:	2b80      	cmp	r3, #128	@ 0x80
 8004d06:	d827      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d08:	2b60      	cmp	r3, #96	@ 0x60
 8004d0a:	d02b      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004d0c:	2b60      	cmp	r3, #96	@ 0x60
 8004d0e:	d823      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d006      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d81f      	bhi.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d011      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004d20:	e01a      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d22:	4bbd      	ldr	r3, [pc, #756]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	4abc      	ldr	r2, [pc, #752]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d2e:	e01a      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	3308      	adds	r3, #8
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 fbe8 	bl	800750c <RCCEx_PLL2_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d42:	e010      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	332c      	adds	r3, #44	@ 0x2c
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f002 fc76 	bl	800763c <RCCEx_PLL3_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d56:	e006      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004d5e:	e002      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d66:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004d6e:	4baa      	ldr	r3, [pc, #680]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d74:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d80:	4aa5      	ldr	r2, [pc, #660]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004d82:	430b      	orrs	r3, r1
 8004d84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004d8e:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004da0:	2300      	movs	r3, #0
 8004da2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004da4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004da8:	460b      	mov	r3, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	d053      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dba:	d033      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc0:	d82c      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc6:	d02f      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8004dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dcc:	d826      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd8:	d820      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004de2:	d011      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8004de4:	e01a      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004de6:	4b8c      	ldr	r3, [pc, #560]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	4a8b      	ldr	r2, [pc, #556]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004df2:	e01a      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	3308      	adds	r3, #8
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 fb86 	bl	800750c <RCCEx_PLL2_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e06:	e010      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	332c      	adds	r3, #44	@ 0x2c
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f002 fc14 	bl	800763c <RCCEx_PLL3_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e1a:	e006      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004e22:	e002      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8004e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004e32:	4b79      	ldr	r3, [pc, #484]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004e34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e38:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e44:	4a74      	ldr	r2, [pc, #464]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004e46:	430b      	orrs	r3, r1
 8004e48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004e52:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e62:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e64:	2300      	movs	r3, #0
 8004e66:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	d046      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e7e:	d028      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004e80:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e84:	d821      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004e86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e8a:	d022      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e90:	d81b      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004e92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e96:	d01c      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e9c:	d815      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea2:	d008      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea8:	d80f      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d011      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004eb4:	e009      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eba:	3308      	adds	r3, #8
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 fb25 	bl	800750c <RCCEx_PLL2_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 8004ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10d      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004edc:	4b4e      	ldr	r3, [pc, #312]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ee2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004eee:	4a4a      	ldr	r2, [pc, #296]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ef6:	e003      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004efc:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f0e:	2300      	movs	r3, #0
 8004f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d03f      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d81e      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004f28:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f6f 	.word	0x08004f6f
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f53 	.word	0x08004f53
 8004f3c:	08004f6f 	.word	0x08004f6f
 8004f40:	08004f6f 	.word	0x08004f6f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f44:	4b34      	ldr	r3, [pc, #208]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	4a33      	ldr	r2, [pc, #204]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004f50:	e00e      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	332c      	adds	r3, #44	@ 0x2c
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 fb6f 	bl	800763c <RCCEx_PLL3_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004f64:	e004      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004f6c:	e000      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 8004f6e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f70:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004f78:	4b27      	ldr	r3, [pc, #156]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f7e:	f023 0107 	bic.w	r1, r3, #7
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8a:	4a23      	ldr	r2, [pc, #140]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004f98:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004fa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004faa:	2300      	movs	r3, #0
 8004fac:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d04c      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fc4:	d02a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004fc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fca:	d821      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004fcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fd0:	d026      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8004fd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fd6:	d81b      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004fd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fdc:	d00e      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004fde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fe2:	d815      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01d      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fec:	d110      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fee:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004ffa:	e014      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	332c      	adds	r3, #44	@ 0x2c
 8005002:	4618      	mov	r0, r3
 8005004:	f002 fb1a 	bl	800763c <RCCEx_PLL3_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800500e:	e00a      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005016:	e006      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005018:	46020c00 	.word	0x46020c00
        break;
 800501c:	bf00      	nop
 800501e:	e002      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8005024:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005026:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10d      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800502e:	4baf      	ldr	r3, [pc, #700]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005034:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005040:	4aaa      	ldr	r2, [pc, #680]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005042:	430b      	orrs	r3, r1
 8005044:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800504e:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800505e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005060:	2300      	movs	r3, #0
 8005062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005064:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005068:	460b      	mov	r3, r1
 800506a:	4313      	orrs	r3, r2
 800506c:	f000 80b5 	beq.w	80051da <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005076:	4b9d      	ldr	r3, [pc, #628]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d113      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005084:	4b99      	ldr	r3, [pc, #612]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800508a:	4a98      	ldr	r2, [pc, #608]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005094:	4b95      	ldr	r3, [pc, #596]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050ac:	4b90      	ldr	r3, [pc, #576]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	4a8f      	ldr	r2, [pc, #572]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050b8:	f7fb ff4c 	bl	8000f54 <HAL_GetTick>
 80050bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050c0:	e00b      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fb ff47 	bl	8000f54 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d903      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80050d8:	e005      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050da:	4b85      	ldr	r3, [pc, #532]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ed      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 80050e6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d165      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ee:	4b7f      	ldr	r3, [pc, #508]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80050f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80050fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005100:	2b00      	cmp	r3, #0
 8005102:	d023      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005110:	4293      	cmp	r3, r2
 8005112:	d01b      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005114:	4b75      	ldr	r3, [pc, #468]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800511a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005122:	4b72      	ldr	r3, [pc, #456]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005128:	4a70      	ldr	r2, [pc, #448]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800512a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800512e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005132:	4b6e      	ldr	r3, [pc, #440]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005138:	4a6c      	ldr	r2, [pc, #432]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800513a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800513e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005142:	4a6a      	ldr	r2, [pc, #424]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d019      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fb fefc 	bl	8000f54 <HAL_GetTick>
 800515c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005160:	e00d      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fb fef7 	bl	8000f54 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516c:	1ad2      	subs	r2, r2, r3
 800516e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005172:	429a      	cmp	r2, r3
 8005174:	d903      	bls.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 800517c:	e006      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517e:	4b5b      	ldr	r3, [pc, #364]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ea      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 800518c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10d      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005194:	4b55      	ldr	r3, [pc, #340]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800519a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80051a6:	4a51      	ldr	r2, [pc, #324]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80051a8:	430b      	orrs	r3, r1
 80051aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051b0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80051b4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ba:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80051be:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051c2:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ca:	4b48      	ldr	r3, [pc, #288]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d0:	4a46      	ldr	r2, [pc, #280]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80051d2:	f023 0304 	bic.w	r3, r3, #4
 80051d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80051e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e8:	2300      	movs	r3, #0
 80051ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ec:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051f0:	460b      	mov	r3, r1
 80051f2:	4313      	orrs	r3, r2
 80051f4:	d042      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80051fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005202:	d022      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8005204:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005208:	d81b      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800520a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800520e:	d011      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8005210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005214:	d815      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800521a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800521e:	d110      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	3308      	adds	r3, #8
 8005226:	4618      	mov	r0, r3
 8005228:	f002 f970 	bl	800750c <RCCEx_PLL2_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005232:	e00d      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005234:	4b2d      	ldr	r3, [pc, #180]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	4a2c      	ldr	r2, [pc, #176]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800523a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800523e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005248:	e002      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 800524e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005250:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10d      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005258:	4b24      	ldr	r3, [pc, #144]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800525a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800525e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800526a:	4a20      	ldr	r2, [pc, #128]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800526c:	430b      	orrs	r3, r1
 800526e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005272:	e003      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005278:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800528a:	2300      	movs	r3, #0
 800528c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800528e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d031      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a4:	d00b      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80052a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052aa:	d804      	bhi.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b4:	d007      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80052bc:	e004      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 80052be:	bf00      	nop
 80052c0:	e002      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 80052c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052c8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d111      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80052d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052e2:	4a02      	ldr	r2, [pc, #8]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80052e4:	430b      	orrs	r3, r1
 80052e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80052ea:	e007      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80052ec:	46020c00 	.word	0x46020c00
 80052f0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80052f8:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005308:	643b      	str	r3, [r7, #64]	@ 0x40
 800530a:	2300      	movs	r3, #0
 800530c:	647b      	str	r3, [r7, #68]	@ 0x44
 800530e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005312:	460b      	mov	r3, r1
 8005314:	4313      	orrs	r3, r2
 8005316:	d019      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005324:	d105      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005326:	4ba1      	ldr	r3, [pc, #644]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	4aa0      	ldr	r2, [pc, #640]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005330:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005332:	4b9e      	ldr	r3, [pc, #632]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005338:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005344:	4a99      	ldr	r2, [pc, #612]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005346:	430b      	orrs	r3, r1
 8005348:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38
 800535a:	2300      	movs	r3, #0
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d00c      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005368:	4b90      	ldr	r3, [pc, #576]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800536a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800536e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005376:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800537a:	4a8c      	ldr	r2, [pc, #560]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800537c:	430b      	orrs	r3, r1
 800537e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800538e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005390:	2300      	movs	r3, #0
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
 8005394:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d00c      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800539e:	4b83      	ldr	r3, [pc, #524]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80053a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80053b0:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053c6:	2300      	movs	r3, #0
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053ce:	460b      	mov	r3, r1
 80053d0:	4313      	orrs	r3, r2
 80053d2:	d00c      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80053d4:	4b75      	ldr	r3, [pc, #468]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80053d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053da:	f023 0218 	bic.w	r2, r3, #24
 80053de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80053e6:	4971      	ldr	r1, [pc, #452]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	2300      	movs	r3, #0
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005400:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005404:	460b      	mov	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	d032      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005412:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005416:	d105      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005418:	4b64      	ldr	r3, [pc, #400]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	4a63      	ldr	r2, [pc, #396]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800541e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005422:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800542c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005430:	d108      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005436:	3308      	adds	r3, #8
 8005438:	4618      	mov	r0, r3
 800543a:	f002 f867 	bl	800750c <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 8005444:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10d      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800544c:	4b57      	ldr	r3, [pc, #348]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800544e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005452:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800545e:	4953      	ldr	r1, [pc, #332]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005466:	e003      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800546c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	2100      	movs	r1, #0
 800547a:	61b9      	str	r1, [r7, #24]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005486:	460b      	mov	r3, r1
 8005488:	4313      	orrs	r3, r2
 800548a:	d04a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005494:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005498:	d01e      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800549a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800549e:	d825      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80054a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054a4:	d00e      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80054a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054aa:	d81f      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d021      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80054b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054b4:	d11a      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b6:	4b3d      	ldr	r3, [pc, #244]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	4a3c      	ldr	r2, [pc, #240]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80054bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80054c2:	e018      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	3308      	adds	r3, #8
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 f81e 	bl	800750c <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80054d6:	e00e      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	332c      	adds	r3, #44	@ 0x2c
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 f8ac 	bl	800763c <RCCEx_PLL3_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80054ea:	e004      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80054f2:	e000      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 80054f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80054fe:	4b2b      	ldr	r3, [pc, #172]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005500:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005504:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005510:	4926      	ldr	r1, [pc, #152]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800551e:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005538:	460b      	mov	r3, r1
 800553a:	4313      	orrs	r3, r2
 800553c:	d03c      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005546:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800554a:	d00e      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800554c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005550:	d815      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8005556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800555a:	d110      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800555c:	4b13      	ldr	r3, [pc, #76]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	4a12      	ldr	r2, [pc, #72]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005566:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005568:	e00e      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556e:	3308      	adds	r3, #8
 8005570:	4618      	mov	r0, r3
 8005572:	f001 ffcb 	bl	800750c <RCCEx_PLL2_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800557c:	e004      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 8005586:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005588:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10f      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005590:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8005592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005596:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a2:	4902      	ldr	r1, [pc, #8]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80055aa:	e005      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055ac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80055b4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d00c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80055d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055da:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055e6:	4928      	ldr	r1, [pc, #160]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	2100      	movs	r1, #0
 80055f8:	6039      	str	r1, [r7, #0]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d036      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005612:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005616:	d00d      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005618:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800561c:	d811      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 800561e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005622:	d012      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8005624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005628:	d80b      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005632:	d106      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005634:	4b14      	ldr	r3, [pc, #80]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	4a13      	ldr	r2, [pc, #76]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005640:	e004      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8005648:	e000      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 800564a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005654:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005656:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800565a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005666:	4908      	ldr	r1, [pc, #32]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800566e:	e003      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8005674:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005678:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 800567c:	4618      	mov	r0, r3
 800567e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005682:	46bd      	mov	sp, r7
 8005684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005688:	46020c00 	.word	0x46020c00

0800568c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	@ 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005694:	4ba6      	ldr	r3, [pc, #664]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800569e:	4ba4      	ldr	r3, [pc, #656]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80056a8:	4ba1      	ldr	r3, [pc, #644]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	3301      	adds	r3, #1
 80056b4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80056b6:	4b9e      	ldr	r3, [pc, #632]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80056c2:	4b9b      	ldr	r3, [pc, #620]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d062      	beq.n	80057aa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	f200 8081 	bhi.w	80057ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d024      	beq.n	800573c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d17a      	bne.n	80057ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005702:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005934 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570a:	4b89      	ldr	r3, [pc, #548]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800570c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800570e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800571a:	ed97 6a02 	vldr	s12, [r7, #8]
 800571e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005938 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005722:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005726:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800572a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800572e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800573a:	e08f      	b.n	800585c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800573c:	4b7c      	ldr	r3, [pc, #496]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005748:	4b79      	ldr	r3, [pc, #484]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	0f1b      	lsrs	r3, r3, #28
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	e006      	b.n	8005762 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005754:	4b76      	ldr	r3, [pc, #472]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	0f1b      	lsrs	r3, r3, #28
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	4a76      	ldr	r2, [pc, #472]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005788:	ed97 6a02 	vldr	s12, [r7, #8]
 800578c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005938 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005798:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800579c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057a8:	e058      	b.n	800585c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005934 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80057b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005938 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ec:	e036      	b.n	800585c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057ee:	4b50      	ldr	r3, [pc, #320]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80057fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	0f1b      	lsrs	r3, r3, #28
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	e006      	b.n	8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005806:	4b4a      	ldr	r3, [pc, #296]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800580c:	041b      	lsls	r3, r3, #16
 800580e:	0f1b      	lsrs	r3, r3, #28
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	4a49      	ldr	r2, [pc, #292]	@ (800593c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583a:	ed97 6a02 	vldr	s12, [r7, #8]
 800583e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005938 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800584e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800585a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800585c:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d017      	beq.n	8005898 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005868:	4b31      	ldr	r3, [pc, #196]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800586a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586c:	0a5b      	lsrs	r3, r3, #9
 800586e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800587a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800587e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005882:	edd7 6a07 	vldr	s13, [r7, #28]
 8005886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800588a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588e:	ee17 2a90 	vmov	r2, s15
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e002      	b.n	800589e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800589e:	4b24      	ldr	r3, [pc, #144]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d017      	beq.n	80058da <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058aa:	4b21      	ldr	r3, [pc, #132]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ae:	0c1b      	lsrs	r3, r3, #16
 80058b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80058bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d0:	ee17 2a90 	vmov	r2, s15
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	605a      	str	r2, [r3, #4]
 80058d8:	e002      	b.n	80058e0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80058e0:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d017      	beq.n	800591c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058ec:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	0e1b      	lsrs	r3, r3, #24
 80058f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80058fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005902:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005906:	edd7 6a07 	vldr	s13, [r7, #28]
 800590a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005912:	ee17 2a90 	vmov	r2, s15
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800591a:	e002      	b.n	8005922 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	609a      	str	r2, [r3, #8]
}
 8005922:	bf00      	nop
 8005924:	3724      	adds	r7, #36	@ 0x24
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	46020c00 	.word	0x46020c00
 8005934:	4b742400 	.word	0x4b742400
 8005938:	46000000 	.word	0x46000000
 800593c:	080105b0 	.word	0x080105b0

08005940 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	@ 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005948:	4ba6      	ldr	r3, [pc, #664]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800594a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005950:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005952:	4ba4      	ldr	r3, [pc, #656]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800595c:	4ba1      	ldr	r3, [pc, #644]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	3301      	adds	r3, #1
 8005968:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800596a:	4b9e      	ldr	r3, [pc, #632]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800596c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596e:	091b      	lsrs	r3, r3, #4
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005976:	4b9b      	ldr	r3, [pc, #620]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	08db      	lsrs	r3, r3, #3
 800597c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d062      	beq.n	8005a5e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b03      	cmp	r3, #3
 800599c:	f200 8081 	bhi.w	8005aa2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d024      	beq.n	80059f0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d17a      	bne.n	8005aa2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	4b89      	ldr	r3, [pc, #548]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80059d2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ee:	e08f      	b.n	8005b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80059f0:	4b7c      	ldr	r3, [pc, #496]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80059fc:	4b79      	ldr	r3, [pc, #484]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	0f1b      	lsrs	r3, r3, #28
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	e006      	b.n	8005a16 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005a08:	4b76      	ldr	r3, [pc, #472]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a0e:	041b      	lsls	r3, r3, #16
 8005a10:	0f1b      	lsrs	r3, r3, #28
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	4a76      	ldr	r2, [pc, #472]	@ (8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a40:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a5c:	e058      	b.n	8005b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a68:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a70:	4b5c      	ldr	r3, [pc, #368]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a80:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a84:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa0:	e036      	b.n	8005b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005aa2:	4b50      	ldr	r3, [pc, #320]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005aae:	4b4d      	ldr	r3, [pc, #308]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0f1b      	lsrs	r3, r3, #28
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	e006      	b.n	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005aba:	4b4a      	ldr	r3, [pc, #296]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac0:	041b      	lsls	r3, r3, #16
 8005ac2:	0f1b      	lsrs	r3, r3, #28
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	4a49      	ldr	r2, [pc, #292]	@ (8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	ee07 3a90 	vmov	s15, r3
 8005adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005af2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b0e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005b10:	4b34      	ldr	r3, [pc, #208]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d017      	beq.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b1c:	4b31      	ldr	r3, [pc, #196]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b20:	0a5b      	lsrs	r3, r3, #9
 8005b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b42:	ee17 2a90 	vmov	r2, s15
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e002      	b.n	8005b52 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005b52:	4b24      	ldr	r3, [pc, #144]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d017      	beq.n	8005b8e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b5e:	4b21      	ldr	r3, [pc, #132]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	0c1b      	lsrs	r3, r3, #16
 8005b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005b70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b74:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b84:	ee17 2a90 	vmov	r2, s15
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e002      	b.n	8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005b94:	4b13      	ldr	r3, [pc, #76]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d017      	beq.n	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ba0:	4b10      	ldr	r3, [pc, #64]	@ (8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba4:	0e1b      	lsrs	r3, r3, #24
 8005ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc6:	ee17 2a90 	vmov	r2, s15
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bce:	e002      	b.n	8005bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
}
 8005bd6:	bf00      	nop
 8005bd8:	3724      	adds	r7, #36	@ 0x24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	46020c00 	.word	0x46020c00
 8005be8:	4b742400 	.word	0x4b742400
 8005bec:	46000000 	.word	0x46000000
 8005bf0:	080105b0 	.word	0x080105b0

08005bf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	@ 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005bfc:	4ba6      	ldr	r3, [pc, #664]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c04:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005c06:	4ba4      	ldr	r3, [pc, #656]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005c10:	4ba1      	ldr	r3, [pc, #644]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c14:	0a1b      	lsrs	r3, r3, #8
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005c1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005c2a:	4b9b      	ldr	r3, [pc, #620]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2e:	08db      	lsrs	r3, r3, #3
 8005c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	fb02 f303 	mul.w	r3, r2, r3
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d062      	beq.n	8005d12 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	f200 8081 	bhi.w	8005d56 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d024      	beq.n	8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d17a      	bne.n	8005d56 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c72:	4b89      	ldr	r3, [pc, #548]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c86:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005ca2:	e08f      	b.n	8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ca4:	4b7c      	ldr	r3, [pc, #496]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005cb0:	4b79      	ldr	r3, [pc, #484]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	0f1b      	lsrs	r3, r3, #28
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	e006      	b.n	8005cca <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005cbc:	4b76      	ldr	r3, [pc, #472]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	0f1b      	lsrs	r3, r3, #28
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	4a76      	ldr	r2, [pc, #472]	@ (8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d10:	e058      	b.n	8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d24:	4b5c      	ldr	r3, [pc, #368]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d34:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d38:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d54:	e036      	b.n	8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d56:	4b50      	ldr	r3, [pc, #320]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005d62:	4b4d      	ldr	r3, [pc, #308]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	0f1b      	lsrs	r3, r3, #28
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	e006      	b.n	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d74:	041b      	lsls	r3, r3, #16
 8005d76:	0f1b      	lsrs	r3, r3, #28
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	4a49      	ldr	r2, [pc, #292]	@ (8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005da6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dc2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005dc4:	4b34      	ldr	r3, [pc, #208]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d017      	beq.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dd0:	4b31      	ldr	r3, [pc, #196]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e002      	b.n	8005e06 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005e06:	4b24      	ldr	r3, [pc, #144]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d017      	beq.n	8005e42 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e12:	4b21      	ldr	r3, [pc, #132]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005e24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e28:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e38:	ee17 2a90 	vmov	r2, s15
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	e002      	b.n	8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005e48:	4b13      	ldr	r3, [pc, #76]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e54:	4b10      	ldr	r3, [pc, #64]	@ (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e58:	0e1b      	lsrs	r3, r3, #24
 8005e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e7a:	ee17 2a90 	vmov	r2, s15
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e82:	e002      	b.n	8005e8a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	609a      	str	r2, [r3, #8]
}
 8005e8a:	bf00      	nop
 8005e8c:	3724      	adds	r7, #36	@ 0x24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	46020c00 	.word	0x46020c00
 8005e9c:	4b742400 	.word	0x4b742400
 8005ea0:	46000000 	.word	0x46000000
 8005ea4:	080105b0 	.word	0x080105b0

08005ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08e      	sub	sp, #56	@ 0x38
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	d145      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ebe:	4baa      	ldr	r3, [pc, #680]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005eca:	4ba7      	ldr	r3, [pc, #668]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d108      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ede:	d104      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee6:	f001 bb05 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005eea:	4b9f      	ldr	r3, [pc, #636]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef8:	d114      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f00:	d110      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f02:	4b99      	ldr	r3, [pc, #612]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f10:	d103      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005f12:	23fa      	movs	r3, #250	@ 0xfa
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f16:	f001 baed 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f1a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f1e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f20:	f001 bae8 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005f24:	4b90      	ldr	r3, [pc, #576]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f30:	d107      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f38:	d103      	bne.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3e:	f001 bad9 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f46:	f001 bad5 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005f52:	430b      	orrs	r3, r1
 8005f54:	d151      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f56:	4b84      	ldr	r3, [pc, #528]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f5c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005f60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	2b80      	cmp	r3, #128	@ 0x80
 8005f66:	d035      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	2b80      	cmp	r3, #128	@ 0x80
 8005f6c:	d841      	bhi.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	2b60      	cmp	r3, #96	@ 0x60
 8005f72:	d02a      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f76:	2b60      	cmp	r3, #96	@ 0x60
 8005f78:	d83b      	bhi.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d009      	beq.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d835      	bhi.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d012      	beq.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005f92:	e02e      	b.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fb77 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fa2:	f001 baa7 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa6:	f107 0318 	add.w	r3, r7, #24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff fcc8 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fb4:	f001 ba9e 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fe19 	bl	8005bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fc6:	f001 ba95 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005fca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fd0:	f001 ba90 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fd4:	4b64      	ldr	r3, [pc, #400]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe0:	d103      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005fe2:	4b63      	ldr	r3, [pc, #396]	@ (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fe6:	f001 ba85 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fee:	f001 ba81 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default :
      {
        frequency = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ff6:	f001 ba7d 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ffe:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006002:	430b      	orrs	r3, r1
 8006004:	d158      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006006:	4b58      	ldr	r3, [pc, #352]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800600c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006010:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006018:	d03b      	beq.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006020:	d846      	bhi.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006028:	d02e      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006030:	d83e      	bhi.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006038:	d00b      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006040:	d836      	bhi.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800604e:	d012      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006050:	e02e      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fb18 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006060:	f001 ba48 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006064:	f107 0318 	add.w	r3, r7, #24
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fc69 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006072:	f001 ba3f 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006076:	f107 030c 	add.w	r3, r7, #12
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fdba 	bl	8005bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006084:	f001 ba36 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006088:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800608e:	f001 ba31 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006092:	4b35      	ldr	r3, [pc, #212]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800609a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800609e:	d103      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80060a0:	4b33      	ldr	r3, [pc, #204]	@ (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060a4:	f001 ba26 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060ac:	f001 ba22 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default :

        frequency = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060b4:	f001 ba1e 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80060b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060bc:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80060c0:	430b      	orrs	r3, r1
 80060c2:	d16e      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060c4:	4b28      	ldr	r3, [pc, #160]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ca:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80060ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060d6:	d034      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060de:	d85c      	bhi.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060e6:	d00b      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ee:	d854      	bhi.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060fc:	d009      	beq.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80060fe:	e04c      	b.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fac1 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800610e:	f001 b9f1 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006112:	f107 0318 	add.w	r3, r7, #24
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fc12 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006120:	f001 b9e8 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006124:	4b10      	ldr	r3, [pc, #64]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006130:	d103      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8006132:	4b10      	ldr	r3, [pc, #64]	@ (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006134:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006136:	f001 b9dd 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800613e:	f001 b9d9 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006142:	4b09      	ldr	r3, [pc, #36]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b20      	cmp	r3, #32
 800614c:	d121      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800614e:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800615a:	4b03      	ldr	r3, [pc, #12]	@ (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	0e1b      	lsrs	r3, r3, #24
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	e00f      	b.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006166:	bf00      	nop
 8006168:	46020c00 	.word	0x46020c00
 800616c:	0007a120 	.word	0x0007a120
 8006170:	00f42400 	.word	0x00f42400
 8006174:	02dc6c00 	.word	0x02dc6c00
 8006178:	4ba7      	ldr	r3, [pc, #668]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800617a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800617e:	041b      	lsls	r3, r3, #16
 8006180:	0e1b      	lsrs	r3, r3, #24
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	4aa5      	ldr	r2, [pc, #660]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800618e:	f001 b9b1 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006196:	f001 b9ad 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default :

        frequency = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800619e:	f001 b9a9 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80061a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80061aa:	430b      	orrs	r3, r1
 80061ac:	d17f      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80061ae:	4b9a      	ldr	r3, [pc, #616]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d165      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80061c0:	4b95      	ldr	r3, [pc, #596]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061c6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80061ca:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80061d2:	d034      	beq.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80061da:	d853      	bhi.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061e2:	d00b      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ea:	d84b      	bhi.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d016      	beq.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061f8:	d009      	beq.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80061fa:	e043      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fa43 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800620a:	f001 b973 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800620e:	f107 0318 	add.w	r3, r7, #24
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fb94 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800621c:	f001 b96a 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006220:	4b7d      	ldr	r3, [pc, #500]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800622c:	d103      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800622e:	4b7c      	ldr	r3, [pc, #496]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006232:	f001 b95f 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
            frequency = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800623a:	f001 b95b 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800623e:	4b76      	ldr	r3, [pc, #472]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b20      	cmp	r3, #32
 8006248:	d118      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800624a:	4b73      	ldr	r3, [pc, #460]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006256:	4b70      	ldr	r3, [pc, #448]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	0e1b      	lsrs	r3, r3, #24
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	e006      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006262:	4b6d      	ldr	r3, [pc, #436]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	0e1b      	lsrs	r3, r3, #24
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	4a6a      	ldr	r2, [pc, #424]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006278:	f001 b93c 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
            frequency = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006280:	f001 b938 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
        default :
        {
          frequency = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006288:	f001 b934 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006292:	d108      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff f9f7 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a2:	f001 b927 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else
    {
      frequency = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062aa:	f001 b923 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80062ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b2:	1e51      	subs	r1, r2, #1
 80062b4:	430b      	orrs	r3, r1
 80062b6:	d136      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062b8:	4b57      	ldr	r3, [pc, #348]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80062ca:	f7fe fa5b 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 80062ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80062d0:	f001 b910 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d104      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062da:	f7fe f923 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80062de:	6378      	str	r0, [r7, #52]	@ 0x34
 80062e0:	f001 b908 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80062e4:	4b4c      	ldr	r3, [pc, #304]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f0:	d106      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d103      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80062f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80062fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fc:	f001 b8fa 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006300:	4b45      	ldr	r3, [pc, #276]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d107      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	2b03      	cmp	r3, #3
 8006312:	d104      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006318:	637b      	str	r3, [r7, #52]	@ 0x34
 800631a:	f001 b8eb 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
 8006322:	f001 b8e7 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800632a:	1e91      	subs	r1, r2, #2
 800632c:	430b      	orrs	r3, r1
 800632e:	d136      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006330:	4b39      	ldr	r3, [pc, #228]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006342:	f7fe fa0b 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8006346:	6378      	str	r0, [r7, #52]	@ 0x34
 8006348:	f001 b8d4 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	2b04      	cmp	r3, #4
 8006350:	d104      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006352:	f7fe f8e7 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006356:	6378      	str	r0, [r7, #52]	@ 0x34
 8006358:	f001 b8cc 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800635c:	4b2e      	ldr	r3, [pc, #184]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006368:	d106      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	2b08      	cmp	r3, #8
 800636e:	d103      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006370:	4b2c      	ldr	r3, [pc, #176]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
 8006374:	f001 b8be 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006378:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800637a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d107      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d104      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800638c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006390:	637b      	str	r3, [r7, #52]	@ 0x34
 8006392:	f001 b8af 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	637b      	str	r3, [r7, #52]	@ 0x34
 800639a:	f001 b8ab 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800639e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a2:	1f11      	subs	r1, r2, #4
 80063a4:	430b      	orrs	r3, r1
 80063a6:	d13f      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80063a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063ba:	f7fe f9cf 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 80063be:	6378      	str	r0, [r7, #52]	@ 0x34
 80063c0:	f001 b898 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	d104      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063ca:	f7fe f8ab 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80063ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80063d0:	f001 b890 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80063d4:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d106      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d103      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80063e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ec:	f001 b882 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80063f0:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d107      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	2b30      	cmp	r3, #48	@ 0x30
 8006402:	d104      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34
 800640a:	f001 b873 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
 8006412:	f001 b86f 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8006416:	bf00      	nop
 8006418:	46020c00 	.word	0x46020c00
 800641c:	080105b0 	.word	0x080105b0
 8006420:	02dc6c00 	.word	0x02dc6c00
 8006424:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642c:	f1a2 0108 	sub.w	r1, r2, #8
 8006430:	430b      	orrs	r3, r1
 8006432:	d136      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006434:	4baa      	ldr	r3, [pc, #680]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800643a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800643e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006446:	f7fe f989 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 800644a:	6378      	str	r0, [r7, #52]	@ 0x34
 800644c:	f001 b852 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	2b40      	cmp	r3, #64	@ 0x40
 8006454:	d104      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006456:	f7fe f865 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 800645a:	6378      	str	r0, [r7, #52]	@ 0x34
 800645c:	f001 b84a 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006460:	4b9f      	ldr	r3, [pc, #636]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646c:	d106      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	2b80      	cmp	r3, #128	@ 0x80
 8006472:	d103      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006474:	4b9b      	ldr	r3, [pc, #620]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
 8006478:	f001 b83c 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800647c:	4b98      	ldr	r3, [pc, #608]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800647e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d107      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	2bc0      	cmp	r3, #192	@ 0xc0
 800648e:	d104      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
 8006496:	f001 b82d 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	637b      	str	r3, [r7, #52]	@ 0x34
 800649e:	f001 b829 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80064a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a6:	f1a2 0110 	sub.w	r1, r2, #16
 80064aa:	430b      	orrs	r3, r1
 80064ac:	d139      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064ae:	4b8c      	ldr	r3, [pc, #560]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80064b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7fe f94c 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 80064c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80064c6:	f001 b815 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d0:	d104      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064d2:	f7fe f827 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80064d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80064d8:	f001 b80c 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80064dc:	4b80      	ldr	r3, [pc, #512]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f0:	d103      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80064f2:	4b7c      	ldr	r3, [pc, #496]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f6:	f000 bffd 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80064fa:	4b79      	ldr	r3, [pc, #484]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80064fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d108      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800650e:	d104      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006514:	637b      	str	r3, [r7, #52]	@ 0x34
 8006516:	f000 bfed 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	@ 0x34
 800651e:	f000 bfe9 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006526:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800652a:	430b      	orrs	r3, r1
 800652c:	d139      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800652e:	4b6c      	ldr	r3, [pc, #432]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006530:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006538:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006540:	f7fe f90c 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8006544:	6378      	str	r0, [r7, #52]	@ 0x34
 8006546:	f000 bfd5 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006550:	d104      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006552:	f7fd ffe7 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006556:	6378      	str	r0, [r7, #52]	@ 0x34
 8006558:	f000 bfcc 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800655c:	4b60      	ldr	r3, [pc, #384]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006568:	d107      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006570:	d103      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HSI_VALUE;
 8006572:	4b5c      	ldr	r3, [pc, #368]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34
 8006576:	f000 bfbd 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800657a:	4b59      	ldr	r3, [pc, #356]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800657c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d108      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800658e:	d104      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
    {
      frequency = LSE_VALUE;
 8006590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
 8006596:	f000 bfad 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	637b      	str	r3, [r7, #52]	@ 0x34
 800659e:	f000 bfa9 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80065a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a6:	f1a2 0120 	sub.w	r1, r2, #32
 80065aa:	430b      	orrs	r3, r1
 80065ac:	d158      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80065ae:	4b4c      	ldr	r3, [pc, #304]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80065b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d104      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x722>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80065c0:	f7fe f8f4 	bl	80047ac <HAL_RCC_GetPCLK3Freq>
 80065c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80065c6:	f000 bf95 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d104      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065d0:	f7fd ffa8 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80065d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80065d6:	f000 bf8d 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80065da:	4b41      	ldr	r3, [pc, #260]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e6:	d106      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d103      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
    {
      frequency = HSI_VALUE;
 80065ee:	4b3d      	ldr	r3, [pc, #244]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f2:	f000 bf7f 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80065f6:	4b3a      	ldr	r3, [pc, #232]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80065f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b02      	cmp	r3, #2
 8006602:	d107      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006606:	2b03      	cmp	r3, #3
 8006608:	d104      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
    {
      frequency = LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006610:	f000 bf70 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006614:	4b32      	ldr	r3, [pc, #200]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b20      	cmp	r3, #32
 800661e:	d11b      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	2b04      	cmp	r3, #4
 8006624:	d118      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006626:	4b2e      	ldr	r3, [pc, #184]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8006632:	4b2b      	ldr	r3, [pc, #172]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	0e1b      	lsrs	r3, r3, #24
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	e006      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800663e:	4b28      	ldr	r3, [pc, #160]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006644:	041b      	lsls	r3, r3, #16
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	4a26      	ldr	r2, [pc, #152]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800664e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006652:	637b      	str	r3, [r7, #52]	@ 0x34
 8006654:	f000 bf4e 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	637b      	str	r3, [r7, #52]	@ 0x34
 800665c:	f000 bf4a 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006664:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006668:	430b      	orrs	r3, r1
 800666a:	d172      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800666c:	4b1c      	ldr	r3, [pc, #112]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800666e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006672:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006676:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667e:	d104      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006680:	f7fd ff50 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006684:	6378      	str	r0, [r7, #52]	@ 0x34
 8006686:	f000 bf35 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006690:	d108      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006692:	f107 0318 	add.w	r3, r7, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff f952 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a0:	f000 bf28 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80066aa:	f7fe f83d 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 80066ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80066b0:	f000 bf20 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066ba:	d128      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066bc:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d11e      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066c8:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80066d4:	4b02      	ldr	r3, [pc, #8]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	0e1b      	lsrs	r3, r3, #24
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	e00c      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 80066e0:	46020c00 	.word	0x46020c00
 80066e4:	00f42400 	.word	0x00f42400
 80066e8:	080105b0 	.word	0x080105b0
 80066ec:	4ba9      	ldr	r3, [pc, #676]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80066ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	4aa7      	ldr	r2, [pc, #668]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006700:	637b      	str	r3, [r7, #52]	@ 0x34
 8006702:	f000 bef7 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
 800670a:	f000 bef3 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800670e:	4ba1      	ldr	r3, [pc, #644]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800671a:	d107      	bne.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006722:	d103      	bne.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
    {
      frequency = HSE_VALUE;
 8006724:	4b9d      	ldr	r3, [pc, #628]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
 8006728:	f000 bee4 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800672c:	4b99      	ldr	r3, [pc, #612]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006738:	d107      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006740:	d103      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
    {
      frequency = HSI_VALUE;
 8006742:	4b96      	ldr	r3, [pc, #600]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006744:	637b      	str	r3, [r7, #52]	@ 0x34
 8006746:	f000 bed5 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
 800674e:	f000 bed1 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006756:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800675a:	430b      	orrs	r3, r1
 800675c:	d159      	bne.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800675e:	4b8d      	ldr	r3, [pc, #564]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	2b04      	cmp	r3, #4
 800676e:	d84c      	bhi.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	080067b1 	.word	0x080067b1
 800677c:	0800678d 	.word	0x0800678d
 8006780:	0800679f 	.word	0x0800679f
 8006784:	080067bb 	.word	0x080067bb
 8006788:	080067c5 	.word	0x080067c5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800678c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe ff7b 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800679a:	f000 beab 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800679e:	f107 030c 	add.w	r3, r7, #12
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fa26 	bl	8005bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ac:	f000 bea2 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80067b0:	f7fd ffba 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 80067b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067b6:	f000 be9d 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067c0:	f000 be98 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067c4:	4b73      	ldr	r3, [pc, #460]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d118      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067d0:	4b70      	ldr	r3, [pc, #448]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80067dc:	4b6d      	ldr	r3, [pc, #436]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	e006      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 80067e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80067ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	0e1b      	lsrs	r3, r3, #24
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	4a68      	ldr	r2, [pc, #416]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067fe:	f000 be79 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006806:	f000 be75 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800680e:	f000 be71 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006816:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800681a:	430b      	orrs	r3, r1
 800681c:	d167      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800681e:	4b5d      	ldr	r3, [pc, #372]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006824:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006828:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006830:	d036      	beq.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006838:	d855      	bhi.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006840:	d029      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006848:	d84d      	bhi.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006850:	d013      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006858:	d845      	bhi.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	2b00      	cmp	r3, #0
 800685e:	d015      	beq.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x9e4>
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006866:	d13e      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe ff0d 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006876:	f000 be3d 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800687a:	f107 030c 	add.w	r3, r7, #12
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff f9b8 	bl	8005bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006888:	f000 be34 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800688c:	f7fd ff4c 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8006890:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006892:	f000 be2f 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006896:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800689c:	f000 be2a 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d118      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068ac:	4b39      	ldr	r3, [pc, #228]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80068b8:	4b36      	ldr	r3, [pc, #216]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	e006      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80068c4:	4b33      	ldr	r3, [pc, #204]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80068c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068ca:	041b      	lsls	r3, r3, #16
 80068cc:	0e1b      	lsrs	r3, r3, #24
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	4a31      	ldr	r2, [pc, #196]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068da:	f000 be0b 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068e2:	f000 be07 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ea:	f000 be03 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80068ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80068f6:	430b      	orrs	r3, r1
 80068f8:	d152      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068fa:	4b26      	ldr	r3, [pc, #152]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80068fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006900:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006904:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800690c:	f7fd ff26 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8006910:	6378      	str	r0, [r7, #52]	@ 0x34
 8006912:	f000 bdef 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691c:	d104      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800691e:	f7fd fe01 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006922:	6378      	str	r0, [r7, #52]	@ 0x34
 8006924:	f000 bde6 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006928:	4b1a      	ldr	r3, [pc, #104]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006934:	d107      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800693c:	d103      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
    {
      frequency = HSI_VALUE;
 800693e:	4b17      	ldr	r3, [pc, #92]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
 8006942:	f000 bdd7 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006946:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b20      	cmp	r3, #32
 8006950:	d11c      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006958:	d118      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800695a:	4b0e      	ldr	r3, [pc, #56]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	0e1b      	lsrs	r3, r3, #24
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	e006      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8006972:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8006974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	0e1b      	lsrs	r3, r3, #24
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	4a05      	ldr	r2, [pc, #20]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
 8006988:	f000 bdb4 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006990:	f000 bdb0 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8006994:	46020c00 	.word	0x46020c00
 8006998:	080105b0 	.word	0x080105b0
 800699c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80069a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80069a8:	430b      	orrs	r3, r1
 80069aa:	d14c      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xb9e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80069ac:	4ba8      	ldr	r3, [pc, #672]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80069ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069be:	f7fd fecd 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 80069c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80069c4:	f000 bd96 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ce:	d104      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069d0:	f7fd fda8 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80069d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80069d6:	f000 bd8d 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80069da:	4b9d      	ldr	r3, [pc, #628]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e6:	d107      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ee:	d103      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
    {
      frequency = HSI_VALUE;
 80069f0:	4b98      	ldr	r3, [pc, #608]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f4:	f000 bd7e 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80069f8:	4b95      	ldr	r3, [pc, #596]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d11c      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xb96>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a0a:	d118      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xb96>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a0c:	4b90      	ldr	r3, [pc, #576]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
 8006a18:	4b8d      	ldr	r3, [pc, #564]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	0e1b      	lsrs	r3, r3, #24
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	e006      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
 8006a24:	4b8a      	ldr	r3, [pc, #552]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	0e1b      	lsrs	r3, r3, #24
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	4a89      	ldr	r2, [pc, #548]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 8006a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3a:	f000 bd5b 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a42:	f000 bd57 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	d158      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006a52:	4b7f      	ldr	r3, [pc, #508]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a62:	d028      	beq.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a68:	d848      	bhi.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	2b80      	cmp	r3, #128	@ 0x80
 8006a6e:	d00e      	beq.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	2b80      	cmp	r3, #128	@ 0x80
 8006a74:	d842      	bhi.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xbdc>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d014      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8006a82:	e03b      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006a84:	f7fd fe92 	bl	80047ac <HAL_RCC_GetPCLK3Freq>
 8006a88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006a8a:	f000 bd33 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a8e:	4b70      	ldr	r3, [pc, #448]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9a:	d103      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        {
          frequency = HSI_VALUE;
 8006a9c:	4b6d      	ldr	r3, [pc, #436]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006aa0:	f000 bd28 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aa8:	f000 bd24 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006aac:	f7fd fd3a 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006ab0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ab2:	f000 bd1f 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ab6:	4b66      	ldr	r3, [pc, #408]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d118      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ac2:	4b63      	ldr	r3, [pc, #396]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
 8006ace:	4b60      	ldr	r3, [pc, #384]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	0e1b      	lsrs	r3, r3, #24
 8006ad4:	f003 030f 	and.w	r3, r3, #15
 8006ad8:	e006      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 8006ada:	4b5d      	ldr	r3, [pc, #372]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ae0:	041b      	lsls	r3, r3, #16
 8006ae2:	0e1b      	lsrs	r3, r3, #24
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 8006aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006af0:	f000 bd00 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006af8:	f000 bcfc 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      default:
      {
        frequency = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b00:	f000 bcf8 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b08:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	d14c      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006b10:	4b4f      	ldr	r3, [pc, #316]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b22:	f7fd fe1b 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8006b26:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b28:	f000 bce4 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b32:	d104      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b34:	f7fd fcf6 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006b38:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b3a:	f000 bcdb 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006b3e:	4b44      	ldr	r3, [pc, #272]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b52:	d103      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
    {
      frequency = HSI_VALUE;
 8006b54:	4b3f      	ldr	r3, [pc, #252]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b58:	f000 bccc 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d11c      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b6e:	d118      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b70:	4b37      	ldr	r3, [pc, #220]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
 8006b7c:	4b34      	ldr	r3, [pc, #208]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	e006      	b.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
 8006b88:	4b31      	ldr	r3, [pc, #196]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	0e1b      	lsrs	r3, r3, #24
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	4a30      	ldr	r2, [pc, #192]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 8006b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9e:	f000 bca9 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba6:	f000 bca5 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8006baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bae:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	d152      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8006bb6:	4b26      	ldr	r3, [pc, #152]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bbc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bc8:	f7fd fdc8 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8006bcc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bce:	f000 bc91 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bd8:	d104      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bda:	f7fd fca3 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006bde:	6378      	str	r0, [r7, #52]	@ 0x34
 8006be0:	f000 bc88 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8006be4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bf8:	d103      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      frequency = HSI_VALUE;
 8006bfa:	4b16      	ldr	r3, [pc, #88]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>)
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfe:	f000 bc79 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8006c02:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d11c      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c14:	d118      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c16:	4b0e      	ldr	r3, [pc, #56]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
 8006c22:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	0e1b      	lsrs	r3, r3, #24
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	e006      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006c2e:	4b08      	ldr	r3, [pc, #32]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>)
 8006c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	0e1b      	lsrs	r3, r3, #24
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	4a06      	ldr	r2, [pc, #24]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>)
 8006c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c44:	f000 bc56 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4c:	f000 bc52 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8006c50:	46020c00 	.word	0x46020c00
 8006c54:	00f42400 	.word	0x00f42400
 8006c58:	080105b0 	.word	0x080105b0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8006c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c60:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8006c64:	430b      	orrs	r3, r1
 8006c66:	d14a      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8006c68:	4ba5      	ldr	r3, [pc, #660]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006c6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c6e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006c72:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c7a:	f7fd fd6f 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8006c7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c80:	f000 bc38 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c8a:	d104      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c8c:	f7fd fc4a 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8006c90:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c92:	f000 bc2f 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8006c96:	4b9a      	ldr	r3, [pc, #616]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca2:	d107      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006caa:	d103      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
    {
      frequency = HSI_VALUE;
 8006cac:	4b95      	ldr	r3, [pc, #596]	@ (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	f000 bc20 	b.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8006cb4:	4b92      	ldr	r3, [pc, #584]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d11b      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006cc6:	d117      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 8006cd4:	4b8a      	ldr	r3, [pc, #552]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	0e1b      	lsrs	r3, r3, #24
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	e006      	b.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
 8006ce0:	4b87      	ldr	r3, [pc, #540]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006ce2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	0e1b      	lsrs	r3, r3, #24
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	4a86      	ldr	r2, [pc, #536]	@ (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8006cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf6:	e3fd      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfc:	e3fa      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d02:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006d06:	430b      	orrs	r3, r1
 8006d08:	d164      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006d0a:	4b7d      	ldr	r3, [pc, #500]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d120      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d1c:	4b78      	ldr	r3, [pc, #480]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d117      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d28:	4b75      	ldr	r3, [pc, #468]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8006d34:	4b72      	ldr	r3, [pc, #456]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	0e1b      	lsrs	r3, r3, #24
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	e006      	b.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xea6>
 8006d40:	4b6f      	ldr	r3, [pc, #444]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	0e1b      	lsrs	r3, r3, #24
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8006d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d56:	e3cd      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5c:	e3ca      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006d5e:	4b68      	ldr	r3, [pc, #416]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d6c:	d112      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d74:	d10e      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d76:	4b62      	ldr	r3, [pc, #392]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d84:	d102      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xee4>
      {
        frequency = LSI_VALUE / 128U;
 8006d86:	23fa      	movs	r3, #250	@ 0xfa
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d8a:	e3b3      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d92:	e3af      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006d94:	4b5a      	ldr	r3, [pc, #360]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da0:	d106      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d102      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
    {
      frequency = HSI_VALUE;
 8006daa:	4b56      	ldr	r3, [pc, #344]	@ (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dae:	e3a1      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006db0:	4b53      	ldr	r3, [pc, #332]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d107      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc4:	d103      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
    {
      frequency = LSE_VALUE;
 8006dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dcc:	e392      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd2:	e38f      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	d164      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1002>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006de0:	4b47      	ldr	r3, [pc, #284]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006de6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006dea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d120      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xf8c>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006df2:	4b43      	ldr	r3, [pc, #268]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d117      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dfe:	4b40      	ldr	r3, [pc, #256]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xf6e>
 8006e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	0e1b      	lsrs	r3, r3, #24
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8006e16:	4b3a      	ldr	r3, [pc, #232]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e1c:	041b      	lsls	r3, r3, #16
 8006e1e:	0e1b      	lsrs	r3, r3, #24
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	4a38      	ldr	r2, [pc, #224]	@ (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8006e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2c:	e362      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e32:	e35f      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006e34:	4b32      	ldr	r3, [pc, #200]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e42:	d112      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4a:	d10e      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e5a:	d102      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
      {
        frequency = LSI_VALUE / 128U;
 8006e5c:	23fa      	movs	r3, #250	@ 0xfa
 8006e5e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e60:	e348      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e68:	e344      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006e6a:	4b25      	ldr	r3, [pc, #148]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e76:	d106      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7e:	d102      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
    {
      frequency = HSI_VALUE;
 8006e80:	4b20      	ldr	r3, [pc, #128]	@ (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	e336      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006e86:	4b1e      	ldr	r3, [pc, #120]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d107      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e9a:	d103      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
    {
      frequency = LSE_VALUE;
 8006e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea2:	e327      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea8:	e324      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eae:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	d14e      	bne.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006eb6:	4b12      	ldr	r3, [pc, #72]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ebc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006ec0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1028>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ec8:	f7fd fc48 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8006ecc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ece:	e311      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006ed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ede:	d119      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ee6:	d115      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ee8:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ef6:	d109      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
      {
        frequency = LSI_VALUE / 128U;
 8006ef8:	23fa      	movs	r3, #250	@ 0xfa
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006efc:	e2fa      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8006efe:	bf00      	nop
 8006f00:	46020c00 	.word	0x46020c00
 8006f04:	00f42400 	.word	0x00f42400
 8006f08:	080105b0 	.word	0x080105b0
      }
      else
      {
        frequency = LSI_VALUE;
 8006f0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f12:	e2ef      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006f14:	4ba8      	ldr	r3, [pc, #672]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f20:	d106      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f28:	d102      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
    {
      frequency = HSI_VALUE;
 8006f2a:	4ba4      	ldr	r3, [pc, #656]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 8006f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2e:	e2e1      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006f30:	4ba1      	ldr	r3, [pc, #644]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8006f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d107      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f44:	d103      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
    {
      frequency = LSE_VALUE;
 8006f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4c:	e2d2      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f52:	e2cf      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f58:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	d12d      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006f60:	4b95      	ldr	r3, [pc, #596]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8006f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f66:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006f6a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006f6c:	4b92      	ldr	r3, [pc, #584]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f78:	d105      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
    {
      frequency = HSE_VALUE;
 8006f80:	4b8e      	ldr	r3, [pc, #568]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f84:	e2b6      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f8c:	d107      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fb7a 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	e2aa      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa6:	f107 0318 	add.w	r3, r7, #24
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fcc8 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb4:	e29e      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fba:	e29b      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	d156      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006fc8:	4b7b      	ldr	r3, [pc, #492]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8006fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006fd2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fda:	d028      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fe2:	d845      	bhi.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fea:	d013      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ff2:	d83d      	bhi.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x115c>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007000:	d004      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x1164>
 8007002:	e035      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007004:	f7fd fbbe 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8007008:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800700a:	e273      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800700c:	f7fd fa8a 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 8007010:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007012:	e26f      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007014:	4b68      	ldr	r3, [pc, #416]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007020:	d102      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
        {
          frequency = HSI_VALUE;
 8007022:	4b66      	ldr	r3, [pc, #408]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007026:	e265      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800702c:	e262      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800702e:	4b62      	ldr	r3, [pc, #392]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b20      	cmp	r3, #32
 8007038:	d117      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800703a:	4b5f      	ldr	r3, [pc, #380]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x11aa>
 8007046:	4b5c      	ldr	r3, [pc, #368]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	0e1b      	lsrs	r3, r3, #24
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	e006      	b.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8007052:	4b59      	ldr	r3, [pc, #356]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	0e1b      	lsrs	r3, r3, #24
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	4a57      	ldr	r2, [pc, #348]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 8007062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007068:	e244      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800706e:	e241      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007074:	e23e      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800707e:	430b      	orrs	r3, r1
 8007080:	d156      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007082:	4b4d      	ldr	r3, [pc, #308]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800708c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007094:	d028      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800709c:	d845      	bhi.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070a4:	d013      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ac:	d83d      	bhi.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ba:	d004      	beq.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 80070bc:	e035      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80070be:	f7fd fb4d 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 80070c2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070c4:	e216      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80070c6:	f7fd fa2d 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80070ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070cc:	e212      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070ce:	4b3a      	ldr	r3, [pc, #232]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070da:	d102      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        {
          frequency = HSI_VALUE;
 80070dc:	4b37      	ldr	r3, [pc, #220]	@ (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070e0:	e208      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070e6:	e205      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070e8:	4b33      	ldr	r3, [pc, #204]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d117      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070f4:	4b30      	ldr	r3, [pc, #192]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
 8007100:	4b2d      	ldr	r3, [pc, #180]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	0e1b      	lsrs	r3, r3, #24
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	e006      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800710c:	4b2a      	ldr	r3, [pc, #168]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 800710e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	0e1b      	lsrs	r3, r3, #24
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	4a29      	ldr	r2, [pc, #164]	@ (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 800711c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007122:	e1e7      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007128:	e1e4      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800712e:	e1e1      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007134:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007138:	430b      	orrs	r3, r1
 800713a:	d17c      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x138e>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800713c:	4b1e      	ldr	r3, [pc, #120]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>)
 800713e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007142:	f003 0318 	and.w	r3, r3, #24
 8007146:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	2b18      	cmp	r3, #24
 800714c:	d870      	bhi.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x1388>
 800714e:	a201      	add	r2, pc, #4	@ (adr r2, 8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x12ac>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	080071c5 	.word	0x080071c5
 8007158:	08007231 	.word	0x08007231
 800715c:	08007231 	.word	0x08007231
 8007160:	08007231 	.word	0x08007231
 8007164:	08007231 	.word	0x08007231
 8007168:	08007231 	.word	0x08007231
 800716c:	08007231 	.word	0x08007231
 8007170:	08007231 	.word	0x08007231
 8007174:	080071cd 	.word	0x080071cd
 8007178:	08007231 	.word	0x08007231
 800717c:	08007231 	.word	0x08007231
 8007180:	08007231 	.word	0x08007231
 8007184:	08007231 	.word	0x08007231
 8007188:	08007231 	.word	0x08007231
 800718c:	08007231 	.word	0x08007231
 8007190:	08007231 	.word	0x08007231
 8007194:	080071d5 	.word	0x080071d5
 8007198:	08007231 	.word	0x08007231
 800719c:	08007231 	.word	0x08007231
 80071a0:	08007231 	.word	0x08007231
 80071a4:	08007231 	.word	0x08007231
 80071a8:	08007231 	.word	0x08007231
 80071ac:	08007231 	.word	0x08007231
 80071b0:	08007231 	.word	0x08007231
 80071b4:	080071ef 	.word	0x080071ef
 80071b8:	46020c00 	.word	0x46020c00
 80071bc:	00f42400 	.word	0x00f42400
 80071c0:	080105b0 	.word	0x080105b0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80071c4:	f7fd faf2 	bl	80047ac <HAL_RCC_GetPCLK3Freq>
 80071c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071ca:	e193      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80071cc:	f7fd f9aa 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80071d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071d2:	e18f      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071d4:	4b9f      	ldr	r3, [pc, #636]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071e0:	d102      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
        {
          frequency = HSI_VALUE;
 80071e2:	4b9d      	ldr	r3, [pc, #628]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x15b0>)
 80071e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071e6:	e185      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ec:	e182      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071ee:	4b99      	ldr	r3, [pc, #612]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d117      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071fa:	4b96      	ldr	r3, [pc, #600]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8007206:	4b93      	ldr	r3, [pc, #588]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	0e1b      	lsrs	r3, r3, #24
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	e006      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>
 8007212:	4b90      	ldr	r3, [pc, #576]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007218:	041b      	lsls	r3, r3, #16
 800721a:	0e1b      	lsrs	r3, r3, #24
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	4a8e      	ldr	r2, [pc, #568]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x15b4>)
 8007222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007228:	e164      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800722e:	e161      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007234:	e15e      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800723e:	430b      	orrs	r3, r1
 8007240:	d155      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007242:	4b84      	ldr	r3, [pc, #528]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007244:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007248:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800724c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007254:	d013      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x13d6>
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800725c:	d844      	bhi.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007264:	d013      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800726c:	d83c      	bhi.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	2b00      	cmp	r3, #0
 8007272:	d014      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x13f6>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800727a:	d014      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
 800727c:	e034      	b.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800727e:	f107 0318 	add.w	r3, r7, #24
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fb5c 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800728c:	e132      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800728e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe f9fa 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800729c:	e12a      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800729e:	f7fd f941 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80072a2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072a4:	e126      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072a6:	4b6b      	ldr	r3, [pc, #428]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d117      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x143a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072b2:	4b68      	ldr	r3, [pc, #416]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1422>
 80072be:	4b65      	ldr	r3, [pc, #404]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	0e1b      	lsrs	r3, r3, #24
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	e006      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 80072ca:	4b62      	ldr	r3, [pc, #392]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80072cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	4a60      	ldr	r2, [pc, #384]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x15b4>)
 80072da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072e0:	e108      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
          frequency = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e6:	e105      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ec:	e102      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80072ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f2:	1e59      	subs	r1, r3, #1
 80072f4:	ea52 0301 	orrs.w	r3, r2, r1
 80072f8:	d13c      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80072fa:	4b56      	ldr	r3, [pc, #344]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80072fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007300:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007304:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800730c:	d027      	beq.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007314:	d82b      	bhi.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x14c6>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800731c:	d017      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007324:	d823      	bhi.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x14c6>
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007332:	d004      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007334:	e01b      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x14c6>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007336:	f7fd f8f5 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 800733a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800733c:	e0da      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800733e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe f9a2 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800734c:	e0d2      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734e:	f107 0318 	add.w	r3, r7, #24
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe faf4 	bl	8005940 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800735c:	e0ca      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800735e:	f107 030c 	add.w	r3, r7, #12
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fc46 	bl	8005bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800736c:	e0c2      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>

      default:

        frequency = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007372:	e0bf      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007378:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800737c:	430b      	orrs	r3, r1
 800737e:	d131      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007380:	4b34      	ldr	r3, [pc, #208]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800738a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800738c:	4b31      	ldr	r3, [pc, #196]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 800738e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b02      	cmp	r3, #2
 8007398:	d106      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1500>
    {
      frequency = LSE_VALUE;
 80073a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a6:	e0a5      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80073a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80073aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b6:	d112      	bne.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x1536>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073be:	d10e      	bne.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x1536>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073c0:	4b24      	ldr	r3, [pc, #144]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80073c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ce:	d102      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152e>
      {
        frequency = LSI_VALUE / 128U;
 80073d0:	23fa      	movs	r3, #250	@ 0xfa
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073d4:	e08e      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
      else
      {
        frequency = LSI_VALUE;
 80073d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073dc:	e08a      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e2:	e087      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80073e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80073ec:	430b      	orrs	r3, r1
 80073ee:	d13b      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80073f0:	4b18      	ldr	r3, [pc, #96]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80073f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80073fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80073fc:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007408:	d105      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	2b00      	cmp	r3, #0
 800740e:	d102      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x156e>
    {
      frequency = HSI48_VALUE;
 8007410:	4b13      	ldr	r3, [pc, #76]	@ (8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x15b8>)
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
 8007414:	e06e      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007416:	4b0f      	ldr	r3, [pc, #60]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800741e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007422:	d106      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800742a:	d102      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>)
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007430:	e060      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007432:	4b08      	ldr	r3, [pc, #32]	@ (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x15ac>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800743e:	d106      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007446:	d102      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
    {
      frequency = HSI_VALUE;
 8007448:	4b03      	ldr	r3, [pc, #12]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x15b0>)
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	e052      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	@ 0x34
 8007452:	e04f      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8007454:	46020c00 	.word	0x46020c00
 8007458:	00f42400 	.word	0x00f42400
 800745c:	080105b0 	.word	0x080105b0
 8007460:	02dc6c00 	.word	0x02dc6c00
 8007464:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8007468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746c:	f1a3 0108 	sub.w	r1, r3, #8
 8007470:	ea52 0301 	orrs.w	r3, r2, r1
 8007474:	d13c      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8007476:	4b22      	ldr	r3, [pc, #136]	@ (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8007478:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800747c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007480:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007482:	4b1f      	ldr	r3, [pc, #124]	@ (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800748a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800748e:	d105      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
    {
      frequency = HSE_VALUE;
 8007496:	4b1b      	ldr	r3, [pc, #108]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>)
 8007498:	637b      	str	r3, [r7, #52]	@ 0x34
 800749a:	e02b      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800749c:	4b18      	ldr	r3, [pc, #96]	@ (8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074a8:	d106      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b0:	d102      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
    {
      frequency = HSE_VALUE >> 1U ;
 80074b2:	4b15      	ldr	r3, [pc, #84]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>)
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b6:	e01d      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074be:	d107      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1628>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe f8e1 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ce:	e011      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80074d6:	d108      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x1642>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe f8d5 	bl	800568c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	085b      	lsrs	r3, r3, #1
 80074e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e8:	e004      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ee:	e001      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80074f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3738      	adds	r7, #56	@ 0x38
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	46020c00 	.word	0x46020c00
 8007504:	00f42400 	.word	0x00f42400
 8007508:	007a1200 	.word	0x007a1200

0800750c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007514:	4b47      	ldr	r3, [pc, #284]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a46      	ldr	r2, [pc, #280]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 800751a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800751e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007520:	f7f9 fd18 	bl	8000f54 <HAL_GetTick>
 8007524:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007526:	e008      	b.n	800753a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007528:	f7f9 fd14 	bl	8000f54 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e077      	b.n	800762a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800753a:	4b3e      	ldr	r3, [pc, #248]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f0      	bne.n	8007528 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007546:	4b3b      	ldr	r3, [pc, #236]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 8007548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6811      	ldr	r1, [r2, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6852      	ldr	r2, [r2, #4]
 800755a:	3a01      	subs	r2, #1
 800755c:	0212      	lsls	r2, r2, #8
 800755e:	430a      	orrs	r2, r1
 8007560:	4934      	ldr	r1, [pc, #208]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 8007562:	4313      	orrs	r3, r2
 8007564:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007566:	4b33      	ldr	r3, [pc, #204]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 8007568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800756a:	4b33      	ldr	r3, [pc, #204]	@ (8007638 <RCCEx_PLL2_Config+0x12c>)
 800756c:	4013      	ands	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6892      	ldr	r2, [r2, #8]
 8007572:	3a01      	subs	r2, #1
 8007574:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	68d2      	ldr	r2, [r2, #12]
 800757c:	3a01      	subs	r2, #1
 800757e:	0252      	lsls	r2, r2, #9
 8007580:	b292      	uxth	r2, r2
 8007582:	4311      	orrs	r1, r2
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6912      	ldr	r2, [r2, #16]
 8007588:	3a01      	subs	r2, #1
 800758a:	0412      	lsls	r2, r2, #16
 800758c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007590:	4311      	orrs	r1, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6952      	ldr	r2, [r2, #20]
 8007596:	3a01      	subs	r2, #1
 8007598:	0612      	lsls	r2, r2, #24
 800759a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800759e:	430a      	orrs	r2, r1
 80075a0:	4924      	ldr	r1, [pc, #144]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80075a6:	4b23      	ldr	r3, [pc, #140]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	f023 020c 	bic.w	r2, r3, #12
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	4920      	ldr	r1, [pc, #128]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80075b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	491c      	ldr	r1, [pc, #112]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80075c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075cc:	f023 0310 	bic.w	r3, r3, #16
 80075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075d2:	4b18      	ldr	r3, [pc, #96]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	69d2      	ldr	r2, [r2, #28]
 80075e2:	00d2      	lsls	r2, r2, #3
 80075e4:	4913      	ldr	r1, [pc, #76]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80075ea:	4b12      	ldr	r3, [pc, #72]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	4a11      	ldr	r2, [pc, #68]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075f0:	f043 0310 	orr.w	r3, r3, #16
 80075f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80075f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 80075fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007600:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007602:	f7f9 fca7 	bl	8000f54 <HAL_GetTick>
 8007606:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007608:	e008      	b.n	800761c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800760a:	f7f9 fca3 	bl	8000f54 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e006      	b.n	800762a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <RCCEx_PLL2_Config+0x128>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0

}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	46020c00 	.word	0x46020c00
 8007638:	80800000 	.word	0x80800000

0800763c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007644:	4b47      	ldr	r3, [pc, #284]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a46      	ldr	r2, [pc, #280]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 800764a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800764e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007650:	f7f9 fc80 	bl	8000f54 <HAL_GetTick>
 8007654:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007656:	e008      	b.n	800766a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007658:	f7f9 fc7c 	bl	8000f54 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e077      	b.n	800775a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800766a:	4b3e      	ldr	r3, [pc, #248]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007676:	4b3b      	ldr	r3, [pc, #236]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6811      	ldr	r1, [r2, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6852      	ldr	r2, [r2, #4]
 800768a:	3a01      	subs	r2, #1
 800768c:	0212      	lsls	r2, r2, #8
 800768e:	430a      	orrs	r2, r1
 8007690:	4934      	ldr	r1, [pc, #208]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007692:	4313      	orrs	r3, r2
 8007694:	630b      	str	r3, [r1, #48]	@ 0x30
 8007696:	4b33      	ldr	r3, [pc, #204]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800769a:	4b33      	ldr	r3, [pc, #204]	@ (8007768 <RCCEx_PLL3_Config+0x12c>)
 800769c:	4013      	ands	r3, r2
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6892      	ldr	r2, [r2, #8]
 80076a2:	3a01      	subs	r2, #1
 80076a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68d2      	ldr	r2, [r2, #12]
 80076ac:	3a01      	subs	r2, #1
 80076ae:	0252      	lsls	r2, r2, #9
 80076b0:	b292      	uxth	r2, r2
 80076b2:	4311      	orrs	r1, r2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6912      	ldr	r2, [r2, #16]
 80076b8:	3a01      	subs	r2, #1
 80076ba:	0412      	lsls	r2, r2, #16
 80076bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80076c0:	4311      	orrs	r1, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6952      	ldr	r2, [r2, #20]
 80076c6:	3a01      	subs	r2, #1
 80076c8:	0612      	lsls	r2, r2, #24
 80076ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80076ce:	430a      	orrs	r2, r1
 80076d0:	4924      	ldr	r1, [pc, #144]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80076d6:	4b23      	ldr	r3, [pc, #140]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076da:	f023 020c 	bic.w	r2, r3, #12
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	4920      	ldr	r1, [pc, #128]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80076e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 80076ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	491c      	ldr	r1, [pc, #112]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80076f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 80076f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 80076fc:	f023 0310 	bic.w	r3, r3, #16
 8007700:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007702:	4b18      	ldr	r3, [pc, #96]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800770a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	69d2      	ldr	r2, [r2, #28]
 8007712:	00d2      	lsls	r2, r2, #3
 8007714:	4913      	ldr	r1, [pc, #76]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007716:	4313      	orrs	r3, r2
 8007718:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800771a:	4b12      	ldr	r3, [pc, #72]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771e:	4a11      	ldr	r2, [pc, #68]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007720:	f043 0310 	orr.w	r3, r3, #16
 8007724:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007726:	4b0f      	ldr	r3, [pc, #60]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a0e      	ldr	r2, [pc, #56]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 800772c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007730:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007732:	f7f9 fc0f 	bl	8000f54 <HAL_GetTick>
 8007736:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007738:	e008      	b.n	800774c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800773a:	f7f9 fc0b 	bl	8000f54 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e006      	b.n	800775a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <RCCEx_PLL3_Config+0x128>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0f0      	beq.n	800773a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	46020c00 	.word	0x46020c00
 8007768:	80800000 	.word	0x80800000

0800776c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e049      	b.n	8007812 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f841 	bl	800781a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f000 fa58 	bl	8007c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
	...

08007830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d001      	beq.n	8007848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e072      	b.n	800792e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0201 	orr.w	r2, r2, #1
 800785e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a35      	ldr	r2, [pc, #212]	@ (800793c <HAL_TIM_Base_Start_IT+0x10c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d040      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a34      	ldr	r2, [pc, #208]	@ (8007940 <HAL_TIM_Base_Start_IT+0x110>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d03b      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787c:	d036      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007886:	d031      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2d      	ldr	r2, [pc, #180]	@ (8007944 <HAL_TIM_Base_Start_IT+0x114>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d02c      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a2c      	ldr	r2, [pc, #176]	@ (8007948 <HAL_TIM_Base_Start_IT+0x118>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d027      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a2a      	ldr	r2, [pc, #168]	@ (800794c <HAL_TIM_Base_Start_IT+0x11c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a29      	ldr	r2, [pc, #164]	@ (8007950 <HAL_TIM_Base_Start_IT+0x120>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d01d      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a27      	ldr	r2, [pc, #156]	@ (8007954 <HAL_TIM_Base_Start_IT+0x124>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a26      	ldr	r2, [pc, #152]	@ (8007958 <HAL_TIM_Base_Start_IT+0x128>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a24      	ldr	r2, [pc, #144]	@ (800795c <HAL_TIM_Base_Start_IT+0x12c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a23      	ldr	r2, [pc, #140]	@ (8007960 <HAL_TIM_Base_Start_IT+0x130>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a21      	ldr	r2, [pc, #132]	@ (8007964 <HAL_TIM_Base_Start_IT+0x134>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xbc>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a20      	ldr	r2, [pc, #128]	@ (8007968 <HAL_TIM_Base_Start_IT+0x138>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d115      	bne.n	8007918 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	4b1e      	ldr	r3, [pc, #120]	@ (800796c <HAL_TIM_Base_Start_IT+0x13c>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d015      	beq.n	800792a <HAL_TIM_Base_Start_IT+0xfa>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007904:	d011      	beq.n	800792a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007916:	e008      	b.n	800792a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e000      	b.n	800792c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40012c00 	.word	0x40012c00
 8007940:	50012c00 	.word	0x50012c00
 8007944:	40000400 	.word	0x40000400
 8007948:	50000400 	.word	0x50000400
 800794c:	40000800 	.word	0x40000800
 8007950:	50000800 	.word	0x50000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	50000c00 	.word	0x50000c00
 800795c:	40013400 	.word	0x40013400
 8007960:	50013400 	.word	0x50013400
 8007964:	40014000 	.word	0x40014000
 8007968:	50014000 	.word	0x50014000
 800796c:	00010007 	.word	0x00010007

08007970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d020      	beq.n	80079d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01b      	beq.n	80079d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0202 	mvn.w	r2, #2
 80079a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f931 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 80079c0:	e005      	b.n	80079ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f923 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f934 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d020      	beq.n	8007a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01b      	beq.n	8007a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0204 	mvn.w	r2, #4
 80079f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f90b 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 8007a0c:	e005      	b.n	8007a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8fd 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f90e 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d020      	beq.n	8007a6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01b      	beq.n	8007a6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0208 	mvn.w	r2, #8
 8007a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2204      	movs	r2, #4
 8007a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8e5 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 8007a58:	e005      	b.n	8007a66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8d7 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8e8 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d020      	beq.n	8007ab8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01b      	beq.n	8007ab8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0210 	mvn.w	r2, #16
 8007a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2208      	movs	r2, #8
 8007a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8bf 	bl	8007c22 <HAL_TIM_IC_CaptureCallback>
 8007aa4:	e005      	b.n	8007ab2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f8b1 	bl	8007c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8c2 	bl	8007c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00c      	beq.n	8007adc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0201 	mvn.w	r2, #1
 8007ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7f9 f80a 	bl	8000af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00c      	beq.n	8007b0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f9b5 	bl	8007e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00c      	beq.n	8007b2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9ad 	bl	8007e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00c      	beq.n	8007b52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f87c 	bl	8007c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00c      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f06f 0220 	mvn.w	r2, #32
 8007b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f975 	bl	8007e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00c      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d007      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f981 	bl	8007e9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00c      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f979 	bl	8007eb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00c      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f971 	bl	8007ec4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00c      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f969 	bl	8007ed8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c06:	bf00      	nop
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a6b      	ldr	r2, [pc, #428]	@ (8007e20 <TIM_Base_SetConfig+0x1c0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d02b      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a6a      	ldr	r2, [pc, #424]	@ (8007e24 <TIM_Base_SetConfig+0x1c4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d027      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c86:	d023      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c8e:	d01f      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a65      	ldr	r2, [pc, #404]	@ (8007e28 <TIM_Base_SetConfig+0x1c8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d01b      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a64      	ldr	r2, [pc, #400]	@ (8007e2c <TIM_Base_SetConfig+0x1cc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d017      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a63      	ldr	r2, [pc, #396]	@ (8007e30 <TIM_Base_SetConfig+0x1d0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d013      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a62      	ldr	r2, [pc, #392]	@ (8007e34 <TIM_Base_SetConfig+0x1d4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00f      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a61      	ldr	r2, [pc, #388]	@ (8007e38 <TIM_Base_SetConfig+0x1d8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d00b      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a60      	ldr	r2, [pc, #384]	@ (8007e3c <TIM_Base_SetConfig+0x1dc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d007      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8007e40 <TIM_Base_SetConfig+0x1e0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_Base_SetConfig+0x70>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a5e      	ldr	r2, [pc, #376]	@ (8007e44 <TIM_Base_SetConfig+0x1e4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d108      	bne.n	8007ce2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8007e20 <TIM_Base_SetConfig+0x1c0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d043      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a4d      	ldr	r2, [pc, #308]	@ (8007e24 <TIM_Base_SetConfig+0x1c4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d03f      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf8:	d03b      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d00:	d037      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a48      	ldr	r2, [pc, #288]	@ (8007e28 <TIM_Base_SetConfig+0x1c8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d033      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a47      	ldr	r2, [pc, #284]	@ (8007e2c <TIM_Base_SetConfig+0x1cc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d02f      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a46      	ldr	r2, [pc, #280]	@ (8007e30 <TIM_Base_SetConfig+0x1d0>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d02b      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a45      	ldr	r2, [pc, #276]	@ (8007e34 <TIM_Base_SetConfig+0x1d4>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d027      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a44      	ldr	r2, [pc, #272]	@ (8007e38 <TIM_Base_SetConfig+0x1d8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d023      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a43      	ldr	r2, [pc, #268]	@ (8007e3c <TIM_Base_SetConfig+0x1dc>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01f      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a42      	ldr	r2, [pc, #264]	@ (8007e40 <TIM_Base_SetConfig+0x1e0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d01b      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a41      	ldr	r2, [pc, #260]	@ (8007e44 <TIM_Base_SetConfig+0x1e4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d017      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a40      	ldr	r2, [pc, #256]	@ (8007e48 <TIM_Base_SetConfig+0x1e8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a3f      	ldr	r2, [pc, #252]	@ (8007e4c <TIM_Base_SetConfig+0x1ec>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00f      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a3e      	ldr	r2, [pc, #248]	@ (8007e50 <TIM_Base_SetConfig+0x1f0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00b      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8007e54 <TIM_Base_SetConfig+0x1f4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d007      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a3c      	ldr	r2, [pc, #240]	@ (8007e58 <TIM_Base_SetConfig+0x1f8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d003      	beq.n	8007d72 <TIM_Base_SetConfig+0x112>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8007e5c <TIM_Base_SetConfig+0x1fc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d108      	bne.n	8007d84 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1e      	ldr	r2, [pc, #120]	@ (8007e20 <TIM_Base_SetConfig+0x1c0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d023      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1d      	ldr	r2, [pc, #116]	@ (8007e24 <TIM_Base_SetConfig+0x1c4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d01f      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a22      	ldr	r2, [pc, #136]	@ (8007e40 <TIM_Base_SetConfig+0x1e0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d01b      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a21      	ldr	r2, [pc, #132]	@ (8007e44 <TIM_Base_SetConfig+0x1e4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d017      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a20      	ldr	r2, [pc, #128]	@ (8007e48 <TIM_Base_SetConfig+0x1e8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8007e4c <TIM_Base_SetConfig+0x1ec>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00f      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8007e50 <TIM_Base_SetConfig+0x1f0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00b      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e54 <TIM_Base_SetConfig+0x1f4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d007      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e58 <TIM_Base_SetConfig+0x1f8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_Base_SetConfig+0x192>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a1b      	ldr	r2, [pc, #108]	@ (8007e5c <TIM_Base_SetConfig+0x1fc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d103      	bne.n	8007dfa <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	691a      	ldr	r2, [r3, #16]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f043 0204 	orr.w	r2, r3, #4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	601a      	str	r2, [r3, #0]
}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40012c00 	.word	0x40012c00
 8007e24:	50012c00 	.word	0x50012c00
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	50000400 	.word	0x50000400
 8007e30:	40000800 	.word	0x40000800
 8007e34:	50000800 	.word	0x50000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	50000c00 	.word	0x50000c00
 8007e40:	40013400 	.word	0x40013400
 8007e44:	50013400 	.word	0x50013400
 8007e48:	40014000 	.word	0x40014000
 8007e4c:	50014000 	.word	0x50014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	50014400 	.word	0x50014400
 8007e58:	40014800 	.word	0x40014800
 8007e5c:	50014800 	.word	0x50014800

08007e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e042      	b.n	8007f84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7f8 fe1f 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2224      	movs	r2, #36	@ 0x24
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f9d6 	bl	80082e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f825 	bl	8007f8c <UART_SetConfig>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e01b      	b.n	8007f84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa55 	bl	800842c <UART_CheckIdleState>
 8007f82:	4603      	mov	r3, r0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f90:	b094      	sub	sp, #80	@ 0x50
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	4b83      	ldr	r3, [pc, #524]	@ (80081b0 <UART_SetConfig+0x224>)
 8007fa2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	497c      	ldr	r1, [pc, #496]	@ (80081b4 <UART_SetConfig+0x228>)
 8007fc4:	4019      	ands	r1, r3
 8007fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fdc:	68d9      	ldr	r1, [r3, #12]
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	ea40 0301 	orr.w	r3, r0, r1
 8007fe6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80081b0 <UART_SetConfig+0x224>)
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d009      	beq.n	800800c <UART_SetConfig+0x80>
 8007ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	4b6e      	ldr	r3, [pc, #440]	@ (80081b8 <UART_SetConfig+0x22c>)
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d004      	beq.n	800800c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008004:	6a1a      	ldr	r2, [r3, #32]
 8008006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008008:	4313      	orrs	r3, r2
 800800a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800800c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008016:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800801a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008020:	430b      	orrs	r3, r1
 8008022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802a:	f023 000f 	bic.w	r0, r3, #15
 800802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008030:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	ea40 0301 	orr.w	r3, r0, r1
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800803c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4b5e      	ldr	r3, [pc, #376]	@ (80081bc <UART_SetConfig+0x230>)
 8008042:	429a      	cmp	r2, r3
 8008044:	d102      	bne.n	800804c <UART_SetConfig+0xc0>
 8008046:	2301      	movs	r3, #1
 8008048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800804a:	e032      	b.n	80080b2 <UART_SetConfig+0x126>
 800804c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b5b      	ldr	r3, [pc, #364]	@ (80081c0 <UART_SetConfig+0x234>)
 8008052:	429a      	cmp	r2, r3
 8008054:	d102      	bne.n	800805c <UART_SetConfig+0xd0>
 8008056:	2302      	movs	r3, #2
 8008058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800805a:	e02a      	b.n	80080b2 <UART_SetConfig+0x126>
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	4b58      	ldr	r3, [pc, #352]	@ (80081c4 <UART_SetConfig+0x238>)
 8008062:	429a      	cmp	r2, r3
 8008064:	d102      	bne.n	800806c <UART_SetConfig+0xe0>
 8008066:	2304      	movs	r3, #4
 8008068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800806a:	e022      	b.n	80080b2 <UART_SetConfig+0x126>
 800806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4b55      	ldr	r3, [pc, #340]	@ (80081c8 <UART_SetConfig+0x23c>)
 8008072:	429a      	cmp	r2, r3
 8008074:	d102      	bne.n	800807c <UART_SetConfig+0xf0>
 8008076:	2308      	movs	r3, #8
 8008078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800807a:	e01a      	b.n	80080b2 <UART_SetConfig+0x126>
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	4b52      	ldr	r3, [pc, #328]	@ (80081cc <UART_SetConfig+0x240>)
 8008082:	429a      	cmp	r2, r3
 8008084:	d102      	bne.n	800808c <UART_SetConfig+0x100>
 8008086:	2310      	movs	r3, #16
 8008088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800808a:	e012      	b.n	80080b2 <UART_SetConfig+0x126>
 800808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	4b4f      	ldr	r3, [pc, #316]	@ (80081d0 <UART_SetConfig+0x244>)
 8008092:	429a      	cmp	r2, r3
 8008094:	d103      	bne.n	800809e <UART_SetConfig+0x112>
 8008096:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800809a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809c:	e009      	b.n	80080b2 <UART_SetConfig+0x126>
 800809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b43      	ldr	r3, [pc, #268]	@ (80081b0 <UART_SetConfig+0x224>)
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d102      	bne.n	80080ae <UART_SetConfig+0x122>
 80080a8:	2320      	movs	r3, #32
 80080aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ac:	e001      	b.n	80080b2 <UART_SetConfig+0x126>
 80080ae:	2300      	movs	r3, #0
 80080b0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4b3e      	ldr	r3, [pc, #248]	@ (80081b0 <UART_SetConfig+0x224>)
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d005      	beq.n	80080c8 <UART_SetConfig+0x13c>
 80080bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	4b3d      	ldr	r3, [pc, #244]	@ (80081b8 <UART_SetConfig+0x22c>)
 80080c2:	429a      	cmp	r2, r3
 80080c4:	f040 8088 	bne.w	80081d8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80080c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080ca:	2200      	movs	r2, #0
 80080cc:	623b      	str	r3, [r7, #32]
 80080ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80080d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80080d4:	f7fd fee8 	bl	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 80080d8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80080da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80eb 	beq.w	80082b8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	4a3b      	ldr	r2, [pc, #236]	@ (80081d4 <UART_SetConfig+0x248>)
 80080e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080f4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	4413      	add	r3, r2
 8008100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008102:	429a      	cmp	r2, r3
 8008104:	d305      	bcc.n	8008112 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800810c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800810e:	429a      	cmp	r2, r3
 8008110:	d903      	bls.n	800811a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008118:	e048      	b.n	80081ac <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800811a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800811c:	2200      	movs	r2, #0
 800811e:	61bb      	str	r3, [r7, #24]
 8008120:	61fa      	str	r2, [r7, #28]
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008126:	4a2b      	ldr	r2, [pc, #172]	@ (80081d4 <UART_SetConfig+0x248>)
 8008128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800812c:	b29b      	uxth	r3, r3
 800812e:	2200      	movs	r2, #0
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	617a      	str	r2, [r7, #20]
 8008134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008138:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800813c:	f7f8 f9ce 	bl	80004dc <__aeabi_uldivmod>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4610      	mov	r0, r2
 8008146:	4619      	mov	r1, r3
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	020b      	lsls	r3, r1, #8
 8008152:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008156:	0202      	lsls	r2, r0, #8
 8008158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800815a:	6849      	ldr	r1, [r1, #4]
 800815c:	0849      	lsrs	r1, r1, #1
 800815e:	2000      	movs	r0, #0
 8008160:	460c      	mov	r4, r1
 8008162:	4605      	mov	r5, r0
 8008164:	eb12 0804 	adds.w	r8, r2, r4
 8008168:	eb43 0905 	adc.w	r9, r3, r5
 800816c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	60bb      	str	r3, [r7, #8]
 8008174:	60fa      	str	r2, [r7, #12]
 8008176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800817a:	4640      	mov	r0, r8
 800817c:	4649      	mov	r1, r9
 800817e:	f7f8 f9ad 	bl	80004dc <__aeabi_uldivmod>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	4613      	mov	r3, r2
 8008188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800818a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008190:	d308      	bcc.n	80081a4 <UART_SetConfig+0x218>
 8008192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008198:	d204      	bcs.n	80081a4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800819a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081a0:	60da      	str	r2, [r3, #12]
 80081a2:	e003      	b.n	80081ac <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80081aa:	e085      	b.n	80082b8 <UART_SetConfig+0x32c>
 80081ac:	e084      	b.n	80082b8 <UART_SetConfig+0x32c>
 80081ae:	bf00      	nop
 80081b0:	46002400 	.word	0x46002400
 80081b4:	cfff69f3 	.word	0xcfff69f3
 80081b8:	56002400 	.word	0x56002400
 80081bc:	40013800 	.word	0x40013800
 80081c0:	40004400 	.word	0x40004400
 80081c4:	40004800 	.word	0x40004800
 80081c8:	40004c00 	.word	0x40004c00
 80081cc:	40005000 	.word	0x40005000
 80081d0:	40006400 	.word	0x40006400
 80081d4:	08010670 	.word	0x08010670
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e0:	d13c      	bne.n	800825c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80081e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e4:	2200      	movs	r2, #0
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ee:	f7fd fe5b 	bl	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 80081f2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d05e      	beq.n	80082b8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fe:	4a39      	ldr	r2, [pc, #228]	@ (80082e4 <UART_SetConfig+0x358>)
 8008200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008204:	461a      	mov	r2, r3
 8008206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008208:	fbb3 f3f2 	udiv	r3, r3, r2
 800820c:	005a      	lsls	r2, r3, #1
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	441a      	add	r2, r3
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	fbb2 f3f3 	udiv	r3, r2, r3
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008222:	2b0f      	cmp	r3, #15
 8008224:	d916      	bls.n	8008254 <UART_SetConfig+0x2c8>
 8008226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800822c:	d212      	bcs.n	8008254 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800822e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008230:	b29b      	uxth	r3, r3
 8008232:	f023 030f 	bic.w	r3, r3, #15
 8008236:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	b29b      	uxth	r3, r3
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	b29a      	uxth	r2, r3
 8008244:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008246:	4313      	orrs	r3, r2
 8008248:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800824a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	e031      	b.n	80082b8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800825a:	e02d      	b.n	80082b8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800825c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800825e:	2200      	movs	r2, #0
 8008260:	469a      	mov	sl, r3
 8008262:	4693      	mov	fp, r2
 8008264:	4650      	mov	r0, sl
 8008266:	4659      	mov	r1, fp
 8008268:	f7fd fe1e 	bl	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 800826c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800826e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d021      	beq.n	80082b8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	4a1a      	ldr	r2, [pc, #104]	@ (80082e4 <UART_SetConfig+0x358>)
 800827a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800827e:	461a      	mov	r2, r3
 8008280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008282:	fbb3 f2f2 	udiv	r2, r3, r2
 8008286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	441a      	add	r2, r3
 800828e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	fbb2 f3f3 	udiv	r3, r2, r3
 8008296:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d909      	bls.n	80082b2 <UART_SetConfig+0x326>
 800829e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a4:	d205      	bcs.n	80082b2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60da      	str	r2, [r3, #12]
 80082b0:	e002      	b.n	80082b8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ba:	2201      	movs	r2, #1
 80082bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ca:	2200      	movs	r2, #0
 80082cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d0:	2200      	movs	r2, #0
 80082d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3750      	adds	r7, #80	@ 0x50
 80082dc:	46bd      	mov	sp, r7
 80082de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e2:	bf00      	nop
 80082e4:	08010670 	.word	0x08010670

080082e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837c:	f003 0310 	and.w	r3, r3, #16
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01a      	beq.n	80083fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083e6:	d10a      	bne.n	80083fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b098      	sub	sp, #96	@ 0x60
 8008430:	af02      	add	r7, sp, #8
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800843c:	f7f8 fd8a 	bl	8000f54 <HAL_GetTick>
 8008440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b08      	cmp	r3, #8
 800844e:	d12f      	bne.n	80084b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008458:	2200      	movs	r2, #0
 800845a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f88e 	bl	8008580 <UART_WaitOnFlagUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d022      	beq.n	80084b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800847e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008488:	647b      	str	r3, [r7, #68]	@ 0x44
 800848a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800848e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e6      	bne.n	800846a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e063      	b.n	8008578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d149      	bne.n	8008552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084c6:	2200      	movs	r2, #0
 80084c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f857 	bl	8008580 <UART_WaitOnFlagUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d03c      	beq.n	8008552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	623b      	str	r3, [r7, #32]
   return(result);
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e6      	bne.n	80084d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	60fb      	str	r3, [r7, #12]
   return(result);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800852a:	61fa      	str	r2, [r7, #28]
 800852c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	69b9      	ldr	r1, [r7, #24]
 8008530:	69fa      	ldr	r2, [r7, #28]
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	617b      	str	r3, [r7, #20]
   return(result);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e5      	bne.n	800850a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e012      	b.n	8008578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3758      	adds	r7, #88	@ 0x58
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008590:	e04f      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d04b      	beq.n	8008632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859a:	f7f8 fcdb 	bl	8000f54 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d302      	bcc.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e04e      	b.n	8008652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d037      	beq.n	8008632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b80      	cmp	r3, #128	@ 0x80
 80085c6:	d034      	beq.n	8008632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b40      	cmp	r3, #64	@ 0x40
 80085cc:	d031      	beq.n	8008632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d110      	bne.n	80085fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2208      	movs	r2, #8
 80085e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f838 	bl	800865a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2208      	movs	r2, #8
 80085ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e029      	b.n	8008652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800860c:	d111      	bne.n	8008632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 f81e 	bl	800865a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2220      	movs	r2, #32
 8008622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e00f      	b.n	8008652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69da      	ldr	r2, [r3, #28]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4013      	ands	r3, r2
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	429a      	cmp	r2, r3
 800864e:	d0a0      	beq.n	8008592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800865a:	b480      	push	{r7}
 800865c:	b095      	sub	sp, #84	@ 0x54
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	461a      	mov	r2, r3
 800867e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008680:	643b      	str	r3, [r7, #64]	@ 0x40
 8008682:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800868e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e6      	bne.n	8008662 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3308      	adds	r3, #8
 800869a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086aa:	f023 0301 	bic.w	r3, r3, #1
 80086ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3308      	adds	r3, #8
 80086b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e3      	bne.n	8008694 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d118      	bne.n	8008706 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f023 0310 	bic.w	r3, r3, #16
 80086e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f2:	61bb      	str	r3, [r7, #24]
 80086f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6979      	ldr	r1, [r7, #20]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800871a:	bf00      	nop
 800871c:	3754      	adds	r7, #84	@ 0x54
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_UARTEx_DisableFifoMode+0x16>
 8008738:	2302      	movs	r3, #2
 800873a:	e027      	b.n	800878c <HAL_UARTEx_DisableFifoMode+0x66>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2224      	movs	r2, #36	@ 0x24
 8008748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0201 	bic.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800876a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d101      	bne.n	80087b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087ac:	2302      	movs	r3, #2
 80087ae:	e02d      	b.n	800880c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2224      	movs	r2, #36	@ 0x24
 80087bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0201 	bic.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f84f 	bl	8008890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008828:	2302      	movs	r3, #2
 800882a:	e02d      	b.n	8008888 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2224      	movs	r2, #36	@ 0x24
 8008838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0201 	bic.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f811 	bl	8008890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800889c:	2b00      	cmp	r3, #0
 800889e:	d108      	bne.n	80088b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088b0:	e031      	b.n	8008916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088b2:	2308      	movs	r3, #8
 80088b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088b6:	2308      	movs	r3, #8
 80088b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	0e5b      	lsrs	r3, r3, #25
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	0f5b      	lsrs	r3, r3, #29
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	7b3a      	ldrb	r2, [r7, #12]
 80088de:	4911      	ldr	r1, [pc, #68]	@ (8008924 <UARTEx_SetNbDataToProcess+0x94>)
 80088e0:	5c8a      	ldrb	r2, [r1, r2]
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088e6:	7b3a      	ldrb	r2, [r7, #12]
 80088e8:	490f      	ldr	r1, [pc, #60]	@ (8008928 <UARTEx_SetNbDataToProcess+0x98>)
 80088ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	7b7a      	ldrb	r2, [r7, #13]
 80088fc:	4909      	ldr	r1, [pc, #36]	@ (8008924 <UARTEx_SetNbDataToProcess+0x94>)
 80088fe:	5c8a      	ldrb	r2, [r1, r2]
 8008900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008904:	7b7a      	ldrb	r2, [r7, #13]
 8008906:	4908      	ldr	r1, [pc, #32]	@ (8008928 <UARTEx_SetNbDataToProcess+0x98>)
 8008908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800890a:	fb93 f3f2 	sdiv	r3, r3, r2
 800890e:	b29a      	uxth	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	08010688 	.word	0x08010688
 8008928:	08010690 	.word	0x08010690

0800892c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	4613      	mov	r3, r2
 8008938:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d165      	bne.n	8008a0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4a41      	ldr	r2, [pc, #260]	@ (8008a48 <USB_SetTurnaroundTime+0x11c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d906      	bls.n	8008956 <USB_SetTurnaroundTime+0x2a>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4a40      	ldr	r2, [pc, #256]	@ (8008a4c <USB_SetTurnaroundTime+0x120>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d202      	bcs.n	8008956 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008950:	230f      	movs	r3, #15
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	e062      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4a3c      	ldr	r2, [pc, #240]	@ (8008a4c <USB_SetTurnaroundTime+0x120>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d306      	bcc.n	800896c <USB_SetTurnaroundTime+0x40>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4a3b      	ldr	r2, [pc, #236]	@ (8008a50 <USB_SetTurnaroundTime+0x124>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d202      	bcs.n	800896c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008966:	230e      	movs	r3, #14
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e057      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4a38      	ldr	r2, [pc, #224]	@ (8008a50 <USB_SetTurnaroundTime+0x124>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d306      	bcc.n	8008982 <USB_SetTurnaroundTime+0x56>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4a37      	ldr	r2, [pc, #220]	@ (8008a54 <USB_SetTurnaroundTime+0x128>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d202      	bcs.n	8008982 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800897c:	230d      	movs	r3, #13
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e04c      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4a33      	ldr	r2, [pc, #204]	@ (8008a54 <USB_SetTurnaroundTime+0x128>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d306      	bcc.n	8008998 <USB_SetTurnaroundTime+0x6c>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4a32      	ldr	r2, [pc, #200]	@ (8008a58 <USB_SetTurnaroundTime+0x12c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d802      	bhi.n	8008998 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008992:	230c      	movs	r3, #12
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	e041      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4a2f      	ldr	r2, [pc, #188]	@ (8008a58 <USB_SetTurnaroundTime+0x12c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d906      	bls.n	80089ae <USB_SetTurnaroundTime+0x82>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4a2e      	ldr	r2, [pc, #184]	@ (8008a5c <USB_SetTurnaroundTime+0x130>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d802      	bhi.n	80089ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089a8:	230b      	movs	r3, #11
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	e036      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4a2a      	ldr	r2, [pc, #168]	@ (8008a5c <USB_SetTurnaroundTime+0x130>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d906      	bls.n	80089c4 <USB_SetTurnaroundTime+0x98>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4a29      	ldr	r2, [pc, #164]	@ (8008a60 <USB_SetTurnaroundTime+0x134>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d802      	bhi.n	80089c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089be:	230a      	movs	r3, #10
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	e02b      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4a26      	ldr	r2, [pc, #152]	@ (8008a60 <USB_SetTurnaroundTime+0x134>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d906      	bls.n	80089da <USB_SetTurnaroundTime+0xae>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4a25      	ldr	r2, [pc, #148]	@ (8008a64 <USB_SetTurnaroundTime+0x138>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d202      	bcs.n	80089da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089d4:	2309      	movs	r3, #9
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	e020      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4a21      	ldr	r2, [pc, #132]	@ (8008a64 <USB_SetTurnaroundTime+0x138>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d306      	bcc.n	80089f0 <USB_SetTurnaroundTime+0xc4>
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4a20      	ldr	r2, [pc, #128]	@ (8008a68 <USB_SetTurnaroundTime+0x13c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d802      	bhi.n	80089f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089ea:	2308      	movs	r3, #8
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	e015      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a68 <USB_SetTurnaroundTime+0x13c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d906      	bls.n	8008a06 <USB_SetTurnaroundTime+0xda>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4a1c      	ldr	r2, [pc, #112]	@ (8008a6c <USB_SetTurnaroundTime+0x140>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d202      	bcs.n	8008a06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a00:	2307      	movs	r3, #7
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	e00a      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a06:	2306      	movs	r3, #6
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e007      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a12:	2309      	movs	r3, #9
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e001      	b.n	8008a1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a18:	2309      	movs	r3, #9
 8008a1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	029b      	lsls	r3, r3, #10
 8008a30:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008a34:	431a      	orrs	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	371c      	adds	r7, #28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	00d8acbf 	.word	0x00d8acbf
 8008a4c:	00e4e1c0 	.word	0x00e4e1c0
 8008a50:	00f42400 	.word	0x00f42400
 8008a54:	01067380 	.word	0x01067380
 8008a58:	011a499f 	.word	0x011a499f
 8008a5c:	01312cff 	.word	0x01312cff
 8008a60:	014ca43f 	.word	0x014ca43f
 8008a64:	016e3600 	.word	0x016e3600
 8008a68:	01a6ab1f 	.word	0x01a6ab1f
 8008a6c:	01e84800 	.word	0x01e84800

08008a70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a8a:	d901      	bls.n	8008a90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e01b      	b.n	8008ac8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	daf2      	bge.n	8008a7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	019b      	lsls	r3, r3, #6
 8008aa0:	f043 0220 	orr.w	r2, r3, #32
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ab4:	d901      	bls.n	8008aba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e006      	b.n	8008ac8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d0f0      	beq.n	8008aa8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008aec:	d901      	bls.n	8008af2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e018      	b.n	8008b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	daf2      	bge.n	8008ae0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2210      	movs	r2, #16
 8008b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b10:	d901      	bls.n	8008b16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e006      	b.n	8008b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	f003 0310 	and.w	r3, r3, #16
 8008b1e:	2b10      	cmp	r3, #16
 8008b20:	d0f0      	beq.n	8008b04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 0306 	and.w	r3, r3, #6
 8008b48:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d102      	bne.n	8008b56 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]
 8008b54:	e00a      	b.n	8008b6c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d002      	beq.n	8008b62 <USB_GetDevSpeed+0x32>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b06      	cmp	r3, #6
 8008b60:	d102      	bne.n	8008b68 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b62:	2302      	movs	r3, #2
 8008b64:	75fb      	strb	r3, [r7, #23]
 8008b66:	e001      	b.n	8008b6c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b68:	230f      	movs	r3, #15
 8008b6a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	785b      	ldrb	r3, [r3, #1]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d13a      	bne.n	8008c0c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b9c:	69da      	ldr	r2, [r3, #28]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	68f9      	ldr	r1, [r7, #12]
 8008bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d155      	bne.n	8008c7a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	791b      	ldrb	r3, [r3, #4]
 8008be8:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bea:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	059b      	lsls	r3, r3, #22
 8008bf0:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	e036      	b.n	8008c7a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c12:	69da      	ldr	r2, [r3, #28]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c22:	041b      	lsls	r3, r3, #16
 8008c24:	68f9      	ldr	r1, [r7, #12]
 8008c26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d11a      	bne.n	8008c7a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	791b      	ldrb	r3, [r3, #4]
 8008c5e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c60:	430b      	orrs	r3, r1
 8008c62:	4313      	orrs	r3, r2
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c78:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	@ 0x28
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	f040 817f 	bne.w	8008fa8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d132      	bne.n	8008d18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ccc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008cd0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	0151      	lsls	r1, r2, #5
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	440a      	add	r2, r1
 8008cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cf0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	0151      	lsls	r1, r2, #5
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d10:	0cdb      	lsrs	r3, r3, #19
 8008d12:	04db      	lsls	r3, r3, #19
 8008d14:	6113      	str	r3, [r2, #16]
 8008d16:	e097      	b.n	8008e48 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d32:	0cdb      	lsrs	r3, r3, #19
 8008d34:	04db      	lsls	r3, r3, #19
 8008d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d5a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d11a      	bne.n	8008d98 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	691a      	ldr	r2, [r3, #16]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d903      	bls.n	8008d76 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	0151      	lsls	r1, r2, #5
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	440a      	add	r2, r1
 8008d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d94:	6113      	str	r3, [r2, #16]
 8008d96:	e044      	b.n	8008e22 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	691a      	ldr	r2, [r3, #16]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	1e5a      	subs	r2, r3, #1
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	8afb      	ldrh	r3, [r7, #22]
 8008dbe:	04d9      	lsls	r1, r3, #19
 8008dc0:	4ba4      	ldr	r3, [pc, #656]	@ (8009054 <USB_EPStartXfer+0x3cc>)
 8008dc2:	400b      	ands	r3, r1
 8008dc4:	69b9      	ldr	r1, [r7, #24]
 8008dc6:	0148      	lsls	r0, r1, #5
 8008dc8:	69f9      	ldr	r1, [r7, #28]
 8008dca:	4401      	add	r1, r0
 8008dcc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	791b      	ldrb	r3, [r3, #4]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d122      	bne.n	8008e22 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008df6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008dfa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e08:	691a      	ldr	r2, [r3, #16]
 8008e0a:	8afb      	ldrh	r3, [r7, #22]
 8008e0c:	075b      	lsls	r3, r3, #29
 8008e0e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008e12:	69b9      	ldr	r1, [r7, #24]
 8008e14:	0148      	lsls	r0, r1, #5
 8008e16:	69f9      	ldr	r1, [r7, #28]
 8008e18:	4401      	add	r1, r0
 8008e1a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e38:	69b9      	ldr	r1, [r7, #24]
 8008e3a:	0148      	lsls	r0, r1, #5
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	4401      	add	r1, r0
 8008e40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e44:	4313      	orrs	r3, r2
 8008e46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d14b      	bne.n	8008ee6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d009      	beq.n	8008e6a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e62:	461a      	mov	r2, r3
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	791b      	ldrb	r3, [r3, #4]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d128      	bne.n	8008ec4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d110      	bne.n	8008ea4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	0151      	lsls	r1, r2, #5
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	440a      	add	r2, r1
 8008e98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	e00f      	b.n	8008ec4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	0151      	lsls	r1, r2, #5
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	440a      	add	r2, r1
 8008eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ec2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	0151      	lsls	r1, r2, #5
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	440a      	add	r2, r1
 8008eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ede:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	e166      	b.n	80091b4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	0151      	lsls	r1, r2, #5
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	440a      	add	r2, r1
 8008efc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f04:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	791b      	ldrb	r3, [r3, #4]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d015      	beq.n	8008f3a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 814e 	beq.w	80091b4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	f003 030f 	and.w	r3, r3, #15
 8008f28:	2101      	movs	r1, #1
 8008f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f2e:	69f9      	ldr	r1, [r7, #28]
 8008f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f34:	4313      	orrs	r3, r2
 8008f36:	634b      	str	r3, [r1, #52]	@ 0x34
 8008f38:	e13c      	b.n	80091b4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d110      	bne.n	8008f6c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e00f      	b.n	8008f8c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f8a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	68d9      	ldr	r1, [r3, #12]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	781a      	ldrb	r2, [r3, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	b298      	uxth	r0, r3
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f9b9 	bl	8009318 <USB_WritePacket>
 8008fa6:	e105      	b.n	80091b4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	0151      	lsls	r1, r2, #5
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	440a      	add	r2, r1
 8008fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fc2:	0cdb      	lsrs	r3, r3, #19
 8008fc4:	04db      	lsls	r3, r3, #19
 8008fc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fe2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008fe6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008fea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d132      	bne.n	8009058 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009020:	69b9      	ldr	r1, [r7, #24]
 8009022:	0148      	lsls	r0, r1, #5
 8009024:	69f9      	ldr	r1, [r7, #28]
 8009026:	4401      	add	r1, r0
 8009028:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800902c:	4313      	orrs	r3, r2
 800902e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	0151      	lsls	r1, r2, #5
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	440a      	add	r2, r1
 8009046:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800904a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800904e:	6113      	str	r3, [r2, #16]
 8009050:	e062      	b.n	8009118 <USB_EPStartXfer+0x490>
 8009052:	bf00      	nop
 8009054:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d123      	bne.n	80090a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009076:	69b9      	ldr	r1, [r7, #24]
 8009078:	0148      	lsls	r0, r1, #5
 800907a:	69f9      	ldr	r1, [r7, #28]
 800907c:	4401      	add	r1, r0
 800907e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009082:	4313      	orrs	r3, r2
 8009084:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090a4:	6113      	str	r3, [r2, #16]
 80090a6:	e037      	b.n	8009118 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	1e5a      	subs	r2, r3, #1
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	8afa      	ldrh	r2, [r7, #22]
 80090c4:	fb03 f202 	mul.w	r2, r3, r2
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d8:	691a      	ldr	r2, [r3, #16]
 80090da:	8afb      	ldrh	r3, [r7, #22]
 80090dc:	04d9      	lsls	r1, r3, #19
 80090de:	4b38      	ldr	r3, [pc, #224]	@ (80091c0 <USB_EPStartXfer+0x538>)
 80090e0:	400b      	ands	r3, r1
 80090e2:	69b9      	ldr	r1, [r7, #24]
 80090e4:	0148      	lsls	r0, r1, #5
 80090e6:	69f9      	ldr	r1, [r7, #28]
 80090e8:	4401      	add	r1, r0
 80090ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090ee:	4313      	orrs	r3, r2
 80090f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009108:	69b9      	ldr	r1, [r7, #24]
 800910a:	0148      	lsls	r0, r1, #5
 800910c:	69f9      	ldr	r1, [r7, #28]
 800910e:	4401      	add	r1, r0
 8009110:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009114:	4313      	orrs	r3, r2
 8009116:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009118:	79fb      	ldrb	r3, [r7, #7]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d10d      	bne.n	800913a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	68d9      	ldr	r1, [r3, #12]
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009136:	460a      	mov	r2, r1
 8009138:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	791b      	ldrb	r3, [r3, #4]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d128      	bne.n	8009194 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914e:	2b00      	cmp	r3, #0
 8009150:	d110      	bne.n	8009174 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	0151      	lsls	r1, r2, #5
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	440a      	add	r2, r1
 8009168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800916c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	e00f      	b.n	8009194 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800918e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009192:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3720      	adds	r7, #32
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	1ff80000 	.word	0x1ff80000

080091c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d14a      	bne.n	8009278 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091fa:	f040 8086 	bne.w	800930a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	7812      	ldrb	r2, [r2, #0]
 8009212:	0151      	lsls	r1, r2, #5
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	440a      	add	r2, r1
 8009218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800921c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009220:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	7812      	ldrb	r2, [r2, #0]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	440a      	add	r2, r1
 800923c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009244:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009252:	4293      	cmp	r3, r2
 8009254:	d902      	bls.n	800925c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	75fb      	strb	r3, [r7, #23]
          break;
 800925a:	e056      	b.n	800930a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009270:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009274:	d0e7      	beq.n	8009246 <USB_EPStopXfer+0x82>
 8009276:	e048      	b.n	800930a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800928c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009290:	d13b      	bne.n	800930a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	7812      	ldrb	r2, [r2, #0]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80092b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	7812      	ldrb	r2, [r2, #0]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3301      	adds	r3, #1
 80092de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d902      	bls.n	80092f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	75fb      	strb	r3, [r7, #23]
          break;
 80092ee:	e00c      	b.n	800930a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009308:	d0e7      	beq.n	80092da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
}
 800930c:	4618      	mov	r0, r3
 800930e:	371c      	adds	r7, #28
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009318:	b480      	push	{r7}
 800931a:	b089      	sub	sp, #36	@ 0x24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	4611      	mov	r1, r2
 8009324:	461a      	mov	r2, r3
 8009326:	460b      	mov	r3, r1
 8009328:	71fb      	strb	r3, [r7, #7]
 800932a:	4613      	mov	r3, r2
 800932c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009336:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	d123      	bne.n	8009386 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800933e:	88bb      	ldrh	r3, [r7, #4]
 8009340:	3303      	adds	r3, #3
 8009342:	089b      	lsrs	r3, r3, #2
 8009344:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009346:	2300      	movs	r3, #0
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	e018      	b.n	800937e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	031a      	lsls	r2, r3, #12
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	4413      	add	r3, r2
 8009354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009358:	461a      	mov	r2, r3
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	3301      	adds	r3, #1
 8009364:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	3301      	adds	r3, #1
 800936a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	3301      	adds	r3, #1
 8009370:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	3301      	adds	r3, #1
 8009376:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	3301      	adds	r3, #1
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	429a      	cmp	r2, r3
 8009384:	d3e2      	bcc.n	800934c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3724      	adds	r7, #36	@ 0x24
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009394:	b480      	push	{r7}
 8009396:	b08b      	sub	sp, #44	@ 0x2c
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80093aa:	88fb      	ldrh	r3, [r7, #6]
 80093ac:	089b      	lsrs	r3, r3, #2
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80093b2:	88fb      	ldrh	r3, [r7, #6]
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80093ba:	2300      	movs	r3, #0
 80093bc:	623b      	str	r3, [r7, #32]
 80093be:	e014      	b.n	80093ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	3301      	adds	r3, #1
 80093d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d4:	3301      	adds	r3, #1
 80093d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	3301      	adds	r3, #1
 80093dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e0:	3301      	adds	r3, #1
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	3301      	adds	r3, #1
 80093e8:	623b      	str	r3, [r7, #32]
 80093ea:	6a3a      	ldr	r2, [r7, #32]
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d3e6      	bcc.n	80093c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093f2:	8bfb      	ldrh	r3, [r7, #30]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01e      	beq.n	8009436 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009402:	461a      	mov	r2, r3
 8009404:	f107 0310 	add.w	r3, r7, #16
 8009408:	6812      	ldr	r2, [r2, #0]
 800940a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	b2db      	uxtb	r3, r3
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	fa22 f303 	lsr.w	r3, r2, r3
 8009418:	b2da      	uxtb	r2, r3
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	701a      	strb	r2, [r3, #0]
      i++;
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	3301      	adds	r3, #1
 8009422:	623b      	str	r3, [r7, #32]
      pDest++;
 8009424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009426:	3301      	adds	r3, #1
 8009428:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800942a:	8bfb      	ldrh	r3, [r7, #30]
 800942c:	3b01      	subs	r3, #1
 800942e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009430:	8bfb      	ldrh	r3, [r7, #30]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1ea      	bne.n	800940c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009438:	4618      	mov	r0, r3
 800943a:	372c      	adds	r7, #44	@ 0x2c
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d12c      	bne.n	80094ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	db12      	blt.n	8009498 <USB_EPSetStall+0x54>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00f      	beq.n	8009498 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	0151      	lsls	r1, r2, #5
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	440a      	add	r2, r1
 800948e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009496:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	0151      	lsls	r1, r2, #5
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	440a      	add	r2, r1
 80094ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	e02b      	b.n	8009512 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	db12      	blt.n	80094f2 <USB_EPSetStall+0xae>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00f      	beq.n	80094f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80094f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	0151      	lsls	r1, r2, #5
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	440a      	add	r2, r1
 8009508:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800950c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009510:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4013      	ands	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009538:	68fb      	ldr	r3, [r7, #12]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009546:	b480      	push	{r7}
 8009548:	b085      	sub	sp, #20
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	4013      	ands	r3, r2
 8009568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	0c1b      	lsrs	r3, r3, #16
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800957a:	b480      	push	{r7}
 800957c:	b085      	sub	sp, #20
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	4013      	ands	r3, r2
 800959c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	b29b      	uxth	r3, r3
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	4013      	ands	r3, r2
 80095da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095dc:	68bb      	ldr	r3, [r7, #8]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b087      	sub	sp, #28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800960a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	f003 030f 	and.w	r3, r3, #15
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	fa22 f303 	lsr.w	r3, r2, r3
 800961a:	01db      	lsls	r3, r3, #7
 800961c:	b2db      	uxtb	r3, r3
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4013      	ands	r3, r2
 8009636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009638:	68bb      	ldr	r3, [r7, #8]
}
 800963a:	4618      	mov	r0, r3
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	f003 0301 	and.w	r3, r3, #1
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800967c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009680:	f023 0307 	bic.w	r3, r3, #7
 8009684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	460b      	mov	r3, r1
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	333c      	adds	r3, #60	@ 0x3c
 80096be:	3304      	adds	r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	4a26      	ldr	r2, [pc, #152]	@ (8009760 <USB_EP0_OutStart+0xb8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d90a      	bls.n	80096e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096dc:	d101      	bne.n	80096e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	e037      	b.n	8009752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e8:	461a      	mov	r2, r3
 80096ea:	2300      	movs	r3, #0
 80096ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009710:	f043 0318 	orr.w	r3, r3, #24
 8009714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009724:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d10f      	bne.n	8009750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800974a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800974e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	4f54300a 	.word	0x4f54300a

08009764 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b096      	sub	sp, #88	@ 0x58
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3303      	adds	r3, #3
 8009776:	f023 0303 	bic.w	r3, r3, #3
 800977a:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800977c:	f3ef 8310 	mrs	r3, PRIMASK
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8009782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8009784:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8009786:	b672      	cpsid	i
#endif
    return(int_posture);
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800978a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800978c:	4b55      	ldr	r3, [pc, #340]	@ (80098e4 <_tx_byte_allocate+0x180>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8009792:	2300      	movs	r3, #0
 8009794:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800979a:	621a      	str	r2, [r3, #32]
 800979c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800979e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	f383 8810 	msr	PRIMASK, r3
}
 80097a6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 f9b2 	bl	8009b14 <_tx_byte_pool_search>
 80097b0:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097b2:	f3ef 8310 	mrs	r3, PRIMASK
 80097b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80097ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80097bc:	b672      	cpsid	i
    return(int_posture);
 80097be:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80097c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80097c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80097c8:	2301      	movs	r3, #1
 80097ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097cc:	e006      	b.n	80097dc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d101      	bne.n	80097dc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80097d8:	2301      	movs	r3, #1
 80097da:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80097dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0d9      	beq.n	8009796 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097e6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80097e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d008      	beq.n	8009800 <_tx_byte_allocate+0x9c>
 80097ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	f383 8810 	msr	PRIMASK, r3
}
 80097f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80097fa:	2300      	movs	r3, #0
 80097fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80097fe:	e06c      	b.n	80098da <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d061      	beq.n	80098ca <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8009806:	4b38      	ldr	r3, [pc, #224]	@ (80098e8 <_tx_byte_allocate+0x184>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d007      	beq.n	800981e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800980e:	2310      	movs	r3, #16
 8009810:	653b      	str	r3, [r7, #80]	@ 0x50
 8009812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009814:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	f383 8810 	msr	PRIMASK, r3
}
 800981c:	e05d      	b.n	80098da <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800981e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009820:	4a32      	ldr	r2, [pc, #200]	@ (80098ec <_tx_byte_allocate+0x188>)
 8009822:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8009824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800982a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8009830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8009836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009840:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	d109      	bne.n	800986e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800985e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009864:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986a:	675a      	str	r2, [r3, #116]	@ 0x74
 800986c:	e011      	b.n	8009892 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009876:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009878:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800987a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800987e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009884:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800988a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800988c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800988e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009890:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8009892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009894:	2209      	movs	r2, #9
 8009896:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800989a:	2201      	movs	r2, #1
 800989c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800989e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80098a4:	4b10      	ldr	r3, [pc, #64]	@ (80098e8 <_tx_byte_allocate+0x184>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3301      	adds	r3, #1
 80098aa:	4a0f      	ldr	r2, [pc, #60]	@ (80098e8 <_tx_byte_allocate+0x184>)
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	f383 8810 	msr	PRIMASK, r3
}
 80098b8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80098ba:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80098bc:	f001 fd7a 	bl	800b3b4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80098c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098c8:	e007      	b.n	80098da <_tx_byte_allocate+0x176>
 80098ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098cc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f383 8810 	msr	PRIMASK, r3
}
 80098d4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80098d6:	2310      	movs	r3, #16
 80098d8:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80098da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3758      	adds	r7, #88	@ 0x58
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20002b68 	.word	0x20002b68
 80098e8:	20002c00 	.word	0x20002c00
 80098ec:	080098f1 	.word	0x080098f1

080098f0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08e      	sub	sp, #56	@ 0x38
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098fa:	f3ef 8310 	mrs	r3, PRIMASK
 80098fe:	623b      	str	r3, [r7, #32]
    return(posture);
 8009900:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009902:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009904:	b672      	cpsid	i
    return(int_posture);
 8009906:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800990e:	4a33      	ldr	r2, [pc, #204]	@ (80099dc <_tx_byte_pool_cleanup+0xec>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d158      	bne.n	80099c6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	429a      	cmp	r2, r3
 800991e:	d152      	bne.n	80099c6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009924:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	2b00      	cmp	r3, #0
 800992a:	d04c      	beq.n	80099c6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a2b      	ldr	r2, [pc, #172]	@ (80099e0 <_tx_byte_pool_cleanup+0xf0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d147      	bne.n	80099c6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993a:	2b00      	cmp	r3, #0
 800993c:	d043      	beq.n	80099c6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009948:	1e5a      	subs	r2, r3, #1
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800994e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009952:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d103      	bne.n	8009962 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	2200      	movs	r2, #0
 800995e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009960:	e013      	b.n	800998a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009966:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800996c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009972:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009978:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	429a      	cmp	r2, r3
 8009982:	d102      	bne.n	800998a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8009984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009988:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998e:	2b09      	cmp	r3, #9
 8009990:	d119      	bne.n	80099c6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2210      	movs	r2, #16
 8009996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800999a:	4b12      	ldr	r3, [pc, #72]	@ (80099e4 <_tx_byte_pool_cleanup+0xf4>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3301      	adds	r3, #1
 80099a0:	4a10      	ldr	r2, [pc, #64]	@ (80099e4 <_tx_byte_pool_cleanup+0xf4>)
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f383 8810 	msr	PRIMASK, r3
}
 80099ae:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 fbff 	bl	800b1b4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099b6:	f3ef 8310 	mrs	r3, PRIMASK
 80099ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 80099bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80099be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80099c0:	b672      	cpsid	i
    return(int_posture);
 80099c2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f383 8810 	msr	PRIMASK, r3
}
 80099d0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80099d2:	bf00      	nop
 80099d4:	3738      	adds	r7, #56	@ 0x38
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	080098f1 	.word	0x080098f1
 80099e0:	42595445 	.word	0x42595445
 80099e4:	20002c00 	.word	0x20002c00

080099e8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08e      	sub	sp, #56	@ 0x38
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80099f6:	2234      	movs	r2, #52	@ 0x34
 80099f8:	2100      	movs	r1, #0
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f006 fd10 	bl	8010420 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	f1a3 0208 	sub.w	r2, r3, #8
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2202      	movs	r2, #2
 8009a34:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8009a3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	4413      	add	r3, r2
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8009a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a44:	3b04      	subs	r3, #4
 8009a46:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a54:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8009a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a58:	3b04      	subs	r3, #4
 8009a5a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8009a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a72:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8009a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8009a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	4a1f      	ldr	r2, [pc, #124]	@ (8009b04 <_tx_byte_pool_create+0x11c>)
 8009a86:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a92:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009a94:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009a96:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a98:	b672      	cpsid	i
    return(int_posture);
 8009a9a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8009a9c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	4a19      	ldr	r2, [pc, #100]	@ (8009b08 <_tx_byte_pool_create+0x120>)
 8009aa2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8009aa4:	4b19      	ldr	r3, [pc, #100]	@ (8009b0c <_tx_byte_pool_create+0x124>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d109      	bne.n	8009ac0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8009aac:	4a18      	ldr	r2, [pc, #96]	@ (8009b10 <_tx_byte_pool_create+0x128>)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	631a      	str	r2, [r3, #48]	@ 0x30
 8009abe:	e011      	b.n	8009ae4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8009ac0:	4b13      	ldr	r3, [pc, #76]	@ (8009b10 <_tx_byte_pool_create+0x128>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aca:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a3a      	ldr	r2, [r7, #32]
 8009ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8009ae4:	4b09      	ldr	r3, [pc, #36]	@ (8009b0c <_tx_byte_pool_create+0x124>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	4a08      	ldr	r2, [pc, #32]	@ (8009b0c <_tx_byte_pool_create+0x124>)
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f383 8810 	msr	PRIMASK, r3
}
 8009af8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3738      	adds	r7, #56	@ 0x38
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	ffffeeee 	.word	0xffffeeee
 8009b08:	42595445 	.word	0x42595445
 8009b0c:	20002b5c 	.word	0x20002b5c
 8009b10:	20002b58 	.word	0x20002b58

08009b14 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b097      	sub	sp, #92	@ 0x5c
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b22:	f3ef 8310 	mrs	r3, PRIMASK
 8009b26:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8009b2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b2c:	b672      	cpsid	i
    return(int_posture);
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8009b30:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	3b02      	subs	r3, #2
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	4413      	add	r3, r2
 8009b40:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d308      	bcc.n	8009b5c <_tx_byte_pool_search+0x48>
 8009b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b4c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	f383 8810 	msr	PRIMASK, r3
}
 8009b54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b5a:	e0dd      	b.n	8009d18 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8009b5c:	4b72      	ldr	r3, [pc, #456]	@ (8009d28 <_tx_byte_pool_search+0x214>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b66:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8009b76:	2300      	movs	r3, #0
 8009b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8009b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8009b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a68      	ldr	r2, [pc, #416]	@ (8009d2c <_tx_byte_pool_search+0x218>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d143      	bne.n	8009c16 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8009b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d104      	bne.n	8009b9e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b98:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba0:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8009ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8009bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bb2:	3b08      	subs	r3, #8
 8009bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8009bb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d257      	bcs.n	8009c6e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8009bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bca:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a56      	ldr	r2, [pc, #344]	@ (8009d2c <_tx_byte_pool_search+0x218>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d113      	bne.n	8009bfe <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	1e5a      	subs	r2, r3, #1
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d114      	bne.n	8009c20 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009bfa:	615a      	str	r2, [r3, #20]
 8009bfc:	e010      	b.n	8009c20 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c00:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8009c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d008      	beq.n	8009c20 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8009c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c10:	3b01      	subs	r3, #1
 8009c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c14:	e004      	b.n	8009c20 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c18:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8009c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8009c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f383 8810 	msr	PRIMASK, r3
}
 8009c36:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c38:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009c3e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009c40:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c42:	b672      	cpsid	i
    return(int_posture);
 8009c44:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8009c46:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d009      	beq.n	8009c66 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009c64:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8009c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d186      	bne.n	8009b7a <_tx_byte_pool_search+0x66>
 8009c6c:	e000      	b.n	8009c70 <_tx_byte_pool_search+0x15c>
                    break;
 8009c6e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8009c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d048      	beq.n	8009d08 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8009c76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b13      	cmp	r3, #19
 8009c7e:	d91e      	bls.n	8009cbe <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	3308      	adds	r3, #8
 8009c84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c86:	4413      	add	r3, r2
 8009c88:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c90:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8009c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c98:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8009c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8009ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca6:	4a21      	ldr	r2, [pc, #132]	@ (8009d2c <_tx_byte_pool_search+0x218>)
 8009ca8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8009cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc6:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	f1a3 0208 	sub.w	r2, r3, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d105      	bne.n	8009cf4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cea:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8009cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	615a      	str	r2, [r3, #20]
 8009cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cf6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f383 8810 	msr	PRIMASK, r3
}
 8009cfe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8009d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d02:	3308      	adds	r3, #8
 8009d04:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d06:	e007      	b.n	8009d18 <_tx_byte_pool_search+0x204>
 8009d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d0a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f383 8810 	msr	PRIMASK, r3
}
 8009d12:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8009d14:	2300      	movs	r3, #0
 8009d16:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8009d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	375c      	adds	r7, #92	@ 0x5c
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	20002b68 	.word	0x20002b68
 8009d2c:	ffffeeee 	.word	0xffffeeee

08009d30 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8009d34:	f001 f8fc 	bl	800af30 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8009d38:	f001 fd04 	bl	800b744 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8009d3c:	4b12      	ldr	r3, [pc, #72]	@ (8009d88 <_tx_initialize_high_level+0x58>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	4b12      	ldr	r3, [pc, #72]	@ (8009d8c <_tx_initialize_high_level+0x5c>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8009d48:	4b11      	ldr	r3, [pc, #68]	@ (8009d90 <_tx_initialize_high_level+0x60>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	4b11      	ldr	r3, [pc, #68]	@ (8009d94 <_tx_initialize_high_level+0x64>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8009d54:	4b10      	ldr	r3, [pc, #64]	@ (8009d98 <_tx_initialize_high_level+0x68>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	4b10      	ldr	r3, [pc, #64]	@ (8009d9c <_tx_initialize_high_level+0x6c>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8009d60:	4b0f      	ldr	r3, [pc, #60]	@ (8009da0 <_tx_initialize_high_level+0x70>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	4b0f      	ldr	r3, [pc, #60]	@ (8009da4 <_tx_initialize_high_level+0x74>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009da8 <_tx_initialize_high_level+0x78>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	4b0e      	ldr	r3, [pc, #56]	@ (8009dac <_tx_initialize_high_level+0x7c>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8009d78:	4b0d      	ldr	r3, [pc, #52]	@ (8009db0 <_tx_initialize_high_level+0x80>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009db4 <_tx_initialize_high_level+0x84>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
#endif
}
 8009d84:	bf00      	nop
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20002b30 	.word	0x20002b30
 8009d8c:	20002b34 	.word	0x20002b34
 8009d90:	20002b38 	.word	0x20002b38
 8009d94:	20002b3c 	.word	0x20002b3c
 8009d98:	20002b40 	.word	0x20002b40
 8009d9c:	20002b44 	.word	0x20002b44
 8009da0:	20002b50 	.word	0x20002b50
 8009da4:	20002b54 	.word	0x20002b54
 8009da8:	20002b58 	.word	0x20002b58
 8009dac:	20002b5c 	.word	0x20002b5c
 8009db0:	20002b48 	.word	0x20002b48
 8009db4:	20002b4c 	.word	0x20002b4c

08009db8 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009dbc:	4b10      	ldr	r3, [pc, #64]	@ (8009e00 <_tx_initialize_kernel_enter+0x48>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8009dc4:	d00c      	beq.n	8009de0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e00 <_tx_initialize_kernel_enter+0x48>)
 8009dc8:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8009dcc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8009dce:	f7f6 fa5f 	bl	8000290 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8009dd2:	f7ff ffad 	bl	8009d30 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8009dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009e04 <_tx_initialize_kernel_enter+0x4c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	4a09      	ldr	r2, [pc, #36]	@ (8009e04 <_tx_initialize_kernel_enter+0x4c>)
 8009dde:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009de0:	4b07      	ldr	r3, [pc, #28]	@ (8009e00 <_tx_initialize_kernel_enter+0x48>)
 8009de2:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8009de6:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8009de8:	4b07      	ldr	r3, [pc, #28]	@ (8009e08 <_tx_initialize_kernel_enter+0x50>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7f6 fd01 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8009df2:	4b03      	ldr	r3, [pc, #12]	@ (8009e00 <_tx_initialize_kernel_enter+0x48>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8009df8:	f7f6 fa86 	bl	8000308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009dfc:	bf00      	nop
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	2000000c 	.word	0x2000000c
 8009e04:	20002c00 	.word	0x20002c00
 8009e08:	20002b60 	.word	0x20002b60

08009e0c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08e      	sub	sp, #56	@ 0x38
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e16:	f3ef 8310 	mrs	r3, PRIMASK
 8009e1a:	623b      	str	r3, [r7, #32]
    return(posture);
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009e1e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e20:	b672      	cpsid	i
    return(int_posture);
 8009e22:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e2a:	4a33      	ldr	r2, [pc, #204]	@ (8009ef8 <_tx_mutex_cleanup+0xec>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d158      	bne.n	8009ee2 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d152      	bne.n	8009ee2 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e40:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d04c      	beq.n	8009ee2 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009efc <_tx_mutex_cleanup+0xf0>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d147      	bne.n	8009ee2 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d043      	beq.n	8009ee2 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e62:	69db      	ldr	r3, [r3, #28]
 8009e64:	1e5a      	subs	r2, r3, #1
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d103      	bne.n	8009e7e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	2200      	movs	r2, #0
 8009e7a:	619a      	str	r2, [r3, #24]
 8009e7c:	e013      	b.n	8009ea6 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e82:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e88:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e8e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e94:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8009e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d102      	bne.n	8009ea6 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ea4:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eaa:	2b0d      	cmp	r3, #13
 8009eac:	d119      	bne.n	8009ee2 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	221d      	movs	r2, #29
 8009eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009eb6:	4b12      	ldr	r3, [pc, #72]	@ (8009f00 <_tx_mutex_cleanup+0xf4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	4a10      	ldr	r2, [pc, #64]	@ (8009f00 <_tx_mutex_cleanup+0xf4>)
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f383 8810 	msr	PRIMASK, r3
}
 8009eca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 f971 	bl	800b1b4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ed6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009ed8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009eda:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009edc:	b672      	cpsid	i
    return(int_posture);
 8009ede:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f383 8810 	msr	PRIMASK, r3
}
 8009eec:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009eee:	bf00      	nop
 8009ef0:	3738      	adds	r7, #56	@ 0x38
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	08009e0d 	.word	0x08009e0d
 8009efc:	4d555445 	.word	0x4d555445
 8009f00:	20002c00 	.word	0x20002c00

08009f04 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08a      	sub	sp, #40	@ 0x28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f10:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009f12:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009f14:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f16:	b672      	cpsid	i
    return(int_posture);
 8009f18:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8009f1a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009f88 <_tx_mutex_thread_release+0x84>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	4a19      	ldr	r2, [pc, #100]	@ (8009f88 <_tx_mutex_thread_release+0x84>)
 8009f24:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f2c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d017      	beq.n	8009f64 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	2201      	movs	r2, #1
 8009f38:	609a      	str	r2, [r3, #8]
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f383 8810 	msr	PRIMASK, r3
}
 8009f44:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8009f46:	6a38      	ldr	r0, [r7, #32]
 8009f48:	f000 fb9c 	bl	800a684 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f50:	617b      	str	r3, [r7, #20]
    return(posture);
 8009f52:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009f54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f56:	b672      	cpsid	i
    return(int_posture);
 8009f58:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8009f5a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f62:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1dd      	bne.n	8009f26 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8009f6a:	4b07      	ldr	r3, [pc, #28]	@ (8009f88 <_tx_mutex_thread_release+0x84>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	4a05      	ldr	r2, [pc, #20]	@ (8009f88 <_tx_mutex_thread_release+0x84>)
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f383 8810 	msr	PRIMASK, r3
}
 8009f7e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009f80:	bf00      	nop
 8009f82:	3728      	adds	r7, #40	@ 0x28
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20002c00 	.word	0x20002c00

08009f8c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	@ 0x28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8009f98:	2234      	movs	r2, #52	@ 0x34
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f006 fa3f 	bl	8010420 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009fae:	f3ef 8310 	mrs	r3, PRIMASK
 8009fb2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009fb4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009fb6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009fb8:	b672      	cpsid	i
    return(int_posture);
 8009fba:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800a02c <_tx_mutex_create+0xa0>)
 8009fc2:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8009fc4:	4b1a      	ldr	r3, [pc, #104]	@ (800a030 <_tx_mutex_create+0xa4>)
 8009fc6:	4a1b      	ldr	r2, [pc, #108]	@ (800a034 <_tx_mutex_create+0xa8>)
 8009fc8:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8009fca:	4b1b      	ldr	r3, [pc, #108]	@ (800a038 <_tx_mutex_create+0xac>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8009fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800a03c <_tx_mutex_create+0xb0>)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fe4:	e011      	b.n	800a00a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8009fe6:	4b15      	ldr	r3, [pc, #84]	@ (800a03c <_tx_mutex_create+0xb0>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a3a      	ldr	r2, [r7, #32]
 800a008:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	@ (800a038 <_tx_mutex_create+0xac>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3301      	adds	r3, #1
 800a010:	4a09      	ldr	r2, [pc, #36]	@ (800a038 <_tx_mutex_create+0xac>)
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a016:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f383 8810 	msr	PRIMASK, r3
}
 800a01e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3728      	adds	r7, #40	@ 0x28
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	4d555445 	.word	0x4d555445
 800a030:	20002c04 	.word	0x20002c04
 800a034:	08009f05 	.word	0x08009f05
 800a038:	20002b4c 	.word	0x20002b4c
 800a03c:	20002b48 	.word	0x20002b48

0800a040 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b096      	sub	sp, #88	@ 0x58
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a048:	f3ef 8310 	mrs	r3, PRIMASK
 800a04c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800a050:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a052:	b672      	cpsid	i
    return(int_posture);
 800a054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800a056:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800a05e:	4b4a      	ldr	r3, [pc, #296]	@ (800a188 <_tx_mutex_delete+0x148>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3b01      	subs	r3, #1
 800a064:	4a48      	ldr	r2, [pc, #288]	@ (800a188 <_tx_mutex_delete+0x148>)
 800a066:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800a068:	4b47      	ldr	r3, [pc, #284]	@ (800a188 <_tx_mutex_delete+0x148>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d103      	bne.n	800a078 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800a070:	4b46      	ldr	r3, [pc, #280]	@ (800a18c <_tx_mutex_delete+0x14c>)
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	e013      	b.n	800a0a0 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	64bb      	str	r3, [r7, #72]	@ 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a082:	647b      	str	r3, [r7, #68]	@ 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800a084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a088:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800a08a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a08c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a08e:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800a090:	4b3e      	ldr	r3, [pc, #248]	@ (800a18c <_tx_mutex_delete+0x14c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d102      	bne.n	800a0a0 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800a09a:	4a3c      	ldr	r2, [pc, #240]	@ (800a18c <_tx_mutex_delete+0x14c>)
 800a09c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a09e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a0a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a190 <_tx_mutex_delete+0x150>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	4a3a      	ldr	r2, [pc, #232]	@ (800a190 <_tx_mutex_delete+0x150>)
 800a0a8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	653b      	str	r3, [r7, #80]	@ 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800a0c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d013      	beq.n	800a0f6 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	609a      	str	r2, [r3, #8]
 800a0d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0da:	f383 8810 	msr	PRIMASK, r3
}
 800a0de:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 facf 	bl	800a684 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ea:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 800a0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0f0:	b672      	cpsid	i
    return(int_posture);
 800a0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800a0f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0f8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	f383 8810 	msr	PRIMASK, r3
}
 800a100:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800a102:	e024      	b.n	800a14e <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800a104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a106:	3b01      	subs	r3, #1
 800a108:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a10a:	f3ef 8310 	mrs	r3, PRIMASK
 800a10e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a110:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a112:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a114:	b672      	cpsid	i
    return(int_posture);
 800a116:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800a118:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a11a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a11c:	2200      	movs	r2, #0
 800a11e:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800a120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a122:	2201      	movs	r2, #1
 800a124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800a128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a12a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800a12e:	4b18      	ldr	r3, [pc, #96]	@ (800a190 <_tx_mutex_delete+0x150>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	3301      	adds	r3, #1
 800a134:	4a16      	ldr	r2, [pc, #88]	@ (800a190 <_tx_mutex_delete+0x150>)
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a13a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	f383 8810 	msr	PRIMASK, r3
}
 800a142:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a144:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a146:	f001 f835 	bl	800b1b4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800a14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14c:	653b      	str	r3, [r7, #80]	@ 0x50
    while (suspended_count != ((ULONG) 0))
 800a14e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1d7      	bne.n	800a104 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a154:	f3ef 8310 	mrs	r3, PRIMASK
 800a158:	613b      	str	r3, [r7, #16]
    return(posture);
 800a15a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800a15c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a15e:	b672      	cpsid	i
    return(int_posture);
 800a160:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800a162:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800a164:	4b0a      	ldr	r3, [pc, #40]	@ (800a190 <_tx_mutex_delete+0x150>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3b01      	subs	r3, #1
 800a16a:	4a09      	ldr	r2, [pc, #36]	@ (800a190 <_tx_mutex_delete+0x150>)
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a170:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f383 8810 	msr	PRIMASK, r3
}
 800a178:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a17a:	f000 ffe1 	bl	800b140 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3758      	adds	r7, #88	@ 0x58
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20002b4c 	.word	0x20002b4c
 800a18c:	20002b48 	.word	0x20002b48
 800a190:	20002c00 	.word	0x20002c00

0800a194 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b092      	sub	sp, #72	@ 0x48
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a19e:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a2:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800a1a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1a8:	b672      	cpsid	i
    return(int_posture);
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800a1ac:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a1ae:	4b7a      	ldr	r3, [pc, #488]	@ (800a398 <_tx_mutex_get+0x204>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d144      	bne.n	800a246 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a1c6:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800a1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d032      	beq.n	800a234 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d106      	bne.n	800a1e4 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800a1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800a1e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800a1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00f      	beq.n	800a212 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800a1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f6:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800a1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800a1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a208:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a20e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a210:	e009      	b.n	800a226 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800a226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a228:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a230:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800a234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a236:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	f383 8810 	msr	PRIMASK, r3
}
 800a23e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800a240:	2300      	movs	r3, #0
 800a242:	647b      	str	r3, [r7, #68]	@ 0x44
 800a244:	e0a2      	b.n	800a38c <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d10d      	bne.n	800a26c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	609a      	str	r2, [r3, #8]
 800a25a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a25c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	f383 8810 	msr	PRIMASK, r3
}
 800a264:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800a266:	2300      	movs	r3, #0
 800a268:	647b      	str	r3, [r7, #68]	@ 0x44
 800a26a:	e08f      	b.n	800a38c <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 8084 	beq.w	800a37c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a274:	4b49      	ldr	r3, [pc, #292]	@ (800a39c <_tx_mutex_get+0x208>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d008      	beq.n	800a28e <_tx_mutex_get+0xfa>
 800a27c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a27e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f383 8810 	msr	PRIMASK, r3
}
 800a286:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800a288:	231d      	movs	r3, #29
 800a28a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a28c:	e07e      	b.n	800a38c <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	63bb      	str	r3, [r7, #56]	@ 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800a294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a296:	4a42      	ldr	r2, [pc, #264]	@ (800a3a0 <_tx_mutex_get+0x20c>)
 800a298:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800a29a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2aa:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d109      	bne.n	800a2ca <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2ba:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800a2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2c0:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800a2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2c6:	675a      	str	r2, [r3, #116]	@ 0x74
 800a2c8:	e011      	b.n	800a2ee <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2d4:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2da:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2e0:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2e6:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2ec:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fa:	220d      	movs	r2, #13
 800a2fc:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a300:	2201      	movs	r2, #1
 800a302:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a30a:	4b24      	ldr	r3, [pc, #144]	@ (800a39c <_tx_mutex_get+0x208>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3301      	adds	r3, #1
 800a310:	4a22      	ldr	r2, [pc, #136]	@ (800a39c <_tx_mutex_get+0x208>)
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a316:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f383 8810 	msr	PRIMASK, r3
}
 800a31e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d121      	bne.n	800a36c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a330:	429a      	cmp	r2, r3
 800a332:	d903      	bls.n	800a33c <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800a33c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a33e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a346:	429a      	cmp	r2, r3
 800a348:	d204      	bcs.n	800a354 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800a34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800a354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d905      	bls.n	800a36c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800a360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a364:	4619      	mov	r1, r3
 800a366:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a368:	f000 f8ce 	bl	800a508 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a36c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a36e:	f001 f821 	bl	800b3b4 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a378:	647b      	str	r3, [r7, #68]	@ 0x44
 800a37a:	e007      	b.n	800a38c <_tx_mutex_get+0x1f8>
 800a37c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a37e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f383 8810 	msr	PRIMASK, r3
}
 800a386:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800a388:	231d      	movs	r3, #29
 800a38a:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800a38c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3748      	adds	r7, #72	@ 0x48
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20002b68 	.word	0x20002b68
 800a39c:	20002c00 	.word	0x20002c00
 800a3a0:	08009e0d 	.word	0x08009e0d

0800a3a4 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b092      	sub	sp, #72	@ 0x48
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a3ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800a3b4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a3b6:	b672      	cpsid	i
    return(int_posture);
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800a3ba:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d805      	bhi.n	800a3d4 <_tx_mutex_prioritize+0x30>
 800a3c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	f383 8810 	msr	PRIMASK, r3
}
 800a3d2:	e092      	b.n	800a4fa <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d114      	bne.n	800a404 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	63bb      	str	r3, [r7, #56]	@ 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d202      	bcs.n	800a3f8 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f6:	619a      	str	r2, [r3, #24]
 800a3f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	f383 8810 	msr	PRIMASK, r3
}
 800a402:	e07a      	b.n	800a4fa <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800a40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800a40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a412:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800a414:	4b3b      	ldr	r3, [pc, #236]	@ (800a504 <_tx_mutex_prioritize+0x160>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3301      	adds	r3, #1
 800a41a:	4a3a      	ldr	r2, [pc, #232]	@ (800a504 <_tx_mutex_prioritize+0x160>)
 800a41c:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800a41e:	2300      	movs	r3, #0
 800a420:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800a422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d201      	bcs.n	800a432 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800a42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a434:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f383 8810 	msr	PRIMASK, r3
}
 800a43c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a43e:	f3ef 8310 	mrs	r3, PRIMASK
 800a442:	617b      	str	r3, [r7, #20]
    return(posture);
 800a444:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a446:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a448:	b672      	cpsid	i
    return(int_posture);
 800a44a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800a44c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a454:	429a      	cmp	r2, r3
 800a456:	d002      	beq.n	800a45e <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800a458:	2301      	movs	r3, #1
 800a45a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a45c:	e006      	b.n	800a46c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	69db      	ldr	r3, [r3, #28]
 800a462:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a464:	429a      	cmp	r2, r3
 800a466:	d001      	beq.n	800a46c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800a468:	2301      	movs	r3, #1
 800a46a:	633b      	str	r3, [r7, #48]	@ 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a476:	643b      	str	r3, [r7, #64]	@ 0x40
 800a478:	e00c      	b.n	800a494 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	63bb      	str	r3, [r7, #56]	@ 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800a48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a48c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a48e:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800a490:	2300      	movs	r3, #0
 800a492:	633b      	str	r3, [r7, #48]	@ 0x30
            }

        } while (thread_ptr != head_ptr);
 800a494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	429a      	cmp	r2, r3
 800a49a:	d1c2      	bne.n	800a422 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800a49c:	4b19      	ldr	r3, [pc, #100]	@ (800a504 <_tx_mutex_prioritize+0x160>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	4a18      	ldr	r2, [pc, #96]	@ (800a504 <_tx_mutex_prioritize+0x160>)
 800a4a4:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800a4a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d01d      	beq.n	800a4ea <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800a4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800a4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4be:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4c4:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800a4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4d0:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800a4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4d6:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4dc:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4e2:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4e8:	619a      	str	r2, [r3, #24]
 800a4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ec:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f383 8810 	msr	PRIMASK, r3
}
 800a4f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a4f6:	f000 fe23 	bl	800b140 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800a4fa:	2300      	movs	r3, #0
#endif
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3748      	adds	r7, #72	@ 0x48
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20002c00 	.word	0x20002c00

0800a508 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b090      	sub	sp, #64	@ 0x40
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a512:	f3ef 8310 	mrs	r3, PRIMASK
 800a516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a51a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a51c:	b672      	cpsid	i
    return(int_posture);
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a526:	2b00      	cmp	r3, #0
 800a528:	d017      	beq.n	800a55a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d905      	bls.n	800a548 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a546:	e002      	b.n	800a54e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a550:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a554:	f383 8810 	msr	PRIMASK, r3
}
 800a558:	e089      	b.n	800a66e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800a55a:	4b47      	ldr	r3, [pc, #284]	@ (800a678 <_tx_mutex_priority_change+0x170>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a564:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800a566:	4b45      	ldr	r3, [pc, #276]	@ (800a67c <_tx_mutex_priority_change+0x174>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3302      	adds	r3, #2
 800a56c:	4a43      	ldr	r2, [pc, #268]	@ (800a67c <_tx_mutex_priority_change+0x174>)
 800a56e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	220e      	movs	r2, #14
 800a574:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a584:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	f383 8810 	msr	PRIMASK, r3
}
 800a58c:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 ff10 	bl	800b3b4 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a594:	f3ef 8310 	mrs	r3, PRIMASK
 800a598:	623b      	str	r3, [r7, #32]
    return(posture);
 800a59a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a59c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a59e:	b672      	cpsid	i
    return(int_posture);
 800a5a0:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800a5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d905      	bls.n	800a5c2 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a5c0:	e002      	b.n	800a5c8 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f383 8810 	msr	PRIMASK, r3
}
 800a5d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fded 	bl	800b1b4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5da:	f3ef 8310 	mrs	r3, PRIMASK
 800a5de:	617b      	str	r3, [r7, #20]
    return(posture);
 800a5e0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a5e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5e4:	b672      	cpsid	i
    return(int_posture);
 800a5e6:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800a5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800a5ea:	4b23      	ldr	r3, [pc, #140]	@ (800a678 <_tx_mutex_priority_change+0x170>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d034      	beq.n	800a662 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d130      	bne.n	800a662 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a608:	429a      	cmp	r2, r3
 800a60a:	d811      	bhi.n	800a630 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a610:	429a      	cmp	r2, r3
 800a612:	d126      	bne.n	800a662 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800a614:	4a18      	ldr	r2, [pc, #96]	@ (800a678 <_tx_mutex_priority_change+0x170>)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800a61a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d21f      	bcs.n	800a662 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a626:	4916      	ldr	r1, [pc, #88]	@ (800a680 <_tx_mutex_priority_change+0x178>)
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a62e:	e018      	b.n	800a662 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d212      	bcs.n	800a662 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a644:	429a      	cmp	r2, r3
 800a646:	d80c      	bhi.n	800a662 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800a648:	4a0b      	ldr	r2, [pc, #44]	@ (800a678 <_tx_mutex_priority_change+0x170>)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800a64e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d205      	bcs.n	800a662 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65a:	4909      	ldr	r1, [pc, #36]	@ (800a680 <_tx_mutex_priority_change+0x178>)
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a664:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f383 8810 	msr	PRIMASK, r3
}
 800a66c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800a66e:	bf00      	nop
 800a670:	3740      	adds	r7, #64	@ 0x40
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20002b6c 	.word	0x20002b6c
 800a67c:	20002c00 	.word	0x20002c00
 800a680:	20002b80 	.word	0x20002b80

0800a684 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b0a6      	sub	sp, #152	@ 0x98
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800a68c:	2320      	movs	r3, #32
 800a68e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a692:	f3ef 8310 	mrs	r3, PRIMASK
 800a696:	65fb      	str	r3, [r7, #92]	@ 0x5c
    return(posture);
 800a698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    int_posture = __get_interrupt_posture();
 800a69a:	65bb      	str	r3, [r7, #88]	@ 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800a69c:	b672      	cpsid	i
    return(int_posture);
 800a69e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800a6a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 81ff 	beq.w	800aaac <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800a6b4:	4ba3      	ldr	r3, [pc, #652]	@ (800a944 <_tx_mutex_put+0x2c0>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d00d      	beq.n	800a6e0 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800a6c4:	4ba0      	ldr	r3, [pc, #640]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d109      	bne.n	800a6e0 <_tx_mutex_put+0x5c>
 800a6cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6d0:	657b      	str	r3, [r7, #84]	@ 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6d4:	f383 8810 	msr	PRIMASK, r3
}
 800a6d8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800a6da:	231e      	movs	r3, #30
 800a6dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800a6e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	f040 81eb 	bne.w	800aac0 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	1e5a      	subs	r2, r3, #1
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <_tx_mutex_put+0x8e>
 800a6fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a700:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a704:	f383 8810 	msr	PRIMASK, r3
}
 800a708:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800a70a:	2300      	movs	r3, #0
 800a70c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a710:	e1d6      	b.n	800aac0 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800a712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <_tx_mutex_put+0xaa>
 800a718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a71c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a71e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a720:	f383 8810 	msr	PRIMASK, r3
}
 800a724:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800a726:	2300      	movs	r3, #0
 800a728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a72c:	e1c8      	b.n	800aac0 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800a72e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a734:	1e5a      	subs	r2, r3, #1
 800a736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a738:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800a73c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a73e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d104      	bne.n	800a750 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800a746:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a748:	2200      	movs	r2, #0
 800a74a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800a74e:	e019      	b.n	800a784 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a75c:	677b      	str	r3, [r7, #116]	@ 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800a75e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a762:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a764:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800a766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a768:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a76c:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800a76e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a770:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	429a      	cmp	r2, r3
 800a778:	d104      	bne.n	800a784 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800a77a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a77c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a780:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d110      	bne.n	800a7ae <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10c      	bne.n	800a7ae <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	60da      	str	r2, [r3, #12]
 800a79a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a79e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7a2:	f383 8810 	msr	PRIMASK, r3
}
 800a7a6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800a7ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7b2:	2b20      	cmp	r3, #32
 800a7b4:	f040 8184 	bne.w	800aac0 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800a7be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a7c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d155      	bne.n	800a87c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a7d0:	4b5d      	ldr	r3, [pc, #372]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a5c      	ldr	r2, [pc, #368]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a7de:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7e2:	f383 8810 	msr	PRIMASK, r3
}
 800a7e6:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800a7ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a7f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a7f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 800a7f8:	e01f      	b.n	800a83a <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800a7fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10b      	bne.n	800a81c <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800a804:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a80e:	429a      	cmp	r2, r3
 800a810:	d904      	bls.n	800a81c <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800a812:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800a81c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800a826:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a82c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a830:	429a      	cmp	r2, r3
 800a832:	d102      	bne.n	800a83a <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800a834:	2300      	movs	r3, #0
 800a836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 800a83a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1db      	bne.n	800a7fa <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a842:	f3ef 8310 	mrs	r3, PRIMASK
 800a846:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800a848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a84c:	b672      	cpsid	i
    return(int_posture);
 800a84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a850:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800a854:	4b3c      	ldr	r3, [pc, #240]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3b01      	subs	r3, #1
 800a85a:	4a3b      	ldr	r2, [pc, #236]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a85c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800a85e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a860:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a864:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800a868:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a86c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a870:	429a      	cmp	r2, r3
 800a872:	d203      	bcs.n	800a87c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800a874:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d920      	bls.n	800a8c6 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d11c      	bne.n	800a8c6 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800a88c:	4b2e      	ldr	r3, [pc, #184]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	4a2d      	ldr	r2, [pc, #180]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a89a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89e:	f383 8810 	msr	PRIMASK, r3
}
 800a8a2:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff fd7d 	bl	800a3a4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800a8b2:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8b4:	b672      	cpsid	i
    return(int_posture);
 800a8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800a8b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800a8bc:	4b22      	ldr	r3, [pc, #136]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	4a21      	ldr	r2, [pc, #132]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a8c4:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d13e      	bne.n	800a94c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a8ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	f383 8810 	msr	PRIMASK, r3
}
 800a8e4:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d006      	beq.n	800a908 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fe00 	bl	800a508 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a908:	f3ef 8310 	mrs	r3, PRIMASK
 800a90c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800a910:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a912:	b672      	cpsid	i
    return(int_posture);
 800a914:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800a916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800a91a:	4b0b      	ldr	r3, [pc, #44]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3b01      	subs	r3, #1
 800a920:	4a09      	ldr	r2, [pc, #36]	@ (800a948 <_tx_mutex_put+0x2c4>)
 800a922:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	60da      	str	r2, [r3, #12]
 800a92a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a92e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a932:	f383 8810 	msr	PRIMASK, r3
}
 800a936:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800a938:	f000 fc02 	bl	800b140 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800a93c:	2300      	movs	r3, #0
 800a93e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a942:	e0bd      	b.n	800aac0 <_tx_mutex_put+0x43c>
 800a944:	20002b68 	.word	0x20002b68
 800a948:	20002c00 	.word	0x20002c00
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d10a      	bne.n	800a970 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800a962:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2220      	movs	r2, #32
 800a96e:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800a970:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a972:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a976:	673b      	str	r3, [r7, #112]	@ 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800a978:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10a      	bne.n	800a994 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800a97e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	631a      	str	r2, [r3, #48]	@ 0x30
 800a992:	e016      	b.n	800a9c2 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800a994:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a99a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800a99e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a4:	677b      	str	r3, [r7, #116]	@ 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800a9a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800a9ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a9b8:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a9c0:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800a9c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a9d6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	1e5a      	subs	r2, r3, #1
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800a9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	619a      	str	r2, [r3, #24]
 800a9f4:	e00e      	b.n	800aa14 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800a9f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9fa:	66bb      	str	r3, [r7, #104]	@ 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa00:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800aa02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa06:	667b      	str	r3, [r7, #100]	@ 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800aa08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa0c:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800aa0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa12:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800aa14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa16:	2200      	movs	r2, #0
 800aa18:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800aa1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800aa22:	4b2a      	ldr	r3, [pc, #168]	@ (800aacc <_tx_mutex_put+0x448>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	4a28      	ldr	r2, [pc, #160]	@ (800aacc <_tx_mutex_put+0x448>)
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	f383 8810 	msr	PRIMASK, r3
}
 800aa38:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d12d      	bne.n	800aa9e <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d01c      	beq.n	800aa84 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff fcaa 	bl	800a3a4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa50:	f3ef 8310 	mrs	r3, PRIMASK
 800aa54:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aa56:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aa58:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa5a:	b672      	cpsid	i
    return(int_posture);
 800aa5c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800aa5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	663b      	str	r3, [r7, #96]	@ 0x60
                                    if (suspended_thread != TX_NULL)
 800aa68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800aa6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aa7a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f383 8810 	msr	PRIMASK, r3
}
 800aa82:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800aa84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aa88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa8a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d005      	beq.n	800aa9e <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800aa92:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800aa96:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800aa9a:	f7ff fd35 	bl	800a508 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800aa9e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800aaa0:	f000 fb88 	bl	800b1b4 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aaaa:	e009      	b.n	800aac0 <_tx_mutex_put+0x43c>
 800aaac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aab0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f383 8810 	msr	PRIMASK, r3
}
 800aab8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800aaba:	231e      	movs	r3, #30
 800aabc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    /* Return the completion status.  */
    return(status);
 800aac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3798      	adds	r7, #152	@ 0x98
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20002c00 	.word	0x20002c00

0800aad0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08a      	sub	sp, #40	@ 0x28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800aadc:	221c      	movs	r2, #28
 800aade:	2100      	movs	r1, #0
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f005 fc9d 	bl	8010420 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aaf2:	f3ef 8310 	mrs	r3, PRIMASK
 800aaf6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aaf8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aafa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aafc:	b672      	cpsid	i
    return(int_posture);
 800aafe:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800ab00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4a18      	ldr	r2, [pc, #96]	@ (800ab68 <_tx_semaphore_create+0x98>)
 800ab06:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800ab08:	4b18      	ldr	r3, [pc, #96]	@ (800ab6c <_tx_semaphore_create+0x9c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d109      	bne.n	800ab24 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800ab10:	4a17      	ldr	r2, [pc, #92]	@ (800ab70 <_tx_semaphore_create+0xa0>)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	619a      	str	r2, [r3, #24]
 800ab22:	e011      	b.n	800ab48 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800ab24:	4b12      	ldr	r3, [pc, #72]	@ (800ab70 <_tx_semaphore_create+0xa0>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6a3a      	ldr	r2, [r7, #32]
 800ab46:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800ab48:	4b08      	ldr	r3, [pc, #32]	@ (800ab6c <_tx_semaphore_create+0x9c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	4a07      	ldr	r2, [pc, #28]	@ (800ab6c <_tx_semaphore_create+0x9c>)
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f383 8810 	msr	PRIMASK, r3
}
 800ab5c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3728      	adds	r7, #40	@ 0x28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	53454d41 	.word	0x53454d41
 800ab6c:	20002b34 	.word	0x20002b34
 800ab70:	20002b30 	.word	0x20002b30

0800ab74 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b092      	sub	sp, #72	@ 0x48
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ab82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ab84:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab86:	b672      	cpsid	i
    return(int_posture);
 800ab88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800ab92:	4b3d      	ldr	r3, [pc, #244]	@ (800ac88 <_tx_semaphore_delete+0x114>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	4a3b      	ldr	r2, [pc, #236]	@ (800ac88 <_tx_semaphore_delete+0x114>)
 800ab9a:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800ab9c:	4b3a      	ldr	r3, [pc, #232]	@ (800ac88 <_tx_semaphore_delete+0x114>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d103      	bne.n	800abac <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800aba4:	4b39      	ldr	r3, [pc, #228]	@ (800ac8c <_tx_semaphore_delete+0x118>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	e013      	b.n	800abd4 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	63bb      	str	r3, [r7, #56]	@ 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	637b      	str	r3, [r7, #52]	@ 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800abb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abbc:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800abbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abc2:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800abc4:	4b31      	ldr	r3, [pc, #196]	@ (800ac8c <_tx_semaphore_delete+0x118>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d102      	bne.n	800abd4 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 800abce:	4a2f      	ldr	r2, [pc, #188]	@ (800ac8c <_tx_semaphore_delete+0x118>)
 800abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800abd4:	4b2e      	ldr	r3, [pc, #184]	@ (800ac90 <_tx_semaphore_delete+0x11c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3301      	adds	r3, #1
 800abda:	4a2d      	ldr	r2, [pc, #180]	@ (800ac90 <_tx_semaphore_delete+0x11c>)
 800abdc:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	647b      	str	r3, [r7, #68]	@ 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	643b      	str	r3, [r7, #64]	@ 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	611a      	str	r2, [r3, #16]
 800abf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abf8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfc:	f383 8810 	msr	PRIMASK, r3
}
 800ac00:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800ac02:	e024      	b.n	800ac4e <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800ac04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac06:	3b01      	subs	r3, #1
 800ac08:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ac0e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ac10:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ac12:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac14:	b672      	cpsid	i
    return(int_posture);
 800ac16:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ac1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800ac20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac22:	2201      	movs	r2, #1
 800ac24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800ac28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2c:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800ac2e:	4b18      	ldr	r3, [pc, #96]	@ (800ac90 <_tx_semaphore_delete+0x11c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3301      	adds	r3, #1
 800ac34:	4a16      	ldr	r2, [pc, #88]	@ (800ac90 <_tx_semaphore_delete+0x11c>)
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac3a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	f383 8810 	msr	PRIMASK, r3
}
 800ac42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ac44:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ac46:	f000 fab5 	bl	800b1b4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	647b      	str	r3, [r7, #68]	@ 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800ac4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1d7      	bne.n	800ac04 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac54:	f3ef 8310 	mrs	r3, PRIMASK
 800ac58:	613b      	str	r3, [r7, #16]
    return(posture);
 800ac5a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ac5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac5e:	b672      	cpsid	i
    return(int_posture);
 800ac60:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800ac62:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800ac64:	4b0a      	ldr	r3, [pc, #40]	@ (800ac90 <_tx_semaphore_delete+0x11c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	4a09      	ldr	r2, [pc, #36]	@ (800ac90 <_tx_semaphore_delete+0x11c>)
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac70:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f383 8810 	msr	PRIMASK, r3
}
 800ac78:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800ac7a:	f000 fa61 	bl	800b140 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3748      	adds	r7, #72	@ 0x48
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20002b34 	.word	0x20002b34
 800ac8c:	20002b30 	.word	0x20002b30
 800ac90:	20002c00 	.word	0x20002c00

0800ac94 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08c      	sub	sp, #48	@ 0x30
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac9c:	f3ef 8310 	mrs	r3, PRIMASK
 800aca0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aca2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aca4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aca6:	b672      	cpsid	i
    return(int_posture);
 800aca8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800acaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800acb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10a      	bne.n	800acce <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	609a      	str	r2, [r3, #8]
 800acc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	f383 8810 	msr	PRIMASK, r3
}
 800accc:	e033      	b.n	800ad36 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800acd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd6:	3b01      	subs	r3, #1
 800acd8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800acda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d103      	bne.n	800ace8 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	60da      	str	r2, [r3, #12]
 800ace6:	e00e      	b.n	800ad06 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acec:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a3a      	ldr	r2, [r7, #32]
 800acf2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acf8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	69fa      	ldr	r2, [r7, #28]
 800acfe:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	6a3a      	ldr	r2, [r7, #32]
 800ad04:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad0a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	2200      	movs	r2, #0
 800ad10:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ad12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ad1a:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <_tx_semaphore_put+0xac>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	4a07      	ldr	r2, [pc, #28]	@ (800ad40 <_tx_semaphore_put+0xac>)
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f383 8810 	msr	PRIMASK, r3
}
 800ad2e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ad30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad32:	f000 fa3f 	bl	800b1b4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3730      	adds	r7, #48	@ 0x30
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	20002c00 	.word	0x20002c00

0800ad44 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b092      	sub	sp, #72	@ 0x48
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ad52:	2300      	movs	r3, #0
 800ad54:	643b      	str	r3, [r7, #64]	@ 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ad56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad58:	21ef      	movs	r1, #239	@ 0xef
 800ad5a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ad5c:	f005 fb60 	bl	8010420 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ad60:	22b0      	movs	r2, #176	@ 0xb0
 800ad62:	2100      	movs	r1, #0
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f005 fb5b 	bl	8010420 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad80:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad86:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad9a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ada0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800adaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800adae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adb0:	3b01      	subs	r3, #1
 800adb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800adb4:	4413      	add	r3, r2
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800adbc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800adbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d007      	beq.n	800add6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800add4:	e006      	b.n	800ade4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adda:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ade0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2203      	movs	r2, #3
 800ade8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	4a48      	ldr	r2, [pc, #288]	@ (800af10 <_tx_thread_create+0x1cc>)
 800adee:	655a      	str	r2, [r3, #84]	@ 0x54
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800adf6:	4947      	ldr	r1, [pc, #284]	@ (800af14 <_tx_thread_create+0x1d0>)
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7f5 faeb 	bl	80003d4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800adfe:	f3ef 8310 	mrs	r3, PRIMASK
 800ae02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ae04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ae06:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae08:	b672      	cpsid	i
    return(int_posture);
 800ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ae0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	4a41      	ldr	r2, [pc, #260]	@ (800af18 <_tx_thread_create+0x1d4>)
 800ae12:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ae14:	4b41      	ldr	r3, [pc, #260]	@ (800af1c <_tx_thread_create+0x1d8>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10b      	bne.n	800ae34 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ae1c:	4a40      	ldr	r2, [pc, #256]	@ (800af20 <_tx_thread_create+0x1dc>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800ae32:	e016      	b.n	800ae62 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ae34:	4b3a      	ldr	r3, [pc, #232]	@ (800af20 <_tx_thread_create+0x1dc>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ae3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae40:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ae42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ae62:	4b2e      	ldr	r3, [pc, #184]	@ (800af1c <_tx_thread_create+0x1d8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3301      	adds	r3, #1
 800ae68:	4a2c      	ldr	r2, [pc, #176]	@ (800af1c <_tx_thread_create+0x1d8>)
 800ae6a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ae6c:	4b2d      	ldr	r3, [pc, #180]	@ (800af24 <_tx_thread_create+0x1e0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3301      	adds	r3, #1
 800ae72:	4a2c      	ldr	r2, [pc, #176]	@ (800af24 <_tx_thread_create+0x1e0>)
 800ae74:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ae76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d129      	bne.n	800aed0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ae7c:	f3ef 8305 	mrs	r3, IPSR
 800ae80:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800ae82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ae84:	4b28      	ldr	r3, [pc, #160]	@ (800af28 <_tx_thread_create+0x1e4>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ae8e:	d30d      	bcc.n	800aeac <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ae90:	4b26      	ldr	r3, [pc, #152]	@ (800af2c <_tx_thread_create+0x1e8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ae96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d009      	beq.n	800aeb0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ae9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea0:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800aea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aeaa:	e001      	b.n	800aeb0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800aeac:	2300      	movs	r3, #0
 800aeae:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	f383 8810 	msr	PRIMASK, r3
}
 800aeba:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 f979 	bl	800b1b4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800aec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d01e      	beq.n	800af06 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800aec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aecc:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aece:	e01a      	b.n	800af06 <_tx_thread_create+0x1c2>
 800aed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f383 8810 	msr	PRIMASK, r3
}
 800aeda:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aedc:	f3ef 8310 	mrs	r3, PRIMASK
 800aee0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aee2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aee4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aee6:	b672      	cpsid	i
    return(int_posture);
 800aee8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800aeea:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800aeec:	4b0d      	ldr	r3, [pc, #52]	@ (800af24 <_tx_thread_create+0x1e0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	4a0c      	ldr	r2, [pc, #48]	@ (800af24 <_tx_thread_create+0x1e0>)
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	f383 8810 	msr	PRIMASK, r3
}
 800af00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800af02:	f000 f91d 	bl	800b140 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3748      	adds	r7, #72	@ 0x48
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	0800b689 	.word	0x0800b689
 800af14:	0800afa9 	.word	0x0800afa9
 800af18:	54485244 	.word	0x54485244
 800af1c:	20002b74 	.word	0x20002b74
 800af20:	20002b70 	.word	0x20002b70
 800af24:	20002c00 	.word	0x20002c00
 800af28:	2000000c 	.word	0x2000000c
 800af2c:	20002b6c 	.word	0x20002b6c

0800af30 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800af34:	4b12      	ldr	r3, [pc, #72]	@ (800af80 <_tx_thread_initialize+0x50>)
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800af3a:	4b12      	ldr	r3, [pc, #72]	@ (800af84 <_tx_thread_initialize+0x54>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800af40:	4b11      	ldr	r3, [pc, #68]	@ (800af88 <_tx_thread_initialize+0x58>)
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800af46:	4b11      	ldr	r3, [pc, #68]	@ (800af8c <_tx_thread_initialize+0x5c>)
 800af48:	2220      	movs	r2, #32
 800af4a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800af4c:	2280      	movs	r2, #128	@ 0x80
 800af4e:	2100      	movs	r1, #0
 800af50:	480f      	ldr	r0, [pc, #60]	@ (800af90 <_tx_thread_initialize+0x60>)
 800af52:	f005 fa65 	bl	8010420 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800af56:	4b0f      	ldr	r3, [pc, #60]	@ (800af94 <_tx_thread_initialize+0x64>)
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800af5c:	4b0e      	ldr	r3, [pc, #56]	@ (800af98 <_tx_thread_initialize+0x68>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800af62:	4b0e      	ldr	r3, [pc, #56]	@ (800af9c <_tx_thread_initialize+0x6c>)
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800af68:	4b0d      	ldr	r3, [pc, #52]	@ (800afa0 <_tx_thread_initialize+0x70>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800af6e:	4b0d      	ldr	r3, [pc, #52]	@ (800afa4 <_tx_thread_initialize+0x74>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800af76:	4a0b      	ldr	r2, [pc, #44]	@ (800afa4 <_tx_thread_initialize+0x74>)
 800af78:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800af7a:	bf00      	nop
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20002b68 	.word	0x20002b68
 800af84:	20002b6c 	.word	0x20002b6c
 800af88:	20002b78 	.word	0x20002b78
 800af8c:	20002b7c 	.word	0x20002b7c
 800af90:	20002b80 	.word	0x20002b80
 800af94:	20002b70 	.word	0x20002b70
 800af98:	20002b74 	.word	0x20002b74
 800af9c:	20002c00 	.word	0x20002c00
 800afa0:	20002c04 	.word	0x20002c04
 800afa4:	20002c08 	.word	0x20002c08

0800afa8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800afae:	4b21      	ldr	r3, [pc, #132]	@ (800b034 <_tx_thread_shell_entry+0x8c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb8:	69fa      	ldr	r2, [r7, #28]
 800afba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800afbc:	4610      	mov	r0, r2
 800afbe:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800afc0:	4b1d      	ldr	r3, [pc, #116]	@ (800b038 <_tx_thread_shell_entry+0x90>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800afc8:	4b1b      	ldr	r3, [pc, #108]	@ (800b038 <_tx_thread_shell_entry+0x90>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69f8      	ldr	r0, [r7, #28]
 800afce:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afd0:	f3ef 8310 	mrs	r3, PRIMASK
 800afd4:	607b      	str	r3, [r7, #4]
    return(posture);
 800afd6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800afd8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afda:	b672      	cpsid	i
    return(int_posture);
 800afdc:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800afde:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	2201      	movs	r2, #1
 800afe4:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	2201      	movs	r2, #1
 800afea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2200      	movs	r2, #0
 800aff0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800aff2:	4b12      	ldr	r3, [pc, #72]	@ (800b03c <_tx_thread_shell_entry+0x94>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3301      	adds	r3, #1
 800aff8:	4a10      	ldr	r2, [pc, #64]	@ (800b03c <_tx_thread_shell_entry+0x94>)
 800affa:	6013      	str	r3, [r2, #0]
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f383 8810 	msr	PRIMASK, r3
}
 800b006:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b008:	f3ef 8314 	mrs	r3, CONTROL
 800b00c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800b00e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800b010:	617b      	str	r3, [r7, #20]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f023 0304 	bic.w	r3, r3, #4
 800b018:	617b      	str	r3, [r7, #20]
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f383 8814 	msr	CONTROL, r3
}
 800b024:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b026:	69f8      	ldr	r0, [r7, #28]
 800b028:	f000 f9c4 	bl	800b3b4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b02c:	bf00      	nop
 800b02e:	3720      	adds	r7, #32
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	20002b68 	.word	0x20002b68
 800b038:	20002c04 	.word	0x20002c04
 800b03c:	20002c00 	.word	0x20002c00

0800b040 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08e      	sub	sp, #56	@ 0x38
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b048:	f3ef 8310 	mrs	r3, PRIMASK
 800b04c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b050:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b052:	b672      	cpsid	i
    return(int_posture);
 800b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b056:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b058:	4b35      	ldr	r3, [pc, #212]	@ (800b130 <_tx_thread_sleep+0xf0>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800b05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d108      	bne.n	800b076 <_tx_thread_sleep+0x36>
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	f383 8810 	msr	PRIMASK, r3
}
 800b06e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b070:	2313      	movs	r3, #19
 800b072:	637b      	str	r3, [r7, #52]	@ 0x34
 800b074:	e056      	b.n	800b124 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b076:	f3ef 8305 	mrs	r3, IPSR
 800b07a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b07c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b07e:	4b2d      	ldr	r3, [pc, #180]	@ (800b134 <_tx_thread_sleep+0xf4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4313      	orrs	r3, r2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d008      	beq.n	800b09a <_tx_thread_sleep+0x5a>
 800b088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	f383 8810 	msr	PRIMASK, r3
}
 800b092:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b094:	2313      	movs	r3, #19
 800b096:	637b      	str	r3, [r7, #52]	@ 0x34
 800b098:	e044      	b.n	800b124 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800b09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09c:	4a26      	ldr	r2, [pc, #152]	@ (800b138 <_tx_thread_sleep+0xf8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d108      	bne.n	800b0b4 <_tx_thread_sleep+0x74>
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f383 8810 	msr	PRIMASK, r3
}
 800b0ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b0ae:	2313      	movs	r3, #19
 800b0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0b2:	e037      	b.n	800b124 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d108      	bne.n	800b0cc <_tx_thread_sleep+0x8c>
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f383 8810 	msr	PRIMASK, r3
}
 800b0c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ca:	e02b      	b.n	800b124 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b0cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b13c <_tx_thread_sleep+0xfc>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d008      	beq.n	800b0e6 <_tx_thread_sleep+0xa6>
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f383 8810 	msr	PRIMASK, r3
}
 800b0de:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800b0e0:	2313      	movs	r3, #19
 800b0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0e4:	e01e      	b.n	800b124 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800b0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e8:	2204      	movs	r2, #4
 800b0ea:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800b0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b100:	4b0e      	ldr	r3, [pc, #56]	@ (800b13c <_tx_thread_sleep+0xfc>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3301      	adds	r3, #1
 800b106:	4a0d      	ldr	r2, [pc, #52]	@ (800b13c <_tx_thread_sleep+0xfc>)
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	f383 8810 	msr	PRIMASK, r3
}
 800b114:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b116:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b118:	f000 f94c 	bl	800b3b4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b122:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800b124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b126:	4618      	mov	r0, r3
 800b128:	3738      	adds	r7, #56	@ 0x38
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20002b68 	.word	0x20002b68
 800b134:	2000000c 	.word	0x2000000c
 800b138:	20002cb0 	.word	0x20002cb0
 800b13c:	20002c00 	.word	0x20002c00

0800b140 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b140:	b480      	push	{r7}
 800b142:	b089      	sub	sp, #36	@ 0x24
 800b144:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b146:	4b17      	ldr	r3, [pc, #92]	@ (800b1a4 <_tx_thread_system_preempt_check+0x64>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d121      	bne.n	800b196 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b152:	4b15      	ldr	r3, [pc, #84]	@ (800b1a8 <_tx_thread_system_preempt_check+0x68>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b158:	4b14      	ldr	r3, [pc, #80]	@ (800b1ac <_tx_thread_system_preempt_check+0x6c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	429a      	cmp	r2, r3
 800b164:	d017      	beq.n	800b196 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b166:	4b12      	ldr	r3, [pc, #72]	@ (800b1b0 <_tx_thread_system_preempt_check+0x70>)
 800b168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b16c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b16e:	f3ef 8305 	mrs	r3, IPSR
 800b172:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b174:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10c      	bne.n	800b194 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b17a:	f3ef 8310 	mrs	r3, PRIMASK
 800b17e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b180:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b182:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b184:	b662      	cpsie	i
}
 800b186:	bf00      	nop
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f383 8810 	msr	PRIMASK, r3
}
 800b192:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b194:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b196:	bf00      	nop
 800b198:	3724      	adds	r7, #36	@ 0x24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	20002c00 	.word	0x20002c00
 800b1a8:	20002b68 	.word	0x20002b68
 800b1ac:	20002b6c 	.word	0x20002b6c
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b096      	sub	sp, #88	@ 0x58
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c0:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800b1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800b1c4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1c6:	b672      	cpsid	i
    return(int_posture);
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b1ca:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	334c      	adds	r3, #76	@ 0x4c
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fb91 	bl	800b900 <_tx_timer_system_deactivate>
 800b1de:	e002      	b.n	800b1e6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b1e6:	4b6c      	ldr	r3, [pc, #432]	@ (800b398 <_tx_thread_system_resume+0x1e4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	4a6a      	ldr	r2, [pc, #424]	@ (800b398 <_tx_thread_system_resume+0x1e4>)
 800b1ee:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f040 8083 	bne.w	800b300 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 8097 	beq.w	800b332 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d172      	bne.n	800b2f2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b216:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b218:	4a60      	ldr	r2, [pc, #384]	@ (800b39c <_tx_thread_system_resume+0x1e8>)
 800b21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b220:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800b222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b224:	2b00      	cmp	r3, #0
 800b226:	d154      	bne.n	800b2d2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b228:	495c      	ldr	r1, [pc, #368]	@ (800b39c <_tx_thread_system_resume+0x1e8>)
 800b22a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b23e:	2201      	movs	r2, #1
 800b240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b242:	fa02 f303 	lsl.w	r3, r2, r3
 800b246:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b248:	4b55      	ldr	r3, [pc, #340]	@ (800b3a0 <_tx_thread_system_resume+0x1ec>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b24e:	4313      	orrs	r3, r2
 800b250:	4a53      	ldr	r2, [pc, #332]	@ (800b3a0 <_tx_thread_system_resume+0x1ec>)
 800b252:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b254:	4b53      	ldr	r3, [pc, #332]	@ (800b3a4 <_tx_thread_system_resume+0x1f0>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d269      	bcs.n	800b332 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b25e:	4a51      	ldr	r2, [pc, #324]	@ (800b3a4 <_tx_thread_system_resume+0x1f0>)
 800b260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b262:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b264:	4b50      	ldr	r3, [pc, #320]	@ (800b3a8 <_tx_thread_system_resume+0x1f4>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d103      	bne.n	800b278 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b270:	4a4d      	ldr	r2, [pc, #308]	@ (800b3a8 <_tx_thread_system_resume+0x1f4>)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	e05c      	b.n	800b332 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b27a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b27c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b27e:	429a      	cmp	r2, r3
 800b280:	d257      	bcs.n	800b332 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b282:	4a49      	ldr	r2, [pc, #292]	@ (800b3a8 <_tx_thread_system_resume+0x1f4>)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28e:	f383 8810 	msr	PRIMASK, r3
}
 800b292:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b294:	4b40      	ldr	r3, [pc, #256]	@ (800b398 <_tx_thread_system_resume+0x1e4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b29a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d174      	bne.n	800b38a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b2a0:	4b42      	ldr	r3, [pc, #264]	@ (800b3ac <_tx_thread_system_resume+0x1f8>)
 800b2a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2a8:	f3ef 8305 	mrs	r3, IPSR
 800b2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800b2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10c      	bne.n	800b2ce <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2b8:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800b2bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b2be:	b662      	cpsie	i
}
 800b2c0:	bf00      	nop
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	f383 8810 	msr	PRIMASK, r3
}
 800b2cc:	bf00      	nop
}
 800b2ce:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b2d0:	e05b      	b.n	800b38a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b2d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b2de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2e8:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2ee:	621a      	str	r2, [r3, #32]
 800b2f0:	e01f      	b.n	800b332 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b2fe:	e018      	b.n	800b332 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b304:	2b01      	cmp	r3, #1
 800b306:	d014      	beq.n	800b332 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d010      	beq.n	800b332 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b314:	2b00      	cmp	r3, #0
 800b316:	d106      	bne.n	800b326 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	631a      	str	r2, [r3, #48]	@ 0x30
 800b324:	e005      	b.n	800b332 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2203      	movs	r2, #3
 800b330:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b332:	4b1f      	ldr	r3, [pc, #124]	@ (800b3b0 <_tx_thread_system_resume+0x1fc>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b33a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	f383 8810 	msr	PRIMASK, r3
}
 800b342:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b344:	4b18      	ldr	r3, [pc, #96]	@ (800b3a8 <_tx_thread_system_resume+0x1f4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d020      	beq.n	800b390 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b34e:	4b12      	ldr	r3, [pc, #72]	@ (800b398 <_tx_thread_system_resume+0x1e4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800b354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d11a      	bne.n	800b390 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b35a:	4b14      	ldr	r3, [pc, #80]	@ (800b3ac <_tx_thread_system_resume+0x1f8>)
 800b35c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b360:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b362:	f3ef 8305 	mrs	r3, IPSR
 800b366:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b368:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10f      	bne.n	800b38e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b36e:	f3ef 8310 	mrs	r3, PRIMASK
 800b372:	613b      	str	r3, [r7, #16]
    return(posture);
 800b374:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b376:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b378:	b662      	cpsie	i
}
 800b37a:	bf00      	nop
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	f383 8810 	msr	PRIMASK, r3
}
 800b386:	bf00      	nop
}
 800b388:	e001      	b.n	800b38e <_tx_thread_system_resume+0x1da>
                                return;
 800b38a:	bf00      	nop
 800b38c:	e000      	b.n	800b390 <_tx_thread_system_resume+0x1dc>
 800b38e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b390:	3758      	adds	r7, #88	@ 0x58
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20002c00 	.word	0x20002c00
 800b39c:	20002b80 	.word	0x20002b80
 800b3a0:	20002b78 	.word	0x20002b78
 800b3a4:	20002b7c 	.word	0x20002b7c
 800b3a8:	20002b6c 	.word	0x20002b6c
 800b3ac:	e000ed04 	.word	0xe000ed04
 800b3b0:	20002b68 	.word	0x20002b68

0800b3b4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b09e      	sub	sp, #120	@ 0x78
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b3bc:	4b81      	ldr	r3, [pc, #516]	@ (800b5c4 <_tx_thread_system_suspend+0x210>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800b3c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800b3ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3cc:	b672      	cpsid	i
    return(int_posture);
 800b3ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b3d0:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d112      	bne.n	800b400 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3de:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b3e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d008      	beq.n	800b3f8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b3e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ec:	d004      	beq.n	800b3f8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	334c      	adds	r3, #76	@ 0x4c
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fa22 	bl	800b83c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	4a72      	ldr	r2, [pc, #456]	@ (800b5c8 <_tx_thread_system_suspend+0x214>)
 800b3fe:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b400:	4b72      	ldr	r3, [pc, #456]	@ (800b5cc <_tx_thread_system_suspend+0x218>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3b01      	subs	r3, #1
 800b406:	4a71      	ldr	r2, [pc, #452]	@ (800b5cc <_tx_thread_system_suspend+0x218>)
 800b408:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b40e:	2b01      	cmp	r3, #1
 800b410:	f040 80a6 	bne.w	800b560 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b426:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d015      	beq.n	800b45a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b432:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b436:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b438:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b43a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b43c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b43e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b440:	4a63      	ldr	r2, [pc, #396]	@ (800b5d0 <_tx_thread_system_suspend+0x21c>)
 800b442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d157      	bne.n	800b4fe <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b44e:	4960      	ldr	r1, [pc, #384]	@ (800b5d0 <_tx_thread_system_suspend+0x21c>)
 800b450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b452:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b458:	e051      	b.n	800b4fe <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b45a:	4a5d      	ldr	r2, [pc, #372]	@ (800b5d0 <_tx_thread_system_suspend+0x21c>)
 800b45c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b45e:	2100      	movs	r1, #0
 800b460:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b464:	2201      	movs	r2, #1
 800b466:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b468:	fa02 f303 	lsl.w	r3, r2, r3
 800b46c:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b46e:	4b59      	ldr	r3, [pc, #356]	@ (800b5d4 <_tx_thread_system_suspend+0x220>)
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b474:	43db      	mvns	r3, r3
 800b476:	4013      	ands	r3, r2
 800b478:	4a56      	ldr	r2, [pc, #344]	@ (800b5d4 <_tx_thread_system_suspend+0x220>)
 800b47a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b47c:	2300      	movs	r3, #0
 800b47e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b480:	4b54      	ldr	r3, [pc, #336]	@ (800b5d4 <_tx_thread_system_suspend+0x220>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d12b      	bne.n	800b4e4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b48c:	4b52      	ldr	r3, [pc, #328]	@ (800b5d8 <_tx_thread_system_suspend+0x224>)
 800b48e:	2220      	movs	r2, #32
 800b490:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b492:	4b52      	ldr	r3, [pc, #328]	@ (800b5dc <_tx_thread_system_suspend+0x228>)
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b49a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b49c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b49e:	f383 8810 	msr	PRIMASK, r3
}
 800b4a2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b4a4:	4b49      	ldr	r3, [pc, #292]	@ (800b5cc <_tx_thread_system_suspend+0x218>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800b4aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f040 8081 	bne.w	800b5b4 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b4b2:	4b4b      	ldr	r3, [pc, #300]	@ (800b5e0 <_tx_thread_system_suspend+0x22c>)
 800b4b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4ba:	f3ef 8305 	mrs	r3, IPSR
 800b4be:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800b4c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10c      	bne.n	800b4e0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800b4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800b4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b4d0:	b662      	cpsie	i
}
 800b4d2:	bf00      	nop
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d6:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4da:	f383 8810 	msr	PRIMASK, r3
}
 800b4de:	bf00      	nop
}
 800b4e0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b4e2:	e067      	b.n	800b5b4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b4e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4e6:	fa93 f3a3 	rbit	r3, r3
 800b4ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4ee:	fab3 f383 	clz	r3, r3
 800b4f2:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b4f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b4f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4f8:	4413      	add	r3, r2
 800b4fa:	4a37      	ldr	r2, [pc, #220]	@ (800b5d8 <_tx_thread_system_suspend+0x224>)
 800b4fc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b4fe:	4b37      	ldr	r3, [pc, #220]	@ (800b5dc <_tx_thread_system_suspend+0x228>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	429a      	cmp	r2, r3
 800b506:	d12b      	bne.n	800b560 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b508:	4b33      	ldr	r3, [pc, #204]	@ (800b5d8 <_tx_thread_system_suspend+0x224>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a30      	ldr	r2, [pc, #192]	@ (800b5d0 <_tx_thread_system_suspend+0x21c>)
 800b50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b512:	4a32      	ldr	r2, [pc, #200]	@ (800b5dc <_tx_thread_system_suspend+0x228>)
 800b514:	6013      	str	r3, [r2, #0]
 800b516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b518:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51c:	f383 8810 	msr	PRIMASK, r3
}
 800b520:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b522:	4b2a      	ldr	r3, [pc, #168]	@ (800b5cc <_tx_thread_system_suspend+0x218>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800b528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d144      	bne.n	800b5b8 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b52e:	4b2c      	ldr	r3, [pc, #176]	@ (800b5e0 <_tx_thread_system_suspend+0x22c>)
 800b530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b534:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b536:	f3ef 8305 	mrs	r3, IPSR
 800b53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800b53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10c      	bne.n	800b55c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b542:	f3ef 8310 	mrs	r3, PRIMASK
 800b546:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800b54a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b54c:	b662      	cpsie	i
}
 800b54e:	bf00      	nop
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	f383 8810 	msr	PRIMASK, r3
}
 800b55a:	bf00      	nop
}
 800b55c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b55e:	e02b      	b.n	800b5b8 <_tx_thread_system_suspend+0x204>
 800b560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b562:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f383 8810 	msr	PRIMASK, r3
}
 800b56a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b56c:	4b1b      	ldr	r3, [pc, #108]	@ (800b5dc <_tx_thread_system_suspend+0x228>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b572:	429a      	cmp	r2, r3
 800b574:	d022      	beq.n	800b5bc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b576:	4b15      	ldr	r3, [pc, #84]	@ (800b5cc <_tx_thread_system_suspend+0x218>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800b57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d11c      	bne.n	800b5bc <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b582:	4b17      	ldr	r3, [pc, #92]	@ (800b5e0 <_tx_thread_system_suspend+0x22c>)
 800b584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b588:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b58a:	f3ef 8305 	mrs	r3, IPSR
 800b58e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b590:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10c      	bne.n	800b5b0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b596:	f3ef 8310 	mrs	r3, PRIMASK
 800b59a:	617b      	str	r3, [r7, #20]
    return(posture);
 800b59c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b59e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b5a0:	b662      	cpsie	i
}
 800b5a2:	bf00      	nop
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f383 8810 	msr	PRIMASK, r3
}
 800b5ae:	bf00      	nop
}
 800b5b0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b5b2:	e003      	b.n	800b5bc <_tx_thread_system_suspend+0x208>
                return;
 800b5b4:	bf00      	nop
 800b5b6:	e002      	b.n	800b5be <_tx_thread_system_suspend+0x20a>
            return;
 800b5b8:	bf00      	nop
 800b5ba:	e000      	b.n	800b5be <_tx_thread_system_suspend+0x20a>
    return;
 800b5bc:	bf00      	nop
}
 800b5be:	3778      	adds	r7, #120	@ 0x78
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	20002b68 	.word	0x20002b68
 800b5c8:	2000316c 	.word	0x2000316c
 800b5cc:	20002c00 	.word	0x20002c00
 800b5d0:	20002b80 	.word	0x20002b80
 800b5d4:	20002b78 	.word	0x20002b78
 800b5d8:	20002b7c 	.word	0x20002b7c
 800b5dc:	20002b6c 	.word	0x20002b6c
 800b5e0:	e000ed04 	.word	0xe000ed04

0800b5e4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b5ea:	4b21      	ldr	r3, [pc, #132]	@ (800b670 <_tx_thread_time_slice+0x8c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b5f4:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b5f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5fa:	b672      	cpsid	i
    return(int_posture);
 800b5fc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b5fe:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b600:	4b1c      	ldr	r3, [pc, #112]	@ (800b674 <_tx_thread_time_slice+0x90>)
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d024      	beq.n	800b656 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b610:	2b00      	cmp	r3, #0
 800b612:	d120      	bne.n	800b656 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	69da      	ldr	r2, [r3, #28]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	4a15      	ldr	r2, [pc, #84]	@ (800b678 <_tx_thread_time_slice+0x94>)
 800b622:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d013      	beq.n	800b656 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b636:	429a      	cmp	r2, r3
 800b638:	d10d      	bne.n	800b656 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	6a12      	ldr	r2, [r2, #32]
 800b642:	490e      	ldr	r1, [pc, #56]	@ (800b67c <_tx_thread_time_slice+0x98>)
 800b644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b648:	4b0d      	ldr	r3, [pc, #52]	@ (800b680 <_tx_thread_time_slice+0x9c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a0b      	ldr	r2, [pc, #44]	@ (800b67c <_tx_thread_time_slice+0x98>)
 800b64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b652:	4a0c      	ldr	r2, [pc, #48]	@ (800b684 <_tx_thread_time_slice+0xa0>)
 800b654:	6013      	str	r3, [r2, #0]
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f383 8810 	msr	PRIMASK, r3
}
 800b660:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20002b68 	.word	0x20002b68
 800b674:	20002c10 	.word	0x20002c10
 800b678:	2000316c 	.word	0x2000316c
 800b67c:	20002b80 	.word	0x20002b80
 800b680:	20002b7c 	.word	0x20002b7c
 800b684:	20002b6c 	.word	0x20002b6c

0800b688 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08a      	sub	sp, #40	@ 0x28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b694:	f3ef 8310 	mrs	r3, PRIMASK
 800b698:	617b      	str	r3, [r7, #20]
    return(posture);
 800b69a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b69c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b69e:	b672      	cpsid	i
    return(int_posture);
 800b6a0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b6a2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d10e      	bne.n	800b6ca <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b6ac:	4b13      	ldr	r3, [pc, #76]	@ (800b6fc <_tx_thread_timeout+0x74>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	4a12      	ldr	r2, [pc, #72]	@ (800b6fc <_tx_thread_timeout+0x74>)
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f383 8810 	msr	PRIMASK, r3
}
 800b6c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b6c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b6c4:	f7ff fd76 	bl	800b1b4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b6c8:	e013      	b.n	800b6f2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b6ce:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f383 8810 	msr	PRIMASK, r3
}
 800b6e2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	69b9      	ldr	r1, [r7, #24]
 800b6ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b6f0:	4798      	blx	r3
}
 800b6f2:	bf00      	nop
 800b6f4:	3728      	adds	r7, #40	@ 0x28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20002c00 	.word	0x20002c00

0800b700 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b706:	f3ef 8310 	mrs	r3, PRIMASK
 800b70a:	607b      	str	r3, [r7, #4]
    return(posture);
 800b70c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b70e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b710:	b672      	cpsid	i
    return(int_posture);
 800b712:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b714:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b716:	4b09      	ldr	r3, [pc, #36]	@ (800b73c <_tx_timer_expiration_process+0x3c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3301      	adds	r3, #1
 800b71c:	4a07      	ldr	r2, [pc, #28]	@ (800b73c <_tx_timer_expiration_process+0x3c>)
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f383 8810 	msr	PRIMASK, r3
}
 800b72a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b72c:	4804      	ldr	r0, [pc, #16]	@ (800b740 <_tx_timer_expiration_process+0x40>)
 800b72e:	f7ff fd41 	bl	800b1b4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b732:	bf00      	nop
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20002c00 	.word	0x20002c00
 800b740:	20002cb0 	.word	0x20002cb0

0800b744 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b744:	b590      	push	{r4, r7, lr}
 800b746:	b089      	sub	sp, #36	@ 0x24
 800b748:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b74a:	4b28      	ldr	r3, [pc, #160]	@ (800b7ec <_tx_timer_initialize+0xa8>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b750:	4b27      	ldr	r3, [pc, #156]	@ (800b7f0 <_tx_timer_initialize+0xac>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b756:	4b27      	ldr	r3, [pc, #156]	@ (800b7f4 <_tx_timer_initialize+0xb0>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b75c:	4b26      	ldr	r3, [pc, #152]	@ (800b7f8 <_tx_timer_initialize+0xb4>)
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b762:	4b26      	ldr	r3, [pc, #152]	@ (800b7fc <_tx_timer_initialize+0xb8>)
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b768:	2280      	movs	r2, #128	@ 0x80
 800b76a:	2100      	movs	r1, #0
 800b76c:	4824      	ldr	r0, [pc, #144]	@ (800b800 <_tx_timer_initialize+0xbc>)
 800b76e:	f004 fe57 	bl	8010420 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b772:	4b24      	ldr	r3, [pc, #144]	@ (800b804 <_tx_timer_initialize+0xc0>)
 800b774:	4a22      	ldr	r2, [pc, #136]	@ (800b800 <_tx_timer_initialize+0xbc>)
 800b776:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b778:	4b23      	ldr	r3, [pc, #140]	@ (800b808 <_tx_timer_initialize+0xc4>)
 800b77a:	4a21      	ldr	r2, [pc, #132]	@ (800b800 <_tx_timer_initialize+0xbc>)
 800b77c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b77e:	4b23      	ldr	r3, [pc, #140]	@ (800b80c <_tx_timer_initialize+0xc8>)
 800b780:	4a23      	ldr	r2, [pc, #140]	@ (800b810 <_tx_timer_initialize+0xcc>)
 800b782:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b784:	4b21      	ldr	r3, [pc, #132]	@ (800b80c <_tx_timer_initialize+0xc8>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3304      	adds	r3, #4
 800b78a:	4a20      	ldr	r2, [pc, #128]	@ (800b80c <_tx_timer_initialize+0xc8>)
 800b78c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b78e:	4b21      	ldr	r3, [pc, #132]	@ (800b814 <_tx_timer_initialize+0xd0>)
 800b790:	4a21      	ldr	r2, [pc, #132]	@ (800b818 <_tx_timer_initialize+0xd4>)
 800b792:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b794:	4b21      	ldr	r3, [pc, #132]	@ (800b81c <_tx_timer_initialize+0xd8>)
 800b796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b79a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b79c:	4b20      	ldr	r3, [pc, #128]	@ (800b820 <_tx_timer_initialize+0xdc>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b7a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b814 <_tx_timer_initialize+0xd0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b81c <_tx_timer_initialize+0xd8>)
 800b7a8:	6812      	ldr	r2, [r2, #0]
 800b7aa:	491d      	ldr	r1, [pc, #116]	@ (800b820 <_tx_timer_initialize+0xdc>)
 800b7ac:	6809      	ldr	r1, [r1, #0]
 800b7ae:	481c      	ldr	r0, [pc, #112]	@ (800b820 <_tx_timer_initialize+0xdc>)
 800b7b0:	6800      	ldr	r0, [r0, #0]
 800b7b2:	2400      	movs	r4, #0
 800b7b4:	9405      	str	r4, [sp, #20]
 800b7b6:	2400      	movs	r4, #0
 800b7b8:	9404      	str	r4, [sp, #16]
 800b7ba:	9003      	str	r0, [sp, #12]
 800b7bc:	9102      	str	r1, [sp, #8]
 800b7be:	9201      	str	r2, [sp, #4]
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	4b18      	ldr	r3, [pc, #96]	@ (800b824 <_tx_timer_initialize+0xe0>)
 800b7c4:	4a18      	ldr	r2, [pc, #96]	@ (800b828 <_tx_timer_initialize+0xe4>)
 800b7c6:	4919      	ldr	r1, [pc, #100]	@ (800b82c <_tx_timer_initialize+0xe8>)
 800b7c8:	4819      	ldr	r0, [pc, #100]	@ (800b830 <_tx_timer_initialize+0xec>)
 800b7ca:	f7ff fabb 	bl	800ad44 <_tx_thread_create>
 800b7ce:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e5      	bne.n	800b7a2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b7d6:	4b17      	ldr	r3, [pc, #92]	@ (800b834 <_tx_timer_initialize+0xf0>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b7dc:	4b16      	ldr	r3, [pc, #88]	@ (800b838 <_tx_timer_initialize+0xf4>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd90      	pop	{r4, r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20002c0c 	.word	0x20002c0c
 800b7f0:	2000316c 	.word	0x2000316c
 800b7f4:	20002c10 	.word	0x20002c10
 800b7f8:	20002ca0 	.word	0x20002ca0
 800b7fc:	20002cac 	.word	0x20002cac
 800b800:	20002c14 	.word	0x20002c14
 800b804:	20002c94 	.word	0x20002c94
 800b808:	20002c9c 	.word	0x20002c9c
 800b80c:	20002c98 	.word	0x20002c98
 800b810:	20002c90 	.word	0x20002c90
 800b814:	20002d60 	.word	0x20002d60
 800b818:	20002d6c 	.word	0x20002d6c
 800b81c:	20002d64 	.word	0x20002d64
 800b820:	20002d68 	.word	0x20002d68
 800b824:	4154494d 	.word	0x4154494d
 800b828:	0800b971 	.word	0x0800b971
 800b82c:	080104b8 	.word	0x080104b8
 800b830:	20002cb0 	.word	0x20002cb0
 800b834:	20002ca4 	.word	0x20002ca4
 800b838:	20002ca8 	.word	0x20002ca8

0800b83c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b089      	sub	sp, #36	@ 0x24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d04a      	beq.n	800b8e6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d046      	beq.n	800b8e6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d142      	bne.n	800b8e6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	2b20      	cmp	r3, #32
 800b864:	d902      	bls.n	800b86c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b866:	231f      	movs	r3, #31
 800b868:	61bb      	str	r3, [r7, #24]
 800b86a:	e002      	b.n	800b872 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	3b01      	subs	r3, #1
 800b870:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b872:	4b20      	ldr	r3, [pc, #128]	@ (800b8f4 <_tx_timer_system_activate+0xb8>)
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b87e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8f8 <_tx_timer_system_activate+0xbc>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	69fa      	ldr	r2, [r7, #28]
 800b884:	429a      	cmp	r2, r3
 800b886:	d30b      	bcc.n	800b8a0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b888:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f8 <_tx_timer_system_activate+0xbc>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	69fa      	ldr	r2, [r7, #28]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	109b      	asrs	r3, r3, #2
 800b892:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b894:	4b19      	ldr	r3, [pc, #100]	@ (800b8fc <_tx_timer_system_activate+0xc0>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d109      	bne.n	800b8bc <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	e011      	b.n	800b8e0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	69fa      	ldr	r2, [r7, #28]
 800b8e4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b8e6:	bf00      	nop
 800b8e8:	3724      	adds	r7, #36	@ 0x24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	20002c9c 	.word	0x20002c9c
 800b8f8:	20002c98 	.word	0x20002c98
 800b8fc:	20002c94 	.word	0x20002c94

0800b900 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b900:	b480      	push	{r7}
 800b902:	b087      	sub	sp, #28
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d026      	beq.n	800b962 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d108      	bne.n	800b934 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d117      	bne.n	800b95c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	2200      	movs	r2, #0
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	e013      	b.n	800b95c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	693a      	ldr	r2, [r7, #16]
 800b944:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d105      	bne.n	800b95c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	619a      	str	r2, [r3, #24]
    }
}
 800b962:	bf00      	nop
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
	...

0800b970 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b098      	sub	sp, #96	@ 0x60
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800b978:	2300      	movs	r3, #0
 800b97a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a73      	ldr	r2, [pc, #460]	@ (800bb4c <_tx_timer_thread_entry+0x1dc>)
 800b980:	4293      	cmp	r3, r2
 800b982:	f040 80de 	bne.w	800bb42 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b986:	f3ef 8310 	mrs	r3, PRIMASK
 800b98a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800b98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800b98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b990:	b672      	cpsid	i
    return(int_posture);
 800b992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800b994:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800b996:	4b6e      	ldr	r3, [pc, #440]	@ (800bb50 <_tx_timer_thread_entry+0x1e0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f107 020c 	add.w	r2, r7, #12
 800b9aa:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800b9ac:	4b68      	ldr	r3, [pc, #416]	@ (800bb50 <_tx_timer_thread_entry+0x1e0>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800b9b4:	4b66      	ldr	r3, [pc, #408]	@ (800bb50 <_tx_timer_thread_entry+0x1e0>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4a65      	ldr	r2, [pc, #404]	@ (800bb50 <_tx_timer_thread_entry+0x1e0>)
 800b9bc:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800b9be:	4b64      	ldr	r3, [pc, #400]	@ (800bb50 <_tx_timer_thread_entry+0x1e0>)
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	4b64      	ldr	r3, [pc, #400]	@ (800bb54 <_tx_timer_thread_entry+0x1e4>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d103      	bne.n	800b9d2 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800b9ca:	4b63      	ldr	r3, [pc, #396]	@ (800bb58 <_tx_timer_thread_entry+0x1e8>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a60      	ldr	r2, [pc, #384]	@ (800bb50 <_tx_timer_thread_entry+0x1e0>)
 800b9d0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800b9d2:	4b62      	ldr	r3, [pc, #392]	@ (800bb5c <_tx_timer_thread_entry+0x1ec>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9da:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9de:	f383 8810 	msr	PRIMASK, r3
}
 800b9e2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800b9ec:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9ee:	b672      	cpsid	i
    return(int_posture);
 800b9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800b9f2:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800b9f4:	e07f      	b.n	800baf6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800ba00:	2300      	movs	r3, #0
 800ba02:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800ba04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d102      	bne.n	800ba12 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	e00e      	b.n	800ba30 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800ba12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ba18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba1c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ba1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba22:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ba24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba26:	f107 020c 	add.w	r2, r7, #12
 800ba2a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ba2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba2e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ba30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	d911      	bls.n	800ba5c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800ba38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800ba40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba42:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ba44:	2300      	movs	r3, #0
 800ba46:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba4a:	f107 0208 	add.w	r2, r7, #8
 800ba4e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba54:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800ba56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba58:	60bb      	str	r3, [r7, #8]
 800ba5a:	e01a      	b.n	800ba92 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800ba5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ba62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ba68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba6e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ba70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba7a:	f107 0208 	add.w	r2, r7, #8
 800ba7e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba84:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ba86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba88:	60bb      	str	r3, [r7, #8]
 800ba8a:	e002      	b.n	800ba92 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ba8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba8e:	2200      	movs	r2, #0
 800ba90:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ba92:	4a33      	ldr	r2, [pc, #204]	@ (800bb60 <_tx_timer_thread_entry+0x1f0>)
 800ba94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9e:	f383 8810 	msr	PRIMASK, r3
}
 800baa2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800baa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d002      	beq.n	800bab0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800baaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800baae:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bab0:	f3ef 8310 	mrs	r3, PRIMASK
 800bab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800bab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800bab8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800baba:	b672      	cpsid	i
    return(int_posture);
 800babc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800babe:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800bac0:	4b27      	ldr	r3, [pc, #156]	@ (800bb60 <_tx_timer_thread_entry+0x1f0>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800baca:	429a      	cmp	r2, r3
 800bacc:	d105      	bne.n	800bada <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800bace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bad0:	2200      	movs	r2, #0
 800bad2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800bad4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800bad6:	f7ff feb1 	bl	800b83c <_tx_timer_system_activate>
 800bada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800badc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	f383 8810 	msr	PRIMASK, r3
}
 800bae4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bae6:	f3ef 8310 	mrs	r3, PRIMASK
 800baea:	623b      	str	r3, [r7, #32]
    return(posture);
 800baec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800baee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800baf0:	b672      	cpsid	i
    return(int_posture);
 800baf2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800baf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f47f af7c 	bne.w	800b9f6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800bafe:	4b17      	ldr	r3, [pc, #92]	@ (800bb5c <_tx_timer_thread_entry+0x1ec>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d116      	bne.n	800bb34 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800bb06:	4b17      	ldr	r3, [pc, #92]	@ (800bb64 <_tx_timer_thread_entry+0x1f4>)
 800bb08:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bb0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bb10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb12:	2201      	movs	r2, #1
 800bb14:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800bb16:	4b14      	ldr	r3, [pc, #80]	@ (800bb68 <_tx_timer_thread_entry+0x1f8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	4a12      	ldr	r2, [pc, #72]	@ (800bb68 <_tx_timer_thread_entry+0x1f8>)
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb22:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f383 8810 	msr	PRIMASK, r3
}
 800bb2a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bb2c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bb2e:	f7ff fc41 	bl	800b3b4 <_tx_thread_system_suspend>
 800bb32:	e728      	b.n	800b986 <_tx_timer_thread_entry+0x16>
 800bb34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb36:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f383 8810 	msr	PRIMASK, r3
}
 800bb3e:	bf00      	nop
            TX_DISABLE
 800bb40:	e721      	b.n	800b986 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800bb42:	bf00      	nop
 800bb44:	3760      	adds	r7, #96	@ 0x60
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	4154494d 	.word	0x4154494d
 800bb50:	20002c9c 	.word	0x20002c9c
 800bb54:	20002c98 	.word	0x20002c98
 800bb58:	20002c94 	.word	0x20002c94
 800bb5c:	20002ca0 	.word	0x20002ca0
 800bb60:	20002cac 	.word	0x20002cac
 800bb64:	20002cb0 	.word	0x20002cb0
 800bb68:	20002c00 	.word	0x20002c00

0800bb6c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08a      	sub	sp, #40	@ 0x28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
 800bb78:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bb84:	2302      	movs	r3, #2
 800bb86:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb88:	e029      	b.n	800bbde <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a2d      	ldr	r2, [pc, #180]	@ (800bc44 <_txe_byte_allocate+0xd8>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d002      	beq.n	800bb9a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bb94:	2302      	movs	r3, #2
 800bb96:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb98:	e021      	b.n	800bbde <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d102      	bne.n	800bba6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bba0:	2303      	movs	r3, #3
 800bba2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bba4:	e01b      	b.n	800bbde <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d102      	bne.n	800bbb2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bbac:	2305      	movs	r3, #5
 800bbae:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbb0:	e015      	b.n	800bbde <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d902      	bls.n	800bbc2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bbbc:	2305      	movs	r3, #5
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc0:	e00d      	b.n	800bbde <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00a      	beq.n	800bbde <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbc8:	f3ef 8305 	mrs	r3, IPSR
 800bbcc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bbce:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bbd0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc48 <_txe_byte_allocate+0xdc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bbda:	2304      	movs	r3, #4
 800bbdc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d108      	bne.n	800bbf6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bbe4:	4b19      	ldr	r3, [pc, #100]	@ (800bc4c <_txe_byte_allocate+0xe0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	4a18      	ldr	r2, [pc, #96]	@ (800bc50 <_txe_byte_allocate+0xe4>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d101      	bne.n	800bbf6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bbf2:	2313      	movs	r3, #19
 800bbf4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d114      	bne.n	800bc26 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbfc:	f3ef 8305 	mrs	r3, IPSR
 800bc00:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bc02:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc04:	4b10      	ldr	r3, [pc, #64]	@ (800bc48 <_txe_byte_allocate+0xdc>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00b      	beq.n	800bc26 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc0e:	f3ef 8305 	mrs	r3, IPSR
 800bc12:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bc14:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bc16:	4b0c      	ldr	r3, [pc, #48]	@ (800bc48 <_txe_byte_allocate+0xdc>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bc20:	d201      	bcs.n	800bc26 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bc22:	2313      	movs	r3, #19
 800bc24:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	68b9      	ldr	r1, [r7, #8]
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f7fd fd96 	bl	8009764 <_tx_byte_allocate>
 800bc38:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3728      	adds	r7, #40	@ 0x28
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	42595445 	.word	0x42595445
 800bc48:	2000000c 	.word	0x2000000c
 800bc4c:	20002b68 	.word	0x20002b68
 800bc50:	20002cb0 	.word	0x20002cb0

0800bc54 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b092      	sub	sp, #72	@ 0x48
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bc62:	2300      	movs	r3, #0
 800bc64:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d102      	bne.n	800bc72 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc70:	e075      	b.n	800bd5e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bc72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc74:	2b34      	cmp	r3, #52	@ 0x34
 800bc76:	d002      	beq.n	800bc7e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc78:	2302      	movs	r3, #2
 800bc7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc7c:	e06f      	b.n	800bd5e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc7e:	f3ef 8310 	mrs	r3, PRIMASK
 800bc82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bc86:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc88:	b672      	cpsid	i
    return(int_posture);
 800bc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bc8c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bc8e:	4b3b      	ldr	r3, [pc, #236]	@ (800bd7c <_txe_byte_pool_create+0x128>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3301      	adds	r3, #1
 800bc94:	4a39      	ldr	r2, [pc, #228]	@ (800bd7c <_txe_byte_pool_create+0x128>)
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9e:	f383 8810 	msr	PRIMASK, r3
}
 800bca2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bca4:	4b36      	ldr	r3, [pc, #216]	@ (800bd80 <_txe_byte_pool_create+0x12c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bcaa:	2300      	movs	r3, #0
 800bcac:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcae:	e009      	b.n	800bcc4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d00b      	beq.n	800bcd0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bcb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bcbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcc4:	4b2f      	ldr	r3, [pc, #188]	@ (800bd84 <_txe_byte_pool_create+0x130>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d3f0      	bcc.n	800bcb0 <_txe_byte_pool_create+0x5c>
 800bcce:	e000      	b.n	800bcd2 <_txe_byte_pool_create+0x7e>
                break;
 800bcd0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcd2:	f3ef 8310 	mrs	r3, PRIMASK
 800bcd6:	623b      	str	r3, [r7, #32]
    return(posture);
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bcda:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcdc:	b672      	cpsid	i
    return(int_posture);
 800bcde:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bce0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bce2:	4b26      	ldr	r3, [pc, #152]	@ (800bd7c <_txe_byte_pool_create+0x128>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	4a24      	ldr	r2, [pc, #144]	@ (800bd7c <_txe_byte_pool_create+0x128>)
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcee:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	f383 8810 	msr	PRIMASK, r3
}
 800bcf6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bcf8:	f7ff fa22 	bl	800b140 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d102      	bne.n	800bd0a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bd04:	2302      	movs	r3, #2
 800bd06:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd08:	e029      	b.n	800bd5e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d102      	bne.n	800bd16 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bd10:	2303      	movs	r3, #3
 800bd12:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd14:	e023      	b.n	800bd5e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b63      	cmp	r3, #99	@ 0x63
 800bd1a:	d802      	bhi.n	800bd22 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800bd1c:	2305      	movs	r3, #5
 800bd1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd20:	e01d      	b.n	800bd5e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd22:	4b19      	ldr	r3, [pc, #100]	@ (800bd88 <_txe_byte_pool_create+0x134>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bd28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd2a:	4a18      	ldr	r2, [pc, #96]	@ (800bd8c <_txe_byte_pool_create+0x138>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d101      	bne.n	800bd34 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bd30:	2313      	movs	r3, #19
 800bd32:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd34:	f3ef 8305 	mrs	r3, IPSR
 800bd38:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bd3a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bd3c:	4b14      	ldr	r3, [pc, #80]	@ (800bd90 <_txe_byte_pool_create+0x13c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00b      	beq.n	800bd5e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd46:	f3ef 8305 	mrs	r3, IPSR
 800bd4a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bd4c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bd4e:	4b10      	ldr	r3, [pc, #64]	@ (800bd90 <_txe_byte_pool_create+0x13c>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bd58:	d201      	bcs.n	800bd5e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bd5a:	2313      	movs	r3, #19
 800bd5c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bd5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	68b9      	ldr	r1, [r7, #8]
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7fd fe3c 	bl	80099e8 <_tx_byte_pool_create>
 800bd70:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800bd72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3748      	adds	r7, #72	@ 0x48
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20002c00 	.word	0x20002c00
 800bd80:	20002b58 	.word	0x20002b58
 800bd84:	20002b5c 	.word	0x20002b5c
 800bd88:	20002b68 	.word	0x20002b68
 800bd8c:	20002cb0 	.word	0x20002cb0
 800bd90:	2000000c 	.word	0x2000000c

0800bd94 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b092      	sub	sp, #72	@ 0x48
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bda2:	2300      	movs	r3, #0
 800bda4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bdac:	231c      	movs	r3, #28
 800bdae:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdb0:	e053      	b.n	800be5a <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b34      	cmp	r3, #52	@ 0x34
 800bdb6:	d002      	beq.n	800bdbe <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bdb8:	231c      	movs	r3, #28
 800bdba:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdbc:	e04d      	b.n	800be5a <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdbe:	f3ef 8310 	mrs	r3, PRIMASK
 800bdc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bdc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdc8:	b672      	cpsid	i
    return(int_posture);
 800bdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bdcc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bdce:	4b3a      	ldr	r3, [pc, #232]	@ (800beb8 <_txe_mutex_create+0x124>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	4a38      	ldr	r2, [pc, #224]	@ (800beb8 <_txe_mutex_create+0x124>)
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdda:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdde:	f383 8810 	msr	PRIMASK, r3
}
 800bde2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800bde4:	4b35      	ldr	r3, [pc, #212]	@ (800bebc <_txe_mutex_create+0x128>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800bdea:	2300      	movs	r3, #0
 800bdec:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdee:	e009      	b.n	800be04 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d00b      	beq.n	800be10 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800bdfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be00:	3301      	adds	r3, #1
 800be02:	643b      	str	r3, [r7, #64]	@ 0x40
 800be04:	4b2e      	ldr	r3, [pc, #184]	@ (800bec0 <_txe_mutex_create+0x12c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d3f0      	bcc.n	800bdf0 <_txe_mutex_create+0x5c>
 800be0e:	e000      	b.n	800be12 <_txe_mutex_create+0x7e>
                break;
 800be10:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be12:	f3ef 8310 	mrs	r3, PRIMASK
 800be16:	623b      	str	r3, [r7, #32]
    return(posture);
 800be18:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800be1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be1c:	b672      	cpsid	i
    return(int_posture);
 800be1e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800be20:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800be22:	4b25      	ldr	r3, [pc, #148]	@ (800beb8 <_txe_mutex_create+0x124>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3b01      	subs	r3, #1
 800be28:	4a23      	ldr	r2, [pc, #140]	@ (800beb8 <_txe_mutex_create+0x124>)
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be32:	f383 8810 	msr	PRIMASK, r3
}
 800be36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800be38:	f7ff f982 	bl	800b140 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be40:	429a      	cmp	r2, r3
 800be42:	d102      	bne.n	800be4a <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800be44:	231c      	movs	r3, #28
 800be46:	647b      	str	r3, [r7, #68]	@ 0x44
 800be48:	e007      	b.n	800be5a <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d004      	beq.n	800be5a <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800be56:	231f      	movs	r3, #31
 800be58:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800be5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d11d      	bne.n	800be9c <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800be60:	4b18      	ldr	r3, [pc, #96]	@ (800bec4 <_txe_mutex_create+0x130>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800be66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be68:	4a17      	ldr	r2, [pc, #92]	@ (800bec8 <_txe_mutex_create+0x134>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d101      	bne.n	800be72 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800be6e:	2313      	movs	r3, #19
 800be70:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be72:	f3ef 8305 	mrs	r3, IPSR
 800be76:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800be78:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800be7a:	4b14      	ldr	r3, [pc, #80]	@ (800becc <_txe_mutex_create+0x138>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4313      	orrs	r3, r2
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00b      	beq.n	800be9c <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be84:	f3ef 8305 	mrs	r3, IPSR
 800be88:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800be8a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800be8c:	4b0f      	ldr	r3, [pc, #60]	@ (800becc <_txe_mutex_create+0x138>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4313      	orrs	r3, r2
 800be92:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800be96:	d201      	bcs.n	800be9c <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800be98:	2313      	movs	r3, #19
 800be9a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800be9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d105      	bne.n	800beae <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	68b9      	ldr	r1, [r7, #8]
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f7fe f870 	bl	8009f8c <_tx_mutex_create>
 800beac:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800beae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3748      	adds	r7, #72	@ 0x48
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	20002c00 	.word	0x20002c00
 800bebc:	20002b48 	.word	0x20002b48
 800bec0:	20002b4c 	.word	0x20002b4c
 800bec4:	20002b68 	.word	0x20002b68
 800bec8:	20002cb0 	.word	0x20002cb0
 800becc:	2000000c 	.word	0x2000000c

0800bed0 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bed8:	2300      	movs	r3, #0
 800beda:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bee2:	231c      	movs	r3, #28
 800bee4:	617b      	str	r3, [r7, #20]
 800bee6:	e023      	b.n	800bf30 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a13      	ldr	r2, [pc, #76]	@ (800bf3c <_txe_mutex_delete+0x6c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d002      	beq.n	800bef8 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bef2:	231c      	movs	r3, #28
 800bef4:	617b      	str	r3, [r7, #20]
 800bef6:	e01b      	b.n	800bf30 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bef8:	f3ef 8305 	mrs	r3, IPSR
 800befc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800befe:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bf00:	4b0f      	ldr	r3, [pc, #60]	@ (800bf40 <_txe_mutex_delete+0x70>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800bf0a:	2313      	movs	r3, #19
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	e00f      	b.n	800bf30 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bf10:	4b0c      	ldr	r3, [pc, #48]	@ (800bf44 <_txe_mutex_delete+0x74>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	4a0b      	ldr	r2, [pc, #44]	@ (800bf48 <_txe_mutex_delete+0x78>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d101      	bne.n	800bf22 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bf1e:	2313      	movs	r3, #19
 800bf20:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d103      	bne.n	800bf30 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7fe f889 	bl	800a040 <_tx_mutex_delete>
 800bf2e:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800bf30:	697b      	ldr	r3, [r7, #20]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	4d555445 	.word	0x4d555445
 800bf40:	2000000c 	.word	0x2000000c
 800bf44:	20002b68 	.word	0x20002b68
 800bf48:	20002cb0 	.word	0x20002cb0

0800bf4c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bf56:	2300      	movs	r3, #0
 800bf58:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bf60:	231c      	movs	r3, #28
 800bf62:	61fb      	str	r3, [r7, #28]
 800bf64:	e01f      	b.n	800bfa6 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a21      	ldr	r2, [pc, #132]	@ (800bff0 <_txe_mutex_get+0xa4>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d002      	beq.n	800bf76 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bf70:	231c      	movs	r3, #28
 800bf72:	61fb      	str	r3, [r7, #28]
 800bf74:	e017      	b.n	800bfa6 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d014      	beq.n	800bfa6 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf7c:	f3ef 8305 	mrs	r3, IPSR
 800bf80:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bf82:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bf84:	4b1b      	ldr	r3, [pc, #108]	@ (800bff4 <_txe_mutex_get+0xa8>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d002      	beq.n	800bf94 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bf8e:	2304      	movs	r3, #4
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	e008      	b.n	800bfa6 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800bf94:	4b18      	ldr	r3, [pc, #96]	@ (800bff8 <_txe_mutex_get+0xac>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	4a17      	ldr	r2, [pc, #92]	@ (800bffc <_txe_mutex_get+0xb0>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d101      	bne.n	800bfa6 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800bfa2:	2304      	movs	r3, #4
 800bfa4:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d114      	bne.n	800bfd6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfac:	f3ef 8305 	mrs	r3, IPSR
 800bfb0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bfb2:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bfb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bff4 <_txe_mutex_get+0xa8>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00b      	beq.n	800bfd6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfbe:	f3ef 8305 	mrs	r3, IPSR
 800bfc2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800bfc4:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bfc6:	4b0b      	ldr	r3, [pc, #44]	@ (800bff4 <_txe_mutex_get+0xa8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bfd0:	d201      	bcs.n	800bfd6 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bfd2:	2313      	movs	r3, #19
 800bfd4:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7fe f8d8 	bl	800a194 <_tx_mutex_get>
 800bfe4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800bfe6:	69fb      	ldr	r3, [r7, #28]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3720      	adds	r7, #32
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	4d555445 	.word	0x4d555445
 800bff4:	2000000c 	.word	0x2000000c
 800bff8:	20002b68 	.word	0x20002b68
 800bffc:	20002cb0 	.word	0x20002cb0

0800c000 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c008:	2300      	movs	r3, #0
 800c00a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d102      	bne.n	800c018 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c012:	231c      	movs	r3, #28
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	e01c      	b.n	800c052 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a13      	ldr	r2, [pc, #76]	@ (800c06c <_txe_mutex_put+0x6c>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d002      	beq.n	800c028 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c022:	231c      	movs	r3, #28
 800c024:	617b      	str	r3, [r7, #20]
 800c026:	e014      	b.n	800c052 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c028:	f3ef 8305 	mrs	r3, IPSR
 800c02c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c02e:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c030:	4b0f      	ldr	r3, [pc, #60]	@ (800c070 <_txe_mutex_put+0x70>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4313      	orrs	r3, r2
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00b      	beq.n	800c052 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c03a:	f3ef 8305 	mrs	r3, IPSR
 800c03e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c040:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c042:	4b0b      	ldr	r3, [pc, #44]	@ (800c070 <_txe_mutex_put+0x70>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4313      	orrs	r3, r2
 800c048:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c04c:	d201      	bcs.n	800c052 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c04e:	2313      	movs	r3, #19
 800c050:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d103      	bne.n	800c060 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7fe fb13 	bl	800a684 <_tx_mutex_put>
 800c05e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c060:	697b      	ldr	r3, [r7, #20]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	4d555445 	.word	0x4d555445
 800c070:	2000000c 	.word	0x2000000c

0800c074 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b092      	sub	sp, #72	@ 0x48
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c082:	2300      	movs	r3, #0
 800c084:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d102      	bne.n	800c092 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c08c:	230c      	movs	r3, #12
 800c08e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c090:	e054      	b.n	800c13c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b1c      	cmp	r3, #28
 800c096:	d002      	beq.n	800c09e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c098:	230c      	movs	r3, #12
 800c09a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c09c:	e04e      	b.n	800c13c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c09e:	f3ef 8310 	mrs	r3, PRIMASK
 800c0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0a8:	b672      	cpsid	i
    return(int_posture);
 800c0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c0ac:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c0ae:	4b36      	ldr	r3, [pc, #216]	@ (800c188 <_txe_semaphore_create+0x114>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	4a34      	ldr	r2, [pc, #208]	@ (800c188 <_txe_semaphore_create+0x114>)
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ba:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0be:	f383 8810 	msr	PRIMASK, r3
}
 800c0c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800c0c4:	4b31      	ldr	r3, [pc, #196]	@ (800c18c <_txe_semaphore_create+0x118>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0ce:	e009      	b.n	800c0e4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d00b      	beq.n	800c0f0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800c0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c190 <_txe_semaphore_create+0x11c>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d3f0      	bcc.n	800c0d0 <_txe_semaphore_create+0x5c>
 800c0ee:	e000      	b.n	800c0f2 <_txe_semaphore_create+0x7e>
                break;
 800c0f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0f2:	f3ef 8310 	mrs	r3, PRIMASK
 800c0f6:	623b      	str	r3, [r7, #32]
    return(posture);
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c0fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0fc:	b672      	cpsid	i
    return(int_posture);
 800c0fe:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c100:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c102:	4b21      	ldr	r3, [pc, #132]	@ (800c188 <_txe_semaphore_create+0x114>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3b01      	subs	r3, #1
 800c108:	4a1f      	ldr	r2, [pc, #124]	@ (800c188 <_txe_semaphore_create+0x114>)
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	f383 8810 	msr	PRIMASK, r3
}
 800c116:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c118:	f7ff f812 	bl	800b140 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c120:	429a      	cmp	r2, r3
 800c122:	d102      	bne.n	800c12a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800c124:	230c      	movs	r3, #12
 800c126:	647b      	str	r3, [r7, #68]	@ 0x44
 800c128:	e008      	b.n	800c13c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c12a:	4b1a      	ldr	r3, [pc, #104]	@ (800c194 <_txe_semaphore_create+0x120>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c132:	4a19      	ldr	r2, [pc, #100]	@ (800c198 <_txe_semaphore_create+0x124>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d101      	bne.n	800c13c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c138:	2313      	movs	r3, #19
 800c13a:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c13c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d114      	bne.n	800c16c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c142:	f3ef 8305 	mrs	r3, IPSR
 800c146:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c148:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c14a:	4b14      	ldr	r3, [pc, #80]	@ (800c19c <_txe_semaphore_create+0x128>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4313      	orrs	r3, r2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c154:	f3ef 8305 	mrs	r3, IPSR
 800c158:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c15a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c15c:	4b0f      	ldr	r3, [pc, #60]	@ (800c19c <_txe_semaphore_create+0x128>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4313      	orrs	r3, r2
 800c162:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c166:	d201      	bcs.n	800c16c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c168:	2313      	movs	r3, #19
 800c16a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c16c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d105      	bne.n	800c17e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f7fe fcaa 	bl	800aad0 <_tx_semaphore_create>
 800c17c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800c17e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c180:	4618      	mov	r0, r3
 800c182:	3748      	adds	r7, #72	@ 0x48
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	20002c00 	.word	0x20002c00
 800c18c:	20002b30 	.word	0x20002b30
 800c190:	20002b34 	.word	0x20002b34
 800c194:	20002b68 	.word	0x20002b68
 800c198:	20002cb0 	.word	0x20002cb0
 800c19c:	2000000c 	.word	0x2000000c

0800c1a0 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d102      	bne.n	800c1b8 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c1b2:	230c      	movs	r3, #12
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	e01c      	b.n	800c1f2 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a13      	ldr	r2, [pc, #76]	@ (800c20c <_txe_semaphore_delete+0x6c>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d002      	beq.n	800c1c8 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c1c2:	230c      	movs	r3, #12
 800c1c4:	617b      	str	r3, [r7, #20]
 800c1c6:	e014      	b.n	800c1f2 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1c8:	f3ef 8305 	mrs	r3, IPSR
 800c1cc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c1ce:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c210 <_txe_semaphore_delete+0x70>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c1da:	2313      	movs	r3, #19
 800c1dc:	617b      	str	r3, [r7, #20]
 800c1de:	e008      	b.n	800c1f2 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c214 <_txe_semaphore_delete+0x74>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	4a0b      	ldr	r2, [pc, #44]	@ (800c218 <_txe_semaphore_delete+0x78>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d101      	bne.n	800c1f2 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c1ee:	2313      	movs	r3, #19
 800c1f0:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d103      	bne.n	800c200 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7fe fcbb 	bl	800ab74 <_tx_semaphore_delete>
 800c1fe:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c200:	697b      	ldr	r3, [r7, #20]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	53454d41 	.word	0x53454d41
 800c210:	2000000c 	.word	0x2000000c
 800c214:	20002b68 	.word	0x20002b68
 800c218:	20002cb0 	.word	0x20002cb0

0800c21c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c22a:	230c      	movs	r3, #12
 800c22c:	60fb      	str	r3, [r7, #12]
 800c22e:	e00b      	b.n	800c248 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a07      	ldr	r2, [pc, #28]	@ (800c254 <_txe_semaphore_put+0x38>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d002      	beq.n	800c240 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c23a:	230c      	movs	r3, #12
 800c23c:	60fb      	str	r3, [r7, #12]
 800c23e:	e003      	b.n	800c248 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7fe fd27 	bl	800ac94 <_tx_semaphore_put>
 800c246:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c248:	68fb      	ldr	r3, [r7, #12]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	53454d41 	.word	0x53454d41

0800c258 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b09a      	sub	sp, #104	@ 0x68
 800c25c:	af06      	add	r7, sp, #24
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c266:	2300      	movs	r3, #0
 800c268:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d102      	bne.n	800c276 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c270:	230e      	movs	r3, #14
 800c272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c274:	e0bb      	b.n	800c3ee <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800c276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c278:	2bb0      	cmp	r3, #176	@ 0xb0
 800c27a:	d002      	beq.n	800c282 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c27c:	230e      	movs	r3, #14
 800c27e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c280:	e0b5      	b.n	800c3ee <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c282:	f3ef 8310 	mrs	r3, PRIMASK
 800c286:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c28a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c28c:	b672      	cpsid	i
    return(int_posture);
 800c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c290:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c292:	4b64      	ldr	r3, [pc, #400]	@ (800c424 <_txe_thread_create+0x1cc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3301      	adds	r3, #1
 800c298:	4a62      	ldr	r2, [pc, #392]	@ (800c424 <_txe_thread_create+0x1cc>)
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a2:	f383 8810 	msr	PRIMASK, r3
}
 800c2a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800c2ac:	4b5e      	ldr	r3, [pc, #376]	@ (800c428 <_txe_thread_create+0x1d0>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c2b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2b4:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800c2b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2bc:	4413      	add	r3, r2
 800c2be:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c2:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2c8:	e02b      	b.n	800c322 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d101      	bne.n	800c2d6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c2d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d028      	beq.n	800c32e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c2dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d308      	bcc.n	800c2f8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c2e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d203      	bcs.n	800c2f8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c2f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d308      	bcc.n	800c314 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c308:	429a      	cmp	r2, r3
 800c30a:	d203      	bcs.n	800c314 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c30c:	2300      	movs	r3, #0
 800c30e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c310:	2301      	movs	r3, #1
 800c312:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c31a:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c31e:	3301      	adds	r3, #1
 800c320:	647b      	str	r3, [r7, #68]	@ 0x44
 800c322:	4b42      	ldr	r3, [pc, #264]	@ (800c42c <_txe_thread_create+0x1d4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c328:	429a      	cmp	r2, r3
 800c32a:	d3ce      	bcc.n	800c2ca <_txe_thread_create+0x72>
 800c32c:	e000      	b.n	800c330 <_txe_thread_create+0xd8>
                break;
 800c32e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c330:	f3ef 8310 	mrs	r3, PRIMASK
 800c334:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c336:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c338:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c33a:	b672      	cpsid	i
    return(int_posture);
 800c33c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c33e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c340:	4b38      	ldr	r3, [pc, #224]	@ (800c424 <_txe_thread_create+0x1cc>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	3b01      	subs	r3, #1
 800c346:	4a37      	ldr	r2, [pc, #220]	@ (800c424 <_txe_thread_create+0x1cc>)
 800c348:	6013      	str	r3, [r2, #0]
 800c34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c34c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	f383 8810 	msr	PRIMASK, r3
}
 800c354:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c356:	f7fe fef3 	bl	800b140 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c35e:	429a      	cmp	r2, r3
 800c360:	d102      	bne.n	800c368 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c362:	230e      	movs	r3, #14
 800c364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c366:	e042      	b.n	800c3ee <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d102      	bne.n	800c374 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c36e:	2303      	movs	r3, #3
 800c370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c372:	e03c      	b.n	800c3ee <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d102      	bne.n	800c380 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c37a:	2303      	movs	r3, #3
 800c37c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c37e:	e036      	b.n	800c3ee <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c382:	2bc7      	cmp	r3, #199	@ 0xc7
 800c384:	d802      	bhi.n	800c38c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c386:	2305      	movs	r3, #5
 800c388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c38a:	e030      	b.n	800c3ee <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c38c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c38e:	2b1f      	cmp	r3, #31
 800c390:	d902      	bls.n	800c398 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c392:	230f      	movs	r3, #15
 800c394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c396:	e02a      	b.n	800c3ee <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c398:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c39a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d902      	bls.n	800c3a6 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c3a0:	2318      	movs	r3, #24
 800c3a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3a4:	e023      	b.n	800c3ee <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c3a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d902      	bls.n	800c3b2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c3ac:	2310      	movs	r3, #16
 800c3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3b0:	e01d      	b.n	800c3ee <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c3b2:	4b1f      	ldr	r3, [pc, #124]	@ (800c430 <_txe_thread_create+0x1d8>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c434 <_txe_thread_create+0x1dc>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d101      	bne.n	800c3c4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c3c0:	2313      	movs	r3, #19
 800c3c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3c4:	f3ef 8305 	mrs	r3, IPSR
 800c3c8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c3ca:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c438 <_txe_thread_create+0x1e0>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00b      	beq.n	800c3ee <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3d6:	f3ef 8305 	mrs	r3, IPSR
 800c3da:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c3dc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c3de:	4b16      	ldr	r3, [pc, #88]	@ (800c438 <_txe_thread_create+0x1e0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c3e8:	d201      	bcs.n	800c3ee <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c3ea:	2313      	movs	r3, #19
 800c3ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c3ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d112      	bne.n	800c41a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c3f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3f6:	9305      	str	r3, [sp, #20]
 800c3f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3fe:	9303      	str	r3, [sp, #12]
 800c400:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c402:	9302      	str	r3, [sp, #8]
 800c404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7fe fc96 	bl	800ad44 <_tx_thread_create>
 800c418:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3750      	adds	r7, #80	@ 0x50
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20002c00 	.word	0x20002c00
 800c428:	20002b70 	.word	0x20002b70
 800c42c:	20002b74 	.word	0x20002b74
 800c430:	20002b68 	.word	0x20002b68
 800c434:	20002cb0 	.word	0x20002cb0
 800c438:	2000000c 	.word	0x2000000c

0800c43c <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c444:	4b1b      	ldr	r3, [pc, #108]	@ (800c4b4 <_ux_device_stack_alternate_setting_get+0x78>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	3320      	adds	r3, #32
 800c44a:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b03      	cmp	r3, #3
 800c452:	d129      	bne.n	800c4a8 <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c45a:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800c45c:	e021      	b.n	800c4a2 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	7b9b      	ldrb	r3, [r3, #14]
 800c462:	461a      	mov	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4293      	cmp	r3, r2
 800c468:	d118      	bne.n	800c49c <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	3318      	adds	r3, #24
 800c46e:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	3320      	adds	r3, #32
 800c474:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800c47a:	69fa      	ldr	r2, [r7, #28]
 800c47c:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800c47e:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	2201      	movs	r2, #1
 800c484:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	2203      	movs	r2, #3
 800c48a:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800c48c:	2201      	movs	r2, #1
 800c48e:	2101      	movs	r1, #1
 800c490:	6938      	ldr	r0, [r7, #16]
 800c492:	f001 fccb 	bl	800de2c <_ux_device_stack_transfer_request>
 800c496:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	e006      	b.n	800c4aa <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1da      	bne.n	800c45e <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800c4a8:	23ff      	movs	r3, #255	@ 0xff
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3720      	adds	r7, #32
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20003170 	.word	0x20003170

0800c4b8 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b0a4      	sub	sp, #144	@ 0x90
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c4c2:	4bb5      	ldr	r3, [pc, #724]	@ (800c798 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3320      	adds	r3, #32
 800c4c8:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800c4ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d001      	beq.n	800c4d6 <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800c4d2:	2354      	movs	r3, #84	@ 0x54
 800c4d4:	e1ef      	b.n	800c8b6 <_ux_device_stack_alternate_setting_set+0x3fe>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800c4d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c4dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800c4e0:	e00b      	b.n	800c4fa <_ux_device_stack_alternate_setting_set+0x42>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800c4e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4e6:	7b9b      	ldrb	r3, [r3, #14]
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d009      	beq.n	800c504 <_ux_device_stack_alternate_setting_set+0x4c>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800c4f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (interface_ptr != UX_NULL)
 800c4fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1ef      	bne.n	800c4e2 <_ux_device_stack_alternate_setting_set+0x2a>
 800c502:	e000      	b.n	800c506 <_ux_device_stack_alternate_setting_set+0x4e>
            break;
 800c504:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800c506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <_ux_device_stack_alternate_setting_set+0x64>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800c50e:	2252      	movs	r2, #82	@ 0x52
 800c510:	2107      	movs	r1, #7
 800c512:	2002      	movs	r0, #2
 800c514:	f001 fd14 	bl	800df40 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800c518:	2352      	movs	r3, #82	@ 0x52
 800c51a:	e1cc      	b.n	800c8b6 <_ux_device_stack_alternate_setting_set+0x3fe>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800c51c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c520:	7bdb      	ldrb	r3, [r3, #15]
 800c522:	461a      	mov	r2, r3
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	4293      	cmp	r3, r2
 800c528:	d101      	bne.n	800c52e <_ux_device_stack_alternate_setting_set+0x76>
        return(UX_SUCCESS);       
 800c52a:	2300      	movs	r3, #0
 800c52c:	e1c3      	b.n	800c8b6 <_ux_device_stack_alternate_setting_set+0x3fe>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800c52e:	4b9a      	ldr	r3, [pc, #616]	@ (800c798 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c534:	4b98      	ldr	r3, [pc, #608]	@ (800c798 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c53c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800c540:	4b95      	ldr	r3, [pc, #596]	@ (800c798 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800c54c:	e1ad      	b.n	800c8aa <_ux_device_stack_alternate_setting_set+0x3f2>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800c54e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800c556:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c55a:	785b      	ldrb	r3, [r3, #1]
 800c55c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800c560:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c564:	2b02      	cmp	r3, #2
 800c566:	f040 8194 	bne.w	800c892 <_ux_device_stack_alternate_setting_set+0x3da>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800c56a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c56e:	2208      	movs	r2, #8
 800c570:	498a      	ldr	r1, [pc, #552]	@ (800c79c <_ux_device_stack_alternate_setting_set+0x2e4>)
 800c572:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800c576:	f001 fddd 	bl	800e134 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800c57a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800c57e:	461a      	mov	r2, r3
 800c580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c582:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c586:	429a      	cmp	r2, r3
 800c588:	f040 8183 	bne.w	800c892 <_ux_device_stack_alternate_setting_set+0x3da>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800c58c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800c594:	e177      	b.n	800c886 <_ux_device_stack_alternate_setting_set+0x3ce>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800c596:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800c59e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5a2:	785b      	ldrb	r3, [r3, #1]
 800c5a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800c5a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c5ac:	2b04      	cmp	r3, #4
 800c5ae:	f040 815e 	bne.w	800c86e <_ux_device_stack_alternate_setting_set+0x3b6>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800c5b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c5b6:	2209      	movs	r2, #9
 800c5b8:	4979      	ldr	r1, [pc, #484]	@ (800c7a0 <_ux_device_stack_alternate_setting_set+0x2e8>)
 800c5ba:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800c5be:	f001 fdb9 	bl	800e134 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800c5c2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	f040 814f 	bne.w	800c86e <_ux_device_stack_alternate_setting_set+0x3b6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800c5d0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c5d4:	461a      	mov	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	f040 8148 	bne.w	800c86e <_ux_device_stack_alternate_setting_set+0x3b6>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c5de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5e2:	69db      	ldr	r3, [r3, #28]
 800c5e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 800c5e8:	e026      	b.n	800c638 <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800c5ea:	2126      	movs	r1, #38	@ 0x26
 800c5ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800c5f0:	f001 fc0a 	bl	800de08 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800c5f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5fc:	210f      	movs	r1, #15
 800c5fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c600:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800c602:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c606:	695b      	ldr	r3, [r3, #20]
 800c608:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800c60a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800c612:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c616:	2200      	movs	r2, #0
 800c618:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800c61a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c61e:	2200      	movs	r2, #0
 800c620:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800c622:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c626:	2200      	movs	r2, #0
 800c628:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800c62a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c62e:	2200      	movs	r2, #0
 800c630:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800c632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            while (endpoint != UX_NULL)
 800c638:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1d4      	bne.n	800c5ea <_ux_device_stack_alternate_setting_set+0x132>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800c640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c644:	2200      	movs	r2, #0
 800c646:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800c648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	461a      	mov	r2, r3
 800c650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c654:	1a9b      	subs	r3, r3, r2
 800c656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            device_framework +=  (ULONG) *device_framework;
 800c65a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	461a      	mov	r2, r3
 800c662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c666:	4413      	add	r3, r2
 800c668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800c66c:	e0c9      	b.n	800c802 <_ux_device_stack_alternate_setting_set+0x34a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800c66e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800c676:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c67a:	785b      	ldrb	r3, [r3, #1]
 800c67c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800c680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c684:	2b05      	cmp	r3, #5
 800c686:	d009      	beq.n	800c69c <_ux_device_stack_alternate_setting_set+0x1e4>
 800c688:	2b05      	cmp	r3, #5
 800c68a:	f300 80ad 	bgt.w	800c7e8 <_ux_device_stack_alternate_setting_set+0x330>
 800c68e:	2b02      	cmp	r3, #2
 800c690:	f000 80a6 	beq.w	800c7e0 <_ux_device_stack_alternate_setting_set+0x328>
 800c694:	2b04      	cmp	r3, #4
 800c696:	f000 80a3 	beq.w	800c7e0 <_ux_device_stack_alternate_setting_set+0x328>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800c69a:	e0a5      	b.n	800c7e8 <_ux_device_stack_alternate_setting_set+0x330>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800c69c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c69e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c6a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800c6a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c6ac:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800c6ae:	e011      	b.n	800c6d4 <_ux_device_stack_alternate_setting_set+0x21c>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800c6b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d104      	bne.n	800c6c4 <_ux_device_stack_alternate_setting_set+0x20c>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800c6ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6be:	2201      	movs	r2, #1
 800c6c0:	601a      	str	r2, [r3, #0]
                                            break;
 800c6c2:	e00a      	b.n	800c6da <_ux_device_stack_alternate_setting_set+0x222>
                                        endpoint++;
 800c6c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6c8:	3380      	adds	r3, #128	@ 0x80
 800c6ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                       endpoints_pool_number--; 
 800c6ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800c6d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1ea      	bne.n	800c6b0 <_ux_device_stack_alternate_setting_set+0x1f8>
                                    if (endpoints_pool_number == 0)
 800c6da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d101      	bne.n	800c6e4 <_ux_device_stack_alternate_setting_set+0x22c>
                                        return(UX_MEMORY_INSUFFICIENT);
 800c6e0:	2312      	movs	r3, #18
 800c6e2:	e0e8      	b.n	800c8b6 <_ux_device_stack_alternate_setting_set+0x3fe>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800c6e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6e8:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800c6ea:	2206      	movs	r2, #6
 800c6ec:	492d      	ldr	r1, [pc, #180]	@ (800c7a4 <_ux_device_stack_alternate_setting_set+0x2ec>)
 800c6ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800c6f2:	f001 fd1f 	bl	800e134 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c6f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6fa:	3320      	adds	r3, #32
 800c6fc:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800c6fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c702:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 800c704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c708:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800c70a:	4b23      	ldr	r3, [pc, #140]	@ (800c798 <_ux_device_stack_alternate_setting_set+0x2e0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800c712:	2b02      	cmp	r3, #2
 800c714:	d11a      	bne.n	800c74c <_ux_device_stack_alternate_setting_set+0x294>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800c716:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c71a:	7bdb      	ldrb	r3, [r3, #15]
 800c71c:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800c720:	2b00      	cmp	r3, #0
 800c722:	d013      	beq.n	800c74c <_ux_device_stack_alternate_setting_set+0x294>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800c724:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c728:	8a1b      	ldrh	r3, [r3, #16]
 800c72a:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800c72e:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 800c730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00a      	beq.n	800c74c <_ux_device_stack_alternate_setting_set+0x294>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800c736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c738:	0adb      	lsrs	r3, r3, #11
 800c73a:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 800c73c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c73e:	3301      	adds	r3, #1
 800c740:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 800c742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c744:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c746:	fb02 f303 	mul.w	r3, r2, r3
 800c74a:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800c74c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c74e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c750:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800c752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c754:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c758:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800c75a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c75c:	f04f 32ff 	mov.w	r2, #4294967295
 800c760:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800c762:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c766:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c76a:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 800c76c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c770:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c772:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800c774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c77c:	210e      	movs	r1, #14
 800c77e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c780:	4798      	blx	r3
 800c782:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 800c784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00e      	beq.n	800c7a8 <_ux_device_stack_alternate_setting_set+0x2f0>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800c78a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
                                        return(status);
 800c792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c794:	e08f      	b.n	800c8b6 <_ux_device_stack_alternate_setting_set+0x3fe>
 800c796:	bf00      	nop
 800c798:	20003170 	.word	0x20003170
 800c79c:	20000040 	.word	0x20000040
 800c7a0:	20000048 	.word	0x20000048
 800c7a4:	20000028 	.word	0x20000028
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800c7a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d105      	bne.n	800c7be <_ux_device_stack_alternate_setting_set+0x306>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800c7b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7ba:	61da      	str	r2, [r3, #28]
                                    break;
 800c7bc:	e015      	b.n	800c7ea <_ux_device_stack_alternate_setting_set+0x332>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7c2:	69db      	ldr	r3, [r3, #28]
 800c7c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800c7c6:	e002      	b.n	800c7ce <_ux_device_stack_alternate_setting_set+0x316>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800c7c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800c7ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1f8      	bne.n	800c7c8 <_ux_device_stack_alternate_setting_set+0x310>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800c7d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7dc:	615a      	str	r2, [r3, #20]
                                    break;
 800c7de:	e004      	b.n	800c7ea <_ux_device_stack_alternate_setting_set+0x332>
                                    device_framework_length =  descriptor_length;
 800c7e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                    break;
 800c7e6:	e000      	b.n	800c7ea <_ux_device_stack_alternate_setting_set+0x332>
                                    break;
 800c7e8:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800c7ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c7ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800c7f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c7fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7fc:	4413      	add	r3, r2
 800c7fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                            while (device_framework_length != 0)
 800c802:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c806:	2b00      	cmp	r3, #0
 800c808:	f47f af31 	bne.w	800c66e <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800c80c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c810:	330c      	adds	r3, #12
 800c812:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800c816:	220c      	movs	r2, #12
 800c818:	4618      	mov	r0, r3
 800c81a:	f001 ff2f 	bl	800e67c <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800c81e:	4b28      	ldr	r3, [pc, #160]	@ (800c8c0 <_ux_device_stack_alternate_setting_set+0x408>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c826:	7b9b      	ldrb	r3, [r3, #14]
 800c828:	3344      	adds	r3, #68	@ 0x44
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800c832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <_ux_device_stack_alternate_setting_set+0x388>
 800c838:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c83a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <_ux_device_stack_alternate_setting_set+0x38c>
                            {

                                return (UX_NO_CLASS_MATCH);
 800c840:	2357      	movs	r3, #87	@ 0x57
 800c842:	e038      	b.n	800c8b6 <_ux_device_stack_alternate_setting_set+0x3fe>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800c844:	2306      	movs	r3, #6
 800c846:	60fb      	str	r3, [r7, #12]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800c848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c84c:	617b      	str	r3, [r7, #20]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800c84e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c850:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800c852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c854:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c858:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800c85c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c85e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c860:	f107 020c 	add.w	r2, r7, #12
 800c864:	4610      	mov	r0, r2
 800c866:	4798      	blx	r3
 800c868:	65f8      	str	r0, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 800c86a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c86c:	e023      	b.n	800c8b6 <_ux_device_stack_alternate_setting_set+0x3fe>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800c86e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800c87a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c87e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c880:	4413      	add	r3, r2
 800c882:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                while (device_framework_length != 0)
 800c886:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f47f ae83 	bne.w	800c596 <_ux_device_stack_alternate_setting_set+0xde>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800c890:	e010      	b.n	800c8b4 <_ux_device_stack_alternate_setting_set+0x3fc>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800c892:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800c89e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c8a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (device_framework_length != 0)
 800c8aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f47f ae4d 	bne.w	800c54e <_ux_device_stack_alternate_setting_set+0x96>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800c8b4:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3790      	adds	r7, #144	@ 0x90
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20003170 	.word	0x20003170

0800c8c4 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b092      	sub	sp, #72	@ 0x48
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800c8d6:	f107 0310 	add.w	r3, r7, #16
 800c8da:	223f      	movs	r2, #63	@ 0x3f
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f002 f81b 	bl	800e91a <_ux_utility_string_length_check>
 800c8e4:	6478      	str	r0, [r7, #68]	@ 0x44
    if (status)
 800c8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d001      	beq.n	800c8f0 <_ux_device_stack_class_register+0x2c>
        return(status);
 800c8ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8ee:	e035      	b.n	800c95c <_ux_device_stack_class_register+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800c8f0:	4b1c      	ldr	r3, [pc, #112]	@ (800c964 <_ux_device_stack_class_register+0xa0>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c8f8:	643b      	str	r3, [r7, #64]	@ 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800c8fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d12b      	bne.n	800c95a <_ux_device_stack_class_register+0x96>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800c902:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	3301      	adds	r3, #1
 800c908:	461a      	mov	r2, r3
 800c90a:	68f9      	ldr	r1, [r7, #12]
 800c90c:	f001 feb6 	bl	800e67c <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800c910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800c916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c918:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c91a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800c91e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800c926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800c92e:	2305      	movs	r3, #5
 800c930:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 800c932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c934:	63bb      	str	r3, [r7, #56]	@ 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800c936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c938:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800c93a:	f107 0214 	add.w	r2, r7, #20
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	4610      	mov	r0, r2
 800c942:	4798      	blx	r3
 800c944:	6478      	str	r0, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800c946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <_ux_device_stack_class_register+0x8c>
                return(status);
 800c94c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c94e:	e005      	b.n	800c95c <_ux_device_stack_class_register+0x98>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800c950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c952:	2201      	movs	r2, #1
 800c954:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800c956:	2300      	movs	r3, #0
 800c958:	e000      	b.n	800c95c <_ux_device_stack_class_register+0x98>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800c95a:	2312      	movs	r3, #18
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3748      	adds	r7, #72	@ 0x48
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20003170 	.word	0x20003170

0800c968 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08a      	sub	sp, #40	@ 0x28
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c974:	4b2b      	ldr	r3, [pc, #172]	@ (800ca24 <_ux_device_stack_clear_feature+0xbc>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c97a:	4b2a      	ldr	r3, [pc, #168]	@ (800ca24 <_ux_device_stack_clear_feature+0xbc>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3320      	adds	r3, #32
 800c980:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	3318      	adds	r3, #24
 800c986:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f003 0303 	and.w	r3, r3, #3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <_ux_device_stack_clear_feature+0x30>
 800c992:	2b02      	cmp	r3, #2
 800c994:	d011      	beq.n	800c9ba <_ux_device_stack_clear_feature+0x52>
 800c996:	e036      	b.n	800ca06 <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d13b      	bne.n	800ca16 <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800c99e:	4b21      	ldr	r3, [pc, #132]	@ (800ca24 <_ux_device_stack_clear_feature+0xbc>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d005      	beq.n	800c9b6 <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800c9aa:	4b1e      	ldr	r3, [pc, #120]	@ (800ca24 <_ux_device_stack_clear_feature+0xbc>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800c9b4:	e02f      	b.n	800ca16 <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800c9b6:	2354      	movs	r3, #84	@ 0x54
 800c9b8:	e02f      	b.n	800ca1a <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c9c0:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800c9c2:	e01d      	b.n	800ca00 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	69db      	ldr	r3, [r3, #28]
 800c9c8:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800c9ca:	e013      	b.n	800c9f4 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800c9cc:	6a3b      	ldr	r3, [r7, #32]
 800c9ce:	7b9b      	ldrb	r3, [r3, #14]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d10a      	bne.n	800c9ee <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	699b      	ldr	r3, [r3, #24]
 800c9dc:	6a3a      	ldr	r2, [r7, #32]
 800c9de:	2110      	movs	r1, #16
 800c9e0:	69f8      	ldr	r0, [r7, #28]
 800c9e2:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	e015      	b.n	800ca1a <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	695b      	ldr	r3, [r3, #20]
 800c9f2:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1e8      	bne.n	800c9cc <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1de      	bne.n	800c9c4 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	697a      	ldr	r2, [r7, #20]
 800ca0c:	2114      	movs	r1, #20
 800ca0e:	69f8      	ldr	r0, [r7, #28]
 800ca10:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800ca12:	2300      	movs	r3, #0
 800ca14:	e001      	b.n	800ca1a <_ux_device_stack_clear_feature+0xb2>
        break;
 800ca16:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3728      	adds	r7, #40	@ 0x28
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	20003170 	.word	0x20003170

0800ca28 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ca2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ca6c <_ux_device_stack_configuration_get+0x44>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3320      	adds	r3, #32
 800ca34:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3318      	adds	r3, #24
 800ca3a:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	3320      	adds	r3, #32
 800ca40:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800ca4c:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ca4e:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2203      	movs	r2, #3
 800ca54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800ca56:	2201      	movs	r2, #1
 800ca58:	2101      	movs	r1, #1
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f001 f9e6 	bl	800de2c <_ux_device_stack_transfer_request>
 800ca60:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 800ca62:	683b      	ldr	r3, [r7, #0]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	20003170 	.word	0x20003170

0800ca70 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b0a0      	sub	sp, #128	@ 0x80
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800ca78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]
 800ca80:	605a      	str	r2, [r3, #4]
 800ca82:	609a      	str	r2, [r3, #8]
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	673b      	str	r3, [r7, #112]	@ 0x70
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	66bb      	str	r3, [r7, #104]	@ 0x68
ULONG                           iad_number_interfaces =  0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	667b      	str	r3, [r7, #100]	@ 0x64

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ca90:	4b84      	ldr	r3, [pc, #528]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ca96:	4b83      	ldr	r3, [pc, #524]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3320      	adds	r3, #32
 800ca9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800caa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d101      	bne.n	800cab2 <_ux_device_stack_configuration_set+0x42>
        return(UX_SUCCESS);
 800caae:	2300      	movs	r3, #0
 800cab0:	e139      	b.n	800cd26 <_ux_device_stack_configuration_set+0x2b6>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800cab2:	4b7c      	ldr	r3, [pc, #496]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800caba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800cabc:	4b79      	ldr	r3, [pc, #484]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cac4:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800cac6:	e01f      	b.n	800cb08 <_ux_device_stack_configuration_set+0x98>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800cac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800cace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cad0:	785b      	ldrb	r3, [r3, #1]
 800cad2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800cad6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d10c      	bne.n	800caf8 <_ux_device_stack_configuration_set+0x88>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800cade:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cae2:	2208      	movs	r2, #8
 800cae4:	4970      	ldr	r1, [pc, #448]	@ (800cca8 <_ux_device_stack_configuration_set+0x238>)
 800cae6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800cae8:	f001 fb24 	bl	800e134 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800caec:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800caf0:	461a      	mov	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d00b      	beq.n	800cb10 <_ux_device_stack_configuration_set+0xa0>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800caf8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cafa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	67bb      	str	r3, [r7, #120]	@ 0x78
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800cb00:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cb02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb04:	4413      	add	r3, r2
 800cb06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800cb08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1dc      	bne.n	800cac8 <_ux_device_stack_configuration_set+0x58>
 800cb0e:	e000      	b.n	800cb12 <_ux_device_stack_configuration_set+0xa2>
                break;
 800cb10:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800cb12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d104      	bne.n	800cb22 <_ux_device_stack_configuration_set+0xb2>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <_ux_device_stack_configuration_set+0xb2>
        return(UX_ERROR);
 800cb1e:	23ff      	movs	r3, #255	@ 0xff
 800cb20:	e101      	b.n	800cd26 <_ux_device_stack_configuration_set+0x2b6>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800cb22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d021      	beq.n	800cb70 <_ux_device_stack_configuration_set+0x100>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800cb2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cb32:	677b      	str	r3, [r7, #116]	@ 0x74

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800cb34:	e019      	b.n	800cb6a <_ux_device_stack_configuration_set+0xfa>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800cb36:	2303      	movs	r3, #3
 800cb38:	60bb      	str	r3, [r7, #8]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800cb3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb3c:	613b      	str	r3, [r7, #16]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800cb3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800cb44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb46:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800cb48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d005      	beq.n	800cb5a <_ux_device_stack_configuration_set+0xea>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800cb4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb52:	f107 0208 	add.w	r2, r7, #8
 800cb56:	4610      	mov	r0, r2
 800cb58:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800cb5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800cb60:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800cb62:	f000 ff0f 	bl	800d984 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800cb66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb68:	677b      	str	r3, [r7, #116]	@ 0x74
        while (interface_ptr != UX_NULL)
 800cb6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1e2      	bne.n	800cb36 <_ux_device_stack_configuration_set+0xc6>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800cb70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb72:	2200      	movs	r2, #0
 800cb74:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800cb78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800cb7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	2201      	movs	r2, #1
 800cb84:	2113      	movs	r1, #19
 800cb86:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800cb88:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <_ux_device_stack_configuration_set+0x124>
        return(UX_SUCCESS);
 800cb90:	2300      	movs	r3, #0
 800cb92:	e0c8      	b.n	800cd26 <_ux_device_stack_configuration_set+0x2b6>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800cb94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800cb9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb9e:	339c      	adds	r3, #156	@ 0x9c
    _ux_utility_descriptor_parse(device_framework,
 800cba0:	2208      	movs	r2, #8
 800cba2:	4941      	ldr	r1, [pc, #260]	@ (800cca8 <_ux_device_stack_configuration_set+0x238>)
 800cba4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800cba6:	f001 fac5 	bl	800e134 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800cbaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cbae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <_ux_device_stack_configuration_set+0x14a>
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	e000      	b.n	800cbbc <_ux_device_stack_configuration_set+0x14c>
 800cbba:	2201      	movs	r2, #1
 800cbbc:	4b39      	ldr	r3, [pc, #228]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800cbc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cbc8:	115b      	asrs	r3, r3, #5
 800cbca:	461a      	mov	r2, r3
 800cbcc:	4b35      	ldr	r3, [pc, #212]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f002 0201 	and.w	r2, r2, #1
 800cbd4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800cbd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cbdc:	67bb      	str	r3, [r7, #120]	@ 0x78

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800cbde:	e094      	b.n	800cd0a <_ux_device_stack_configuration_set+0x29a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800cbe0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800cbe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800cbee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cbf2:	2b0b      	cmp	r3, #11
 800cbf4:	d109      	bne.n	800cc0a <_ux_device_stack_configuration_set+0x19a>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800cbfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cbfc:	3302      	adds	r3, #2
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	66bb      	str	r3, [r7, #104]	@ 0x68

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800cc02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cc04:	3303      	adds	r3, #3
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800cc0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d173      	bne.n	800ccfa <_ux_device_stack_configuration_set+0x28a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800cc12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cc16:	2209      	movs	r2, #9
 800cc18:	4924      	ldr	r1, [pc, #144]	@ (800ccac <_ux_device_stack_configuration_set+0x23c>)
 800cc1a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800cc1c:	f001 fa8a 	bl	800e134 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800cc20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d168      	bne.n	800ccfa <_ux_device_stack_configuration_set+0x28a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800cc28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d140      	bne.n	800ccb0 <_ux_device_stack_configuration_set+0x240>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800cc2e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cc32:	461a      	mov	r2, r3
 800cc34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d122      	bne.n	800cc80 <_ux_device_stack_configuration_set+0x210>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800cc3a:	4b1a      	ldr	r3, [pc, #104]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800cc42:	653b      	str	r3, [r7, #80]	@ 0x50
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800cc44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d122      	bne.n	800cc92 <_ux_device_stack_configuration_set+0x222>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800cc4c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cc50:	461a      	mov	r2, r3
 800cc52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc54:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d11a      	bne.n	800cc92 <_ux_device_stack_configuration_set+0x222>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800cc5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d114      	bne.n	800cc92 <_ux_device_stack_configuration_set+0x222>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800cc68:	4b0e      	ldr	r3, [pc, #56]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cc70:	3344      	adds	r3, #68	@ 0x44
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc78:	605a      	str	r2, [r3, #4]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800cc7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7c:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc7e:	e008      	b.n	800cc92 <_ux_device_stack_configuration_set+0x222>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800cc80:	4b08      	ldr	r3, [pc, #32]	@ (800cca4 <_ux_device_stack_configuration_set+0x234>)
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cc88:	3344      	adds	r3, #68	@ 0x44
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cc90:	605a      	str	r2, [r3, #4]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800cc92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc94:	3b01      	subs	r3, #1
 800cc96:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800cc98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d128      	bne.n	800ccf0 <_ux_device_stack_configuration_set+0x280>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cca2:	e025      	b.n	800ccf0 <_ux_device_stack_configuration_set+0x280>
 800cca4:	20003170 	.word	0x20003170
 800cca8:	20000040 	.word	0x20000040
 800ccac:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800ccb0:	4b1f      	ldr	r3, [pc, #124]	@ (800cd30 <_ux_device_stack_configuration_set+0x2c0>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ccb8:	653b      	str	r3, [r7, #80]	@ 0x50
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800ccba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d116      	bne.n	800ccf0 <_ux_device_stack_configuration_set+0x280>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800ccc2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d10e      	bne.n	800ccf0 <_ux_device_stack_configuration_set+0x280>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800ccd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d108      	bne.n	800ccf0 <_ux_device_stack_configuration_set+0x280>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800ccde:	4b14      	ldr	r3, [pc, #80]	@ (800cd30 <_ux_device_stack_configuration_set+0x2c0>)
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cce6:	3344      	adds	r3, #68	@ 0x44
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccee:	605a      	str	r2, [r3, #4]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ccf4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800ccf6:	f000 fe8d 	bl	800da14 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800ccfa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ccfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800cd02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cd04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd06:	4413      	add	r3, r2
 800cd08:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800cd0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f47f af67 	bne.w	800cbe0 <_ux_device_stack_configuration_set+0x170>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800cd12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd14:	2203      	movs	r2, #3
 800cd16:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800cd18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd1a:	699b      	ldr	r3, [r3, #24]
 800cd1c:	2203      	movs	r2, #3
 800cd1e:	2113      	movs	r1, #19
 800cd20:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800cd22:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3780      	adds	r7, #128	@ 0x80
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	20003170 	.word	0x20003170

0800cd34 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800cd34:	b590      	push	{r4, r7, lr}
 800cd36:	b09d      	sub	sp, #116	@ 0x74
 800cd38:	af02      	add	r7, sp, #8
 800cd3a:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800cd3c:	23ff      	movs	r3, #255	@ 0xff
 800cd3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cd40:	4b9c      	ldr	r3, [pc, #624]	@ (800cfb4 <_ux_device_stack_control_request_process+0x280>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cd46:	4b9b      	ldr	r3, [pc, #620]	@ (800cfb4 <_ux_device_stack_control_request_process+0x280>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3320      	adds	r3, #32
 800cd4c:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f040 813b 	bne.w	800cfce <_ux_device_stack_control_request_process+0x29a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800cd5e:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800cd66:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3354      	adds	r3, #84	@ 0x54
 800cd6c:	3302      	adds	r3, #2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f001 fdbc 	bl	800e8ec <_ux_utility_short_get>
 800cd74:	64f8      	str	r0, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3354      	adds	r3, #84	@ 0x54
 800cd7a:	3304      	adds	r3, #4
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f001 fdb5 	bl	800e8ec <_ux_utility_short_get>
 800cd82:	64b8      	str	r0, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3354      	adds	r3, #84	@ 0x54
 800cd88:	3306      	adds	r3, #6
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 fdae 	bl	800e8ec <_ux_utility_short_get>
 800cd90:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800cd92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd94:	2b06      	cmp	r3, #6
 800cd96:	d002      	beq.n	800cd9e <_ux_device_stack_control_request_process+0x6a>
 800cd98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd9a:	2b07      	cmp	r3, #7
 800cd9c:	d10d      	bne.n	800cdba <_ux_device_stack_control_request_process+0x86>
 800cd9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cda0:	0a1b      	lsrs	r3, r3, #8
 800cda2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d007      	beq.n	800cdba <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800cdaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdac:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800cdb0:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800cdb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdb4:	f043 0320 	orr.w	r3, r3, #32
 800cdb8:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800cdba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cdc0:	2b40      	cmp	r3, #64	@ 0x40
 800cdc2:	d13a      	bne.n	800ce3a <_ux_device_stack_control_request_process+0x106>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800cdc4:	4b7b      	ldr	r3, [pc, #492]	@ (800cfb4 <_ux_device_stack_control_request_process+0x280>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d034      	beq.n	800ce3a <_ux_device_stack_control_request_process+0x106>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800cdd0:	4b78      	ldr	r3, [pc, #480]	@ (800cfb4 <_ux_device_stack_control_request_process+0x280>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800cdd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d12d      	bne.n	800ce3a <_ux_device_stack_control_request_process+0x106>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800cdde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cde2:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800cde4:	4b73      	ldr	r3, [pc, #460]	@ (800cfb4 <_ux_device_stack_control_request_process+0x280>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f8d3 4180 	ldr.w	r4, [r3, #384]	@ 0x180
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f107 020c 	add.w	r2, r7, #12
 800cdf4:	9201      	str	r2, [sp, #4]
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdfc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cdfe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ce00:	47a0      	blx	r4
 800ce02:	65f8      	str	r0, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800ce04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d110      	bne.n	800ce2c <_ux_device_stack_control_request_process+0xf8>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ce0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce0c:	3318      	adds	r3, #24
 800ce0e:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ce10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce12:	3320      	adds	r3, #32
 800ce14:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2203      	movs	r2, #3
 800ce1a:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce20:	4619      	mov	r1, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f001 f802 	bl	800de2c <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800ce28:	2300      	movs	r3, #0
 800ce2a:	e0d1      	b.n	800cfd0 <_ux_device_stack_control_request_process+0x29c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800ce2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce2e:	3318      	adds	r3, #24
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 fb49 	bl	800d4c8 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800ce36:	2300      	movs	r3, #0
 800ce38:	e0ca      	b.n	800cfd0 <_ux_device_stack_control_request_process+0x29c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800ce3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce40:	2b20      	cmp	r3, #32
 800ce42:	d004      	beq.n	800ce4e <_ux_device_stack_control_request_process+0x11a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800ce44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800ce4a:	2b40      	cmp	r3, #64	@ 0x40
 800ce4c:	d14f      	bne.n	800ceee <_ux_device_stack_control_request_process+0x1ba>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800ce4e:	2304      	movs	r3, #4
 800ce50:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800ce52:	2300      	movs	r3, #0
 800ce54:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce56:	e03b      	b.n	800ced0 <_ux_device_stack_control_request_process+0x19c>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800ce58:	4b56      	ldr	r3, [pc, #344]	@ (800cfb4 <_ux_device_stack_control_request_process+0x280>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce5e:	3344      	adds	r3, #68	@ 0x44
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800ce68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d02a      	beq.n	800cec4 <_ux_device_stack_control_request_process+0x190>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800ce6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce70:	f003 0303 	and.w	r3, r3, #3
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d118      	bne.n	800ceaa <_ux_device_stack_control_request_process+0x176>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800ce78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce7a:	2ba1      	cmp	r3, #161	@ 0xa1
 800ce7c:	d110      	bne.n	800cea0 <_ux_device_stack_control_request_process+0x16c>
 800ce7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10d      	bne.n	800cea0 <_ux_device_stack_control_request_process+0x16c>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 800ce84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce86:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ce8a:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800ce8c:	2b07      	cmp	r3, #7
 800ce8e:	d107      	bne.n	800cea0 <_ux_device_stack_control_request_process+0x16c>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ce96:	461a      	mov	r2, r3
 800ce98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d005      	beq.n	800ceaa <_ux_device_stack_control_request_process+0x176>
                            continue;
 800ce9e:	e014      	b.n	800ceca <_ux_device_stack_control_request_process+0x196>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 800cea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d10e      	bne.n	800cec8 <_ux_device_stack_control_request_process+0x194>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800ceaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceac:	633b      	str	r3, [r7, #48]	@ 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800ceae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceb2:	f107 0210 	add.w	r2, r7, #16
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	4798      	blx	r3
 800ceba:	65f8      	str	r0, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800cebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00a      	beq.n	800ced8 <_ux_device_stack_control_request_process+0x1a4>
 800cec2:	e002      	b.n	800ceca <_ux_device_stack_control_request_process+0x196>
                    continue;
 800cec4:	bf00      	nop
 800cec6:	e000      	b.n	800ceca <_ux_device_stack_control_request_process+0x196>
                            continue;
 800cec8:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800ceca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cecc:	3301      	adds	r3, #1
 800cece:	663b      	str	r3, [r7, #96]	@ 0x60
 800ced0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ced2:	2b0f      	cmp	r3, #15
 800ced4:	d9c0      	bls.n	800ce58 <_ux_device_stack_control_request_process+0x124>
 800ced6:	e000      	b.n	800ceda <_ux_device_stack_control_request_process+0x1a6>

                    /* We are done, break the loop!  */
                    break;
 800ced8:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800ceda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d004      	beq.n	800ceea <_ux_device_stack_control_request_process+0x1b6>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800cee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cee2:	3318      	adds	r3, #24
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 faef 	bl	800d4c8 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800ceea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ceec:	e070      	b.n	800cfd0 <_ux_device_stack_control_request_process+0x29c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800ceee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef0:	2b0c      	cmp	r3, #12
 800cef2:	d861      	bhi.n	800cfb8 <_ux_device_stack_control_request_process+0x284>
 800cef4:	a201      	add	r2, pc, #4	@ (adr r2, 800cefc <_ux_device_stack_control_request_process+0x1c8>)
 800cef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefa:	bf00      	nop
 800cefc:	0800cf31 	.word	0x0800cf31
 800cf00:	0800cf3f 	.word	0x0800cf3f
 800cf04:	0800cfb9 	.word	0x0800cfb9
 800cf08:	0800cf4d 	.word	0x0800cf4d
 800cf0c:	0800cfb9 	.word	0x0800cfb9
 800cf10:	0800cf5b 	.word	0x0800cf5b
 800cf14:	0800cf71 	.word	0x0800cf71
 800cf18:	0800cf7f 	.word	0x0800cf7f
 800cf1c:	0800cf85 	.word	0x0800cf85
 800cf20:	0800cf8d 	.word	0x0800cf8d
 800cf24:	0800cf97 	.word	0x0800cf97
 800cf28:	0800cfa1 	.word	0x0800cfa1
 800cf2c:	0800cfad 	.word	0x0800cfad
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800cf30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cf34:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800cf36:	f000 faff 	bl	800d538 <_ux_device_stack_get_status>
 800cf3a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf3c:	e03f      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800cf3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cf42:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800cf44:	f7ff fd10 	bl	800c968 <_ux_device_stack_clear_feature>
 800cf48:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf4a:	e038      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800cf4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf4e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cf50:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800cf52:	f000 fec3 	bl	800dcdc <_ux_device_stack_set_feature>
 800cf56:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf58:	e031      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800cf5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf5e:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800cf60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf62:	699b      	ldr	r3, [r3, #24]
 800cf64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf66:	2111      	movs	r1, #17
 800cf68:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf6a:	4798      	blx	r3
 800cf6c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf6e:	e026      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800cf70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cf74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cf76:	f000 f82f 	bl	800cfd8 <_ux_device_stack_descriptor_send>
 800cf7a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf7c:	e01f      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800cf7e:	2354      	movs	r3, #84	@ 0x54
 800cf80:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800cf82:	e01c      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800cf84:	f7ff fd50 	bl	800ca28 <_ux_device_stack_configuration_get>
 800cf88:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf8a:	e018      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800cf8c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cf8e:	f7ff fd6f 	bl	800ca70 <_ux_device_stack_configuration_set>
 800cf92:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf94:	e013      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800cf96:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800cf98:	f7ff fa50 	bl	800c43c <_ux_device_stack_alternate_setting_get>
 800cf9c:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cf9e:	e00e      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800cfa0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cfa2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800cfa4:	f7ff fa88 	bl	800c4b8 <_ux_device_stack_alternate_setting_set>
 800cfa8:	65f8      	str	r0, [r7, #92]	@ 0x5c
            break;
 800cfaa:	e008      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800cfac:	2300      	movs	r3, #0
 800cfae:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800cfb0:	e005      	b.n	800cfbe <_ux_device_stack_control_request_process+0x28a>
 800cfb2:	bf00      	nop
 800cfb4:	20003170 	.word	0x20003170

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800cfb8:	2354      	movs	r3, #84	@ 0x54
 800cfba:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800cfbc:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 800cfbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d004      	beq.n	800cfce <_ux_device_stack_control_request_process+0x29a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800cfc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc6:	3318      	adds	r3, #24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 fa7d 	bl	800d4c8 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800cfce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	376c      	adds	r7, #108	@ 0x6c
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd90      	pop	{r4, r7, pc}

0800cfd8 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b09a      	sub	sp, #104	@ 0x68
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 800cfe8:	23ff      	movs	r3, #255	@ 0xff
 800cfea:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cfec:	4b98      	ldr	r3, [pc, #608]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cff2:	4b97      	ldr	r3, [pc, #604]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3320      	adds	r3, #32
 800cff8:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800cffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cffc:	3318      	adds	r3, #24
 800cffe:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d002:	3320      	adds	r3, #32
 800d004:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800d006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d008:	2203      	movs	r2, #3
 800d00a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800d012:	2300      	movs	r3, #0
 800d014:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	0a1b      	lsrs	r3, r3, #8
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3b01      	subs	r3, #1
 800d026:	2b0e      	cmp	r3, #14
 800d028:	f200 81e1 	bhi.w	800d3ee <_ux_device_stack_descriptor_send+0x416>
 800d02c:	a201      	add	r2, pc, #4	@ (adr r2, 800d034 <_ux_device_stack_descriptor_send+0x5c>)
 800d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d032:	bf00      	nop
 800d034:	0800d071 	.word	0x0800d071
 800d038:	0800d105 	.word	0x0800d105
 800d03c:	0800d221 	.word	0x0800d221
 800d040:	0800d3ef 	.word	0x0800d3ef
 800d044:	0800d3ef 	.word	0x0800d3ef
 800d048:	0800d07b 	.word	0x0800d07b
 800d04c:	0800d105 	.word	0x0800d105
 800d050:	0800d3ef 	.word	0x0800d3ef
 800d054:	0800d08b 	.word	0x0800d08b
 800d058:	0800d3ef 	.word	0x0800d3ef
 800d05c:	0800d3ef 	.word	0x0800d3ef
 800d060:	0800d3ef 	.word	0x0800d3ef
 800d064:	0800d3ef 	.word	0x0800d3ef
 800d068:	0800d3ef 	.word	0x0800d3ef
 800d06c:	0800d105 	.word	0x0800d105
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b12      	cmp	r3, #18
 800d074:	d901      	bls.n	800d07a <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800d076:	2312      	movs	r3, #18
 800d078:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b06      	cmp	r3, #6
 800d07e:	d104      	bne.n	800d08a <_ux_device_stack_descriptor_send+0xb2>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b0a      	cmp	r3, #10
 800d084:	d901      	bls.n	800d08a <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800d086:	230a      	movs	r3, #10
 800d088:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b09      	cmp	r3, #9
 800d08e:	d104      	bne.n	800d09a <_ux_device_stack_descriptor_send+0xc2>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b05      	cmp	r3, #5
 800d094:	d901      	bls.n	800d09a <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800d096:	2305      	movs	r3, #5
 800d098:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800d09a:	4b6d      	ldr	r3, [pc, #436]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0a2:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800d0a4:	4b6a      	ldr	r3, [pc, #424]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d0ac:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 800d0ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d0b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d0b2:	4413      	add	r3, r2
 800d0b4:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800d0b6:	e020      	b.n	800d0fa <_ux_device_stack_descriptor_send+0x122>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800d0b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800d0be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d10e      	bne.n	800d0ea <_ux_device_stack_descriptor_send+0x112>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0d2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f001 fad1 	bl	800e67c <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d0de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d0e0:	f000 fea4 	bl	800de2c <_ux_device_stack_transfer_request>
 800d0e4:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800d0e6:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800d0e8:	e18c      	b.n	800d404 <_ux_device_stack_descriptor_send+0x42c>
            device_framework_length -=  descriptor_length;
 800d0ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 800d0f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f6:	4413      	add	r3, r2
 800d0f8:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800d0fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d0fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d3da      	bcc.n	800d0b8 <_ux_device_stack_descriptor_send+0xe0>
        break;
 800d102:	e17f      	b.n	800d404 <_ux_device_stack_descriptor_send+0x42c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b07      	cmp	r3, #7
 800d108:	d10e      	bne.n	800d128 <_ux_device_stack_descriptor_send+0x150>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800d10a:	4b51      	ldr	r3, [pc, #324]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d112:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800d114:	4b4e      	ldr	r3, [pc, #312]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800d11c:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800d11e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d122:	4413      	add	r3, r2
 800d124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d126:	e045      	b.n	800d1b4 <_ux_device_stack_descriptor_send+0x1dc>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800d128:	4b49      	ldr	r3, [pc, #292]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d130:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800d132:	4b47      	ldr	r3, [pc, #284]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d13a:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800d13c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d13e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d140:	4413      	add	r3, r2
 800d142:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800d144:	e036      	b.n	800d1b4 <_ux_device_stack_descriptor_send+0x1dc>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800d146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b0f      	cmp	r3, #15
 800d150:	d110      	bne.n	800d174 <_ux_device_stack_descriptor_send+0x19c>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800d152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d154:	3301      	adds	r3, #1
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b0f      	cmp	r3, #15
 800d15a:	d123      	bne.n	800d1a4 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800d15c:	f107 0310 	add.w	r3, r7, #16
 800d160:	2204      	movs	r2, #4
 800d162:	493c      	ldr	r1, [pc, #240]	@ (800d254 <_ux_device_stack_descriptor_send+0x27c>)
 800d164:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d166:	f000 ffe5 	bl	800e134 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800d16a:	8a7b      	ldrh	r3, [r7, #18]
 800d16c:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800d16e:	2300      	movs	r3, #0
 800d170:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 800d172:	e023      	b.n	800d1bc <_ux_device_stack_descriptor_send+0x1e4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800d174:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d176:	3301      	adds	r3, #1
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d112      	bne.n	800d1a4 <_ux_device_stack_descriptor_send+0x1cc>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800d17e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	429a      	cmp	r2, r3
 800d184:	d10b      	bne.n	800d19e <_ux_device_stack_descriptor_send+0x1c6>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800d186:	f107 0318 	add.w	r3, r7, #24
 800d18a:	2208      	movs	r2, #8
 800d18c:	4932      	ldr	r1, [pc, #200]	@ (800d258 <_ux_device_stack_descriptor_send+0x280>)
 800d18e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d190:	f000 ffd0 	bl	800e134 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800d194:	8b7b      	ldrh	r3, [r7, #26]
 800d196:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800d198:	2300      	movs	r3, #0
 800d19a:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800d19c:	e00e      	b.n	800d1bc <_ux_device_stack_descriptor_send+0x1e4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800d19e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800d1a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800d1ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b0:	4413      	add	r3, r2
 800d1b2:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800d1b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d1b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d3c4      	bcc.n	800d146 <_ux_device_stack_descriptor_send+0x16e>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800d1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f040 811d 	bne.w	800d3fe <_ux_device_stack_descriptor_send+0x426>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800d1c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d202      	bcs.n	800d1d2 <_ux_device_stack_descriptor_send+0x1fa>
                length =  target_descriptor_length;
 800d1cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1d0:	e001      	b.n	800d1d6 <_ux_device_stack_descriptor_send+0x1fe>
            else
                length =  host_length;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1dc:	d90c      	bls.n	800d1f8 <_ux_device_stack_descriptor_send+0x220>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800d1de:	2212      	movs	r2, #18
 800d1e0:	2109      	movs	r1, #9
 800d1e2:	2002      	movs	r0, #2
 800d1e4:	f000 feac 	bl	800df40 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d1e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1ee:	2114      	movs	r1, #20
 800d1f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d1f2:	4798      	blx	r3
 800d1f4:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800d1f6:	e105      	b.n	800d404 <_ux_device_stack_descriptor_send+0x42c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d200:	4618      	mov	r0, r3
 800d202:	f001 fa3b 	bl	800e67c <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800d206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	3301      	adds	r3, #1
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	b2d2      	uxtb	r2, r2
 800d210:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d218:	f000 fe08 	bl	800de2c <_ux_device_stack_transfer_request>
 800d21c:	6538      	str	r0, [r7, #80]	@ 0x50
        }
        break;
 800d21e:	e0ee      	b.n	800d3fe <_ux_device_stack_descriptor_send+0x426>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800d220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d222:	2b00      	cmp	r3, #0
 800d224:	d14f      	bne.n	800d2c6 <_ux_device_stack_descriptor_send+0x2ee>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800d226:	4b0a      	ldr	r3, [pc, #40]	@ (800d250 <_ux_device_stack_descriptor_send+0x278>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d22e:	3302      	adds	r3, #2
 800d230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d234:	d912      	bls.n	800d25c <_ux_device_stack_descriptor_send+0x284>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800d236:	2212      	movs	r2, #18
 800d238:	2109      	movs	r1, #9
 800d23a:	2002      	movs	r0, #2
 800d23c:	f000 fe80 	bl	800df40 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d246:	2114      	movs	r1, #20
 800d248:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d24a:	4798      	blx	r3
 800d24c:	6538      	str	r0, [r7, #80]	@ 0x50
                break;
 800d24e:	e0d9      	b.n	800d404 <_ux_device_stack_descriptor_send+0x42c>
 800d250:	20003170 	.word	0x20003170
 800d254:	20000054 	.word	0x20000054
 800d258:	20000040 	.word	0x20000040
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800d25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800d262:	4b6b      	ldr	r3, [pc, #428]	@ (800d410 <_ux_device_stack_descriptor_send+0x438>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	3302      	adds	r3, #2
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d272:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	3301      	adds	r3, #1
 800d278:	2203      	movs	r2, #3
 800d27a:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	1c98      	adds	r0, r3, #2
 800d280:	4b63      	ldr	r3, [pc, #396]	@ (800d410 <_ux_device_stack_descriptor_send+0x438>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f8d3 1100 	ldr.w	r1, [r3, #256]	@ 0x100
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800d288:	4b61      	ldr	r3, [pc, #388]	@ (800d410 <_ux_device_stack_descriptor_send+0x438>)
 800d28a:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800d28c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d290:	461a      	mov	r2, r3
 800d292:	f001 f9f3 	bl	800e67c <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800d296:	4b5e      	ldr	r3, [pc, #376]	@ (800d410 <_ux_device_stack_descriptor_send+0x438>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d29e:	3302      	adds	r3, #2
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d906      	bls.n	800d2b4 <_ux_device_stack_descriptor_send+0x2dc>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800d2a6:	4b5a      	ldr	r3, [pc, #360]	@ (800d410 <_ux_device_stack_descriptor_send+0x438>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800d2ae:	3302      	adds	r3, #2
 800d2b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2b2:	e001      	b.n	800d2b8 <_ux_device_stack_descriptor_send+0x2e0>
            else
                length =  host_length;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d2bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2be:	f000 fdb5 	bl	800de2c <_ux_device_stack_transfer_request>
 800d2c2:	6538      	str	r0, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800d2c4:	e09d      	b.n	800d402 <_ux_device_stack_descriptor_send+0x42a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800d2c6:	4b52      	ldr	r3, [pc, #328]	@ (800d410 <_ux_device_stack_descriptor_send+0x438>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800d2ce:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800d2d0:	4b4f      	ldr	r3, [pc, #316]	@ (800d410 <_ux_device_stack_descriptor_send+0x438>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800d2d8:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 800d2da:	e07a      	b.n	800d3d2 <_ux_device_stack_descriptor_send+0x3fa>
                if (_ux_utility_short_get(string_framework) == request_index)
 800d2dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d2de:	f001 fb05 	bl	800e8ec <_ux_utility_short_get>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d164      	bne.n	800d3b4 <_ux_device_stack_descriptor_send+0x3dc>
                    if (*(string_framework + 2) == descriptor_index)
 800d2ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2ec:	3302      	adds	r3, #2
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d15d      	bne.n	800d3b4 <_ux_device_stack_descriptor_send+0x3dc>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800d2f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2fa:	3303      	adds	r3, #3
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	3301      	adds	r3, #1
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d306:	dd0c      	ble.n	800d322 <_ux_device_stack_descriptor_send+0x34a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800d308:	2212      	movs	r2, #18
 800d30a:	2109      	movs	r1, #9
 800d30c:	2002      	movs	r0, #2
 800d30e:	f000 fe17 	bl	800df40 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d318:	2114      	movs	r1, #20
 800d31a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d31c:	4798      	blx	r3
 800d31e:	6538      	str	r0, [r7, #80]	@ 0x50
                            break;
 800d320:	e05a      	b.n	800d3d8 <_ux_device_stack_descriptor_send+0x400>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800d322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800d328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d32a:	3303      	adds	r3, #3
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	3301      	adds	r3, #1
 800d330:	b2db      	uxtb	r3, r3
 800d332:	005b      	lsls	r3, r3, #1
 800d334:	b2da      	uxtb	r2, r3
 800d336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d338:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33c:	3301      	adds	r3, #1
 800d33e:	2203      	movs	r2, #3
 800d340:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800d342:	2300      	movs	r3, #0
 800d344:	643b      	str	r3, [r7, #64]	@ 0x40
 800d346:	e015      	b.n	800d374 <_ux_device_stack_descriptor_send+0x39c>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800d348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d34a:	3304      	adds	r3, #4
 800d34c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d34e:	441a      	add	r2, r3
 800d350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d352:	3301      	adds	r3, #1
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d358:	440b      	add	r3, r1
 800d35a:	7812      	ldrb	r2, [r2, #0]
 800d35c:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800d35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d360:	3301      	adds	r3, #1
 800d362:	005b      	lsls	r3, r3, #1
 800d364:	3301      	adds	r3, #1
 800d366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d368:	4413      	add	r3, r2
 800d36a:	2200      	movs	r2, #0
 800d36c:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800d36e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d370:	3301      	adds	r3, #1
 800d372:	643b      	str	r3, [r7, #64]	@ 0x40
 800d374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d376:	3303      	adds	r3, #3
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	461a      	mov	r2, r3
 800d37c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d37e:	4293      	cmp	r3, r2
 800d380:	d3e2      	bcc.n	800d348 <_ux_device_stack_descriptor_send+0x370>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800d382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d384:	3303      	adds	r3, #3
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	3301      	adds	r3, #1
 800d38a:	005b      	lsls	r3, r3, #1
 800d38c:	461a      	mov	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4293      	cmp	r3, r2
 800d392:	d906      	bls.n	800d3a2 <_ux_device_stack_descriptor_send+0x3ca>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800d394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d396:	3303      	adds	r3, #3
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	3301      	adds	r3, #1
 800d39c:	005b      	lsls	r3, r3, #1
 800d39e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3a0:	e001      	b.n	800d3a6 <_ux_device_stack_descriptor_send+0x3ce>
                            length =  host_length;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d3aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3ac:	f000 fd3e 	bl	800de2c <_ux_device_stack_transfer_request>
 800d3b0:	6538      	str	r0, [r7, #80]	@ 0x50
                        break;
 800d3b2:	e011      	b.n	800d3d8 <_ux_device_stack_descriptor_send+0x400>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800d3b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3b6:	3303      	adds	r3, #3
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3be:	1a9b      	subs	r3, r3, r2
 800d3c0:	3b04      	subs	r3, #4
 800d3c2:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800d3c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3c6:	3303      	adds	r3, #3
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	3304      	adds	r3, #4
 800d3cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3ce:	4413      	add	r3, r2
 800d3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 800d3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d181      	bne.n	800d2dc <_ux_device_stack_descriptor_send+0x304>
            if (string_framework_length == 0)
 800d3d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d111      	bne.n	800d402 <_ux_device_stack_descriptor_send+0x42a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3e4:	2114      	movs	r1, #20
 800d3e6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d3e8:	4798      	blx	r3
                return(UX_ERROR);
 800d3ea:	23ff      	movs	r3, #255	@ 0xff
 800d3ec:	e00b      	b.n	800d406 <_ux_device_stack_descriptor_send+0x42e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d3ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3f4:	2114      	movs	r1, #20
 800d3f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d3f8:	4798      	blx	r3
        return(UX_ERROR);
 800d3fa:	23ff      	movs	r3, #255	@ 0xff
 800d3fc:	e003      	b.n	800d406 <_ux_device_stack_descriptor_send+0x42e>
        break;
 800d3fe:	bf00      	nop
 800d400:	e000      	b.n	800d404 <_ux_device_stack_descriptor_send+0x42c>
        break;
 800d402:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800d404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800d406:	4618      	mov	r0, r3
 800d408:	3768      	adds	r7, #104	@ 0x68
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20003170 	.word	0x20003170

0800d414 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b092      	sub	sp, #72	@ 0x48
 800d418:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800d41a:	23ff      	movs	r3, #255	@ 0xff
 800d41c:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d41e:	4b29      	ldr	r3, [pc, #164]	@ (800d4c4 <_ux_device_stack_disconnect+0xb0>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d424:	4b27      	ldr	r3, [pc, #156]	@ (800d4c4 <_ux_device_stack_disconnect+0xb0>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3320      	adds	r3, #32
 800d42a:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800d42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b03      	cmp	r3, #3
 800d432:	d123      	bne.n	800d47c <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800d434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d43a:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800d43c:	e018      	b.n	800d470 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800d43e:	2303      	movs	r3, #3
 800d440:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800d442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d444:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800d446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800d44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800d450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d452:	2b00      	cmp	r3, #0
 800d454:	d004      	beq.n	800d460 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800d456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d45a:	1d3a      	adds	r2, r7, #4
 800d45c:	4610      	mov	r0, r2
 800d45e:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800d460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d462:	699b      	ldr	r3, [r3, #24]
 800d464:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800d466:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d468:	f000 fa8c 	bl	800d984 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800d46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d46e:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 800d470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1e3      	bne.n	800d43e <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800d476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d478:	2201      	movs	r2, #1
 800d47a:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d107      	bne.n	800d494 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800d484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d486:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800d488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d48a:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800d48c:	210f      	movs	r1, #15
 800d48e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d490:	4798      	blx	r3
 800d492:	6438      	str	r0, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800d494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d496:	2200      	movs	r2, #0
 800d498:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800d49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49e:	2200      	movs	r2, #0
 800d4a0:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800d4a2:	4b08      	ldr	r3, [pc, #32]	@ (800d4c4 <_ux_device_stack_disconnect+0xb0>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d005      	beq.n	800d4ba <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800d4ae:	4b05      	ldr	r3, [pc, #20]	@ (800d4c4 <_ux_device_stack_disconnect+0xb0>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800d4b6:	200a      	movs	r0, #10
 800d4b8:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800d4ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3748      	adds	r7, #72	@ 0x48
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	20003170 	.word	0x20003170

0800d4c8 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d4d0:	4b18      	ldr	r3, [pc, #96]	@ (800d534 <_ux_device_stack_endpoint_stall+0x6c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800d4d6:	23ff      	movs	r3, #255	@ 0xff
 800d4d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4da:	f3ef 8310 	mrs	r3, PRIMASK
 800d4de:	613b      	str	r3, [r7, #16]
    return(posture);
 800d4e0:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d4e2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d4e4:	b672      	cpsid	i
    return(int_posture);
 800d4e6:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800d4e8:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800d4ea:	4b12      	ldr	r3, [pc, #72]	@ (800d534 <_ux_device_stack_endpoint_stall+0x6c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	6a1b      	ldr	r3, [r3, #32]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d013      	beq.n	800d51c <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d00f      	beq.n	800d51c <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	2114      	movs	r1, #20
 800d504:	69b8      	ldr	r0, [r7, #24]
 800d506:	4798      	blx	r3
 800d508:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	7bdb      	ldrb	r3, [r3, #15]
 800d50e:	f003 0303 	and.w	r3, r3, #3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2202      	movs	r2, #2
 800d51a:	605a      	str	r2, [r3, #4]
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f383 8810 	msr	PRIMASK, r3
}
 800d526:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 800d528:	69fb      	ldr	r3, [r7, #28]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3720      	adds	r7, #32
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	20003170 	.word	0x20003170

0800d538 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b08a      	sub	sp, #40	@ 0x28
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d544:	4b39      	ldr	r3, [pc, #228]	@ (800d62c <_ux_device_stack_get_status+0xf4>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d54a:	4b38      	ldr	r3, [pc, #224]	@ (800d62c <_ux_device_stack_get_status+0xf4>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3320      	adds	r3, #32
 800d550:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	3318      	adds	r3, #24
 800d556:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	3320      	adds	r3, #32
 800d55c:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	3301      	adds	r3, #1
 800d56c:	2200      	movs	r2, #0
 800d56e:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800d570:	2302      	movs	r3, #2
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0303 	and.w	r3, r3, #3
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <_ux_device_stack_get_status+0x4c>
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d021      	beq.n	800d5c6 <_ux_device_stack_get_status+0x8e>
 800d582:	e03a      	b.n	800d5fa <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 800d58a:	d102      	bne.n	800d592 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800d58c:	2301      	movs	r3, #1
 800d58e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800d590:	e03b      	b.n	800d60a <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800d592:	4b26      	ldr	r3, [pc, #152]	@ (800d62c <_ux_device_stack_get_status+0xf4>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d103      	bne.n	800d5a6 <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800d5a6:	4b21      	ldr	r3, [pc, #132]	@ (800d62c <_ux_device_stack_get_status+0xf4>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d02b      	beq.n	800d60a <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	781a      	ldrb	r2, [r3, #0]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	f042 0202 	orr.w	r2, r2, #2
 800d5c0:	b2d2      	uxtb	r2, r2
 800d5c2:	701a      	strb	r2, [r3, #0]
        break;
 800d5c4:	e021      	b.n	800d60a <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	2115      	movs	r1, #21
 800d5ce:	6a38      	ldr	r0, [r7, #32]
 800d5d0:	4798      	blx	r3
 800d5d2:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	2bff      	cmp	r3, #255	@ 0xff
 800d5d8:	d007      	beq.n	800d5ea <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d116      	bne.n	800d60e <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800d5e8:	e011      	b.n	800d60e <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	69ba      	ldr	r2, [r7, #24]
 800d5f0:	2114      	movs	r1, #20
 800d5f2:	6a38      	ldr	r0, [r7, #32]
 800d5f4:	4798      	blx	r3
            return(UX_SUCCESS);            
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	e014      	b.n	800d624 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	69ba      	ldr	r2, [r7, #24]
 800d600:	2114      	movs	r1, #20
 800d602:	6a38      	ldr	r0, [r7, #32]
 800d604:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800d606:	2300      	movs	r3, #0
 800d608:	e00c      	b.n	800d624 <_ux_device_stack_get_status+0xec>
        break;
 800d60a:	bf00      	nop
 800d60c:	e000      	b.n	800d610 <_ux_device_stack_get_status+0xd8>
        break;
 800d60e:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2203      	movs	r2, #3
 800d614:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800d616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d61a:	6978      	ldr	r0, [r7, #20]
 800d61c:	f000 fc06 	bl	800de2c <_ux_device_stack_transfer_request>
 800d620:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800d622:	693b      	ldr	r3, [r7, #16]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3728      	adds	r7, #40	@ 0x28
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20003170 	.word	0x20003170

0800d630 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b094      	sub	sp, #80	@ 0x50
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
 800d63c:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d63e:	4b9a      	ldr	r3, [pc, #616]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	3320      	adds	r3, #32
 800d644:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800d646:	4b98      	ldr	r3, [pc, #608]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800d650:	4b95      	ldr	r3, [pc, #596]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800d65a:	4b93      	ldr	r3, [pc, #588]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800d664:	4b90      	ldr	r3, [pc, #576]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	683a      	ldr	r2, [r7, #0]
 800d66a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800d66e:	4b8e      	ldr	r3, [pc, #568]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d674:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800d678:	4b8b      	ldr	r3, [pc, #556]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d67e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800d682:	4b89      	ldr	r3, [pc, #548]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d688:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800d68c:	4b86      	ldr	r3, [pc, #536]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d692:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800d696:	4b84      	ldr	r3, [pc, #528]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d69c:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800d6a0:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f000 fde2 	bl	800e270 <_ux_utility_memory_allocate>
 800d6ac:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <_ux_device_stack_initialize+0x88>
        return(UX_MEMORY_INSUFFICIENT);
 800d6b4:	2312      	movs	r3, #18
 800d6b6:	e15d      	b.n	800d974 <_ux_device_stack_initialize+0x344>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800d6b8:	4b7b      	ldr	r3, [pc, #492]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6a3a      	ldr	r2, [r7, #32]
 800d6be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c4:	3338      	adds	r3, #56	@ 0x38
 800d6c6:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800d6c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	f000 fdce 	bl	800e270 <_ux_utility_memory_allocate>
 800d6d4:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d102      	bne.n	800d6e8 <_ux_device_stack_initialize+0xb8>
        status = UX_MEMORY_INSUFFICIENT;
 800d6e2:	2312      	movs	r3, #18
 800d6e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6e6:	e001      	b.n	800d6ec <_ux_device_stack_initialize+0xbc>
    else
        status = UX_SUCCESS;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800d6f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f040 8090 	bne.w	800d820 <_ux_device_stack_initialize+0x1f0>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800d700:	4b69      	ldr	r3, [pc, #420]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d708:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800d70a:	4b67      	ldr	r3, [pc, #412]	@ (800d8a8 <_ux_device_stack_initialize+0x278>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800d712:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800d714:	2300      	movs	r3, #0
 800d716:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 800d718:	2300      	movs	r3, #0
 800d71a:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 800d71c:	2300      	movs	r3, #0
 800d71e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800d720:	e054      	b.n	800d7cc <_ux_device_stack_initialize+0x19c>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800d722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72a:	785b      	ldrb	r3, [r3, #1]
 800d72c:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800d72e:	7dfb      	ldrb	r3, [r7, #23]
 800d730:	2b02      	cmp	r3, #2
 800d732:	d029      	beq.n	800d788 <_ux_device_stack_initialize+0x158>
 800d734:	2b04      	cmp	r3, #4
 800d736:	d13e      	bne.n	800d7b6 <_ux_device_stack_initialize+0x186>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73a:	3303      	adds	r3, #3
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10b      	bne.n	800d75a <_ux_device_stack_initialize+0x12a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800d742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d746:	4413      	add	r3, r2
 800d748:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74c:	3304      	adds	r3, #4
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	3301      	adds	r3, #1
 800d756:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d758:	e00a      	b.n	800d770 <_ux_device_stack_initialize+0x140>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800d75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75c:	3304      	adds	r3, #4
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	461a      	mov	r2, r3
 800d762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d764:	4293      	cmp	r3, r2
 800d766:	d203      	bcs.n	800d770 <_ux_device_stack_initialize+0x140>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800d768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76a:	3304      	adds	r3, #4
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800d770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d772:	3302      	adds	r3, #2
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d21d      	bcs.n	800d7ba <_ux_device_stack_initialize+0x18a>
                    max_interface_number = *(device_framework + 2);
 800d77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d780:	3302      	adds	r3, #2
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 800d786:	e018      	b.n	800d7ba <_ux_device_stack_initialize+0x18a>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800d788:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d78a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d901      	bls.n	800d794 <_ux_device_stack_initialize+0x164>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800d790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d792:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800d794:	2300      	movs	r3, #0
 800d796:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800d798:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	4413      	add	r3, r2
 800d79e:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800d7a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d901      	bls.n	800d7ac <_ux_device_stack_initialize+0x17c>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800d7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7aa:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 800d7b4:	e002      	b.n	800d7bc <_ux_device_stack_initialize+0x18c>

            default:
                break;
 800d7b6:	bf00      	nop
 800d7b8:	e000      	b.n	800d7bc <_ux_device_stack_initialize+0x18c>
                break;
 800d7ba:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800d7bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800d7c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 800d7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1a7      	bne.n	800d722 <_ux_device_stack_initialize+0xf2>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800d7d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d6:	4413      	add	r3, r2
 800d7d8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800d7da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d901      	bls.n	800d7e6 <_ux_device_stack_initialize+0x1b6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800d7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e4:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800d7e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d901      	bls.n	800d7f2 <_ux_device_stack_initialize+0x1c2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f0:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800d7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d106      	bne.n	800d806 <_ux_device_stack_initialize+0x1d6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800d7f8:	2242      	movs	r2, #66	@ 0x42
 800d7fa:	2103      	movs	r1, #3
 800d7fc:	2002      	movs	r0, #2
 800d7fe:	f000 fb9f 	bl	800df40 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800d802:	2342      	movs	r3, #66	@ 0x42
 800d804:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800d806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d109      	bne.n	800d820 <_ux_device_stack_initialize+0x1f0>
 800d80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d80e:	2b0f      	cmp	r3, #15
 800d810:	d906      	bls.n	800d820 <_ux_device_stack_initialize+0x1f0>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800d812:	2212      	movs	r2, #18
 800d814:	2103      	movs	r1, #3
 800d816:	2002      	movs	r0, #2
 800d818:	f000 fb92 	bl	800df40 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800d81c:	2312      	movs	r3, #18
 800d81e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800d820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d822:	2b00      	cmp	r3, #0
 800d824:	d118      	bne.n	800d858 <_ux_device_stack_initialize+0x228>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800d826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d82a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800d82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d830:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d832:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800d836:	2320      	movs	r3, #32
 800d838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d83a:	2100      	movs	r1, #0
 800d83c:	2000      	movs	r0, #0
 800d83e:	f000 fe0b 	bl	800e458 <_ux_utility_memory_allocate_mulc_safe>
 800d842:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <_ux_device_stack_initialize+0x220>
            status = UX_MEMORY_INSUFFICIENT;
 800d84a:	2312      	movs	r3, #18
 800d84c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d84e:	e003      	b.n	800d858 <_ux_device_stack_initialize+0x228>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800d850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d852:	693a      	ldr	r2, [r7, #16]
 800d854:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800d858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d042      	beq.n	800d8e4 <_ux_device_stack_initialize+0x2b4>
 800d85e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d860:	2b00      	cmp	r3, #0
 800d862:	d13f      	bne.n	800d8e4 <_ux_device_stack_initialize+0x2b4>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800d864:	2380      	movs	r3, #128	@ 0x80
 800d866:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d868:	2100      	movs	r1, #0
 800d86a:	2000      	movs	r0, #0
 800d86c:	f000 fdf4 	bl	800e458 <_ux_utility_memory_allocate_mulc_safe>
 800d870:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 800d872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d874:	2b00      	cmp	r3, #0
 800d876:	d102      	bne.n	800d87e <_ux_device_stack_initialize+0x24e>
            status = UX_MEMORY_INSUFFICIENT;
 800d878:	2312      	movs	r3, #18
 800d87a:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 800d87c:	e034      	b.n	800d8e8 <_ux_device_stack_initialize+0x2b8>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d882:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800d886:	e022      	b.n	800d8ce <_ux_device_stack_initialize+0x29e>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800d888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d88c:	2101      	movs	r1, #1
 800d88e:	2000      	movs	r0, #0
 800d890:	f000 fcee 	bl	800e270 <_ux_utility_memory_allocate>
 800d894:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800d896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d898:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800d89a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d104      	bne.n	800d8ac <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800d8a2:	2312      	movs	r3, #18
 800d8a4:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d8a6:	e01c      	b.n	800d8e2 <_ux_device_stack_initialize+0x2b2>
 800d8a8:	20003170 	.word	0x20003170
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800d8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8ae:	3350      	adds	r3, #80	@ 0x50
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4932      	ldr	r1, [pc, #200]	@ (800d97c <_ux_device_stack_initialize+0x34c>)
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 ffe5 	bl	800e884 <_ux_utility_semaphore_create>
 800d8ba:	64b8      	str	r0, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800d8bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <_ux_device_stack_initialize+0x298>
                {
                    status = UX_SEMAPHORE_ERROR;
 800d8c2:	2315      	movs	r3, #21
 800d8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d8c6:	e00c      	b.n	800d8e2 <_ux_device_stack_initialize+0x2b2>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800d8c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8ca:	3380      	adds	r3, #128	@ 0x80
 800d8cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800d8d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8d6:	01db      	lsls	r3, r3, #7
 800d8d8:	4413      	add	r3, r2
 800d8da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d3d3      	bcc.n	800d888 <_ux_device_stack_initialize+0x258>
        if (endpoints_pool == UX_NULL)
 800d8e0:	e002      	b.n	800d8e8 <_ux_device_stack_initialize+0x2b8>
 800d8e2:	e001      	b.n	800d8e8 <_ux_device_stack_initialize+0x2b8>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800d8e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <_ux_device_stack_initialize+0x2c2>
        return(UX_SUCCESS);
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e040      	b.n	800d974 <_ux_device_stack_initialize+0x344>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800d8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d021      	beq.n	800d93c <_ux_device_stack_initialize+0x30c>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800d8f8:	e014      	b.n	800d924 <_ux_device_stack_initialize+0x2f4>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 800d8fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d004      	beq.n	800d90c <_ux_device_stack_initialize+0x2dc>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800d902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d904:	3350      	adds	r3, #80	@ 0x50
 800d906:	4618      	mov	r0, r3
 800d908:	f000 ffd6 	bl	800e8b8 <_ux_utility_semaphore_delete>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800d90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d004      	beq.n	800d91e <_ux_device_stack_initialize+0x2ee>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800d914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fecd 	bl	800e6b8 <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800d91e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d920:	3b80      	subs	r3, #128	@ 0x80
 800d922:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800d924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d92a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d2e4      	bcs.n	800d8fa <_ux_device_stack_initialize+0x2ca>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800d930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d936:	4618      	mov	r0, r3
 800d938:	f000 febe 	bl	800e6b8 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800d93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d942:	2b00      	cmp	r3, #0
 800d944:	d005      	beq.n	800d952 <_ux_device_stack_initialize+0x322>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800d946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 feb3 	bl	800e6b8 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800d952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d956:	2b00      	cmp	r3, #0
 800d958:	d004      	beq.n	800d964 <_ux_device_stack_initialize+0x334>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800d95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 feaa 	bl	800e6b8 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800d964:	4b06      	ldr	r3, [pc, #24]	@ (800d980 <_ux_device_stack_initialize+0x350>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 fea3 	bl	800e6b8 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800d972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d974:	4618      	mov	r0, r3
 800d976:	3750      	adds	r7, #80	@ 0x50
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	080104cc 	.word	0x080104cc
 800d980:	20003170 	.word	0x20003170

0800d984 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d98c:	4b20      	ldr	r3, [pc, #128]	@ (800da10 <_ux_device_stack_interface_delete+0x8c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3320      	adds	r3, #32
 800d992:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	69db      	ldr	r3, [r3, #28]
 800d998:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800d99a:	e01c      	b.n	800d9d6 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800d9a6:	4b1a      	ldr	r3, [pc, #104]	@ (800da10 <_ux_device_stack_interface_delete+0x8c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	210f      	movs	r1, #15
 800d9b4:	68b8      	ldr	r0, [r7, #8]
 800d9b6:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1df      	bne.n	800d99c <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699a      	ldr	r2, [r3, #24]
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3718      	adds	r7, #24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	20003170 	.word	0x20003170

0800da14 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b092      	sub	sp, #72	@ 0x48
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800da20:	4b82      	ldr	r3, [pc, #520]	@ (800dc2c <_ux_device_stack_interface_set+0x218>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800da26:	4b81      	ldr	r3, [pc, #516]	@ (800dc2c <_ux_device_stack_interface_set+0x218>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3320      	adds	r3, #32
 800da2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800da2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800da34:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800da36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800da3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800da3e:	e009      	b.n	800da54 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800da40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d009      	beq.n	800da5c <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800da48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da4a:	3320      	adds	r3, #32
 800da4c:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800da4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da50:	3b01      	subs	r3, #1
 800da52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800da54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1f2      	bne.n	800da40 <_ux_device_stack_interface_set+0x2c>
 800da5a:	e000      	b.n	800da5e <_ux_device_stack_interface_set+0x4a>
            break;
 800da5c:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800da5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800da64:	2312      	movs	r3, #18
 800da66:	e0dd      	b.n	800dc24 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800da68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da6a:	2201      	movs	r2, #1
 800da6c:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800da6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da70:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800da72:	2209      	movs	r2, #9
 800da74:	496e      	ldr	r1, [pc, #440]	@ (800dc30 <_ux_device_stack_interface_set+0x21c>)
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f000 fb5c 	bl	800e134 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800da7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da82:	2b00      	cmp	r3, #0
 800da84:	d104      	bne.n	800da90 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800da86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da8a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800da8e:	e00e      	b.n	800daae <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800da90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da96:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800da98:	e002      	b.n	800daa0 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800da9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800daa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1f8      	bne.n	800da9a <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800daa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800daac:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	461a      	mov	r2, r3
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	1a9b      	subs	r3, r3, r2
 800dab8:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4413      	add	r3, r2
 800dac4:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800dac6:	e0a4      	b.n	800dc12 <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	785b      	ldrb	r3, [r3, #1]
 800dad2:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800dad4:	7efb      	ldrb	r3, [r7, #27]
 800dad6:	2b05      	cmp	r3, #5
 800dad8:	d009      	beq.n	800daee <_ux_device_stack_interface_set+0xda>
 800dada:	2b05      	cmp	r3, #5
 800dadc:	f300 8090 	bgt.w	800dc00 <_ux_device_stack_interface_set+0x1ec>
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	f000 8087 	beq.w	800dbf4 <_ux_device_stack_interface_set+0x1e0>
 800dae6:	2b04      	cmp	r3, #4
 800dae8:	f000 8084 	beq.w	800dbf4 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800daec:	e088      	b.n	800dc00 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800daee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800daf4:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800daf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dafc:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800dafe:	e00d      	b.n	800db1c <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800db00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d103      	bne.n	800db10 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800db08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0a:	2201      	movs	r2, #1
 800db0c:	601a      	str	r2, [r3, #0]
                    break;
 800db0e:	e008      	b.n	800db22 <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800db10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db12:	3380      	adds	r3, #128	@ 0x80
 800db14:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	3b01      	subs	r3, #1
 800db1a:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1ee      	bne.n	800db00 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800db28:	2312      	movs	r3, #18
 800db2a:	e07b      	b.n	800dc24 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800db2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db2e:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800db30:	2206      	movs	r2, #6
 800db32:	4940      	ldr	r1, [pc, #256]	@ (800dc34 <_ux_device_stack_interface_set+0x220>)
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 fafd 	bl	800e134 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800db3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3c:	3320      	adds	r3, #32
 800db3e:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800db40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db42:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 800db44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800db4a:	4b38      	ldr	r3, [pc, #224]	@ (800dc2c <_ux_device_stack_interface_set+0x218>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800db52:	2b02      	cmp	r3, #2
 800db54:	d118      	bne.n	800db88 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800db56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db58:	7bdb      	ldrb	r3, [r3, #15]
 800db5a:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d012      	beq.n	800db88 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800db62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db64:	8a1b      	ldrh	r3, [r3, #16]
 800db66:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800db6a:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00a      	beq.n	800db88 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	0adb      	lsrs	r3, r3, #11
 800db76:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	3301      	adds	r3, #1
 800db7c:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800db7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	fb02 f303 	mul.w	r3, r2, r3
 800db86:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db8c:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db92:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	f04f 32ff 	mov.w	r2, #4294967295
 800db9a:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800db9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dba0:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 800dba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dba6:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800dba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbae:	210e      	movs	r1, #14
 800dbb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbb2:	4798      	blx	r3
 800dbb4:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800dbb6:	6a3b      	ldr	r3, [r7, #32]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d004      	beq.n	800dbc6 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	601a      	str	r2, [r3, #0]
                return(status);
 800dbc2:	6a3b      	ldr	r3, [r7, #32]
 800dbc4:	e02e      	b.n	800dc24 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800dbc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbc8:	69db      	ldr	r3, [r3, #28]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d103      	bne.n	800dbd6 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800dbce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbd2:	61da      	str	r2, [r3, #28]
            break;
 800dbd4:	e015      	b.n	800dc02 <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dbd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800dbdc:	e002      	b.n	800dbe4 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800dbde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800dbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f8      	bne.n	800dbde <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800dbec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbf0:	615a      	str	r2, [r3, #20]
            break;
 800dbf2:	e006      	b.n	800dc02 <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800dbf4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dbf6:	f000 f81f 	bl	800dc38 <_ux_device_stack_interface_start>
 800dbfa:	6238      	str	r0, [r7, #32]
            return(status);
 800dbfc:	6a3b      	ldr	r3, [r7, #32]
 800dbfe:	e011      	b.n	800dc24 <_ux_device_stack_interface_set+0x210>
            break;
 800dc00:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	4413      	add	r3, r2
 800dc10:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f47f af57 	bne.w	800dac8 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800dc1a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dc1c:	f000 f80c 	bl	800dc38 <_ux_device_stack_interface_start>
 800dc20:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800dc22:	6a3b      	ldr	r3, [r7, #32]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3748      	adds	r7, #72	@ 0x48
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	20003170 	.word	0x20003170
 800dc30:	20000048 	.word	0x20000048
 800dc34:	20000028 	.word	0x20000028

0800dc38 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b090      	sub	sp, #64	@ 0x40
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800dc40:	4b25      	ldr	r3, [pc, #148]	@ (800dcd8 <_ux_device_stack_interface_start+0xa0>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7b9b      	ldrb	r3, [r3, #14]
 800dc48:	3344      	adds	r3, #68	@ 0x44
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800dc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d101      	bne.n	800dc5c <_ux_device_stack_interface_start+0x24>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800dc58:	2357      	movs	r3, #87	@ 0x57
 800dc5a:	e038      	b.n	800dcce <_ux_device_stack_interface_start+0x96>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dc5c:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd8 <_ux_device_stack_interface_start+0xa0>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	3320      	adds	r3, #32
 800dc62:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800dc64:	2301      	movs	r3, #1
 800dc66:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7c5b      	ldrb	r3, [r3, #17]
 800dc70:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	7c9b      	ldrb	r3, [r3, #18]
 800dc76:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	7cdb      	ldrb	r3, [r3, #19]
 800dc7c:	627b      	str	r3, [r7, #36]	@ 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc80:	899b      	ldrh	r3, [r3, #12]
 800dc82:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800dc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc86:	89db      	ldrh	r3, [r3, #14]
 800dc88:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800dc8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800dc92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc96:	f107 0208 	add.w	r2, r7, #8
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	4798      	blx	r3
 800dc9e:	6378      	str	r0, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800dca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d112      	bne.n	800dccc <_ux_device_stack_interface_start+0x94>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800dca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dca8:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800dcaa:	2302      	movs	r3, #2
 800dcac:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800dcae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb2:	f107 0208 	add.w	r2, r7, #8
 800dcb6:	4610      	mov	r0, r2
 800dcb8:	4798      	blx	r3
 800dcba:	6378      	str	r0, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800dcbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d102      	bne.n	800dcc8 <_ux_device_stack_interface_start+0x90>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dcc6:	605a      	str	r2, [r3, #4]

        return(status); 
 800dcc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcca:	e000      	b.n	800dcce <_ux_device_stack_interface_start+0x96>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800dccc:	2357      	movs	r3, #87	@ 0x57
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3740      	adds	r7, #64	@ 0x40
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	20003170 	.word	0x20003170

0800dcdc <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08a      	sub	sp, #40	@ 0x28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800dce8:	4b29      	ldr	r3, [pc, #164]	@ (800dd90 <_ux_device_stack_set_feature+0xb4>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dcee:	4b28      	ldr	r3, [pc, #160]	@ (800dd90 <_ux_device_stack_set_feature+0xb4>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3320      	adds	r3, #32
 800dcf4:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	3318      	adds	r3, #24
 800dcfa:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f003 0303 	and.w	r3, r3, #3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d002      	beq.n	800dd0c <_ux_device_stack_set_feature+0x30>
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d014      	beq.n	800dd34 <_ux_device_stack_set_feature+0x58>
 800dd0a:	e036      	b.n	800dd7a <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d10e      	bne.n	800dd30 <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800dd12:	4b1f      	ldr	r3, [pc, #124]	@ (800dd90 <_ux_device_stack_set_feature+0xb4>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800dd1e:	4b1c      	ldr	r3, [pc, #112]	@ (800dd90 <_ux_device_stack_set_feature+0xb4>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

                /* OK. */
                return (UX_SUCCESS);
 800dd28:	2300      	movs	r3, #0
 800dd2a:	e02d      	b.n	800dd88 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800dd2c:	2354      	movs	r3, #84	@ 0x54
 800dd2e:	e02b      	b.n	800dd88 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800dd30:	2354      	movs	r3, #84	@ 0x54
 800dd32:	e029      	b.n	800dd88 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dd3a:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800dd3c:	e01a      	b.n	800dd74 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	69db      	ldr	r3, [r3, #28]
 800dd42:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800dd44:	e010      	b.n	800dd68 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	7b9b      	ldrb	r3, [r3, #14]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d107      	bne.n	800dd62 <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	6a3a      	ldr	r2, [r7, #32]
 800dd58:	2114      	movs	r1, #20
 800dd5a:	69f8      	ldr	r0, [r7, #28]
 800dd5c:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e012      	b.n	800dd88 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	695b      	ldr	r3, [r3, #20]
 800dd66:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800dd68:	6a3b      	ldr	r3, [r7, #32]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1eb      	bne.n	800dd46 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	699b      	ldr	r3, [r3, #24]
 800dd72:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800dd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1e1      	bne.n	800dd3e <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	2114      	movs	r1, #20
 800dd82:	69f8      	ldr	r0, [r7, #28]
 800dd84:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800dd86:	2300      	movs	r3, #0
    }
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3728      	adds	r7, #40	@ 0x28
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	20003170 	.word	0x20003170

0800dd94 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800dd9e:	4b19      	ldr	r3, [pc, #100]	@ (800de04 <_ux_device_stack_transfer_abort+0x70>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ddae:	617b      	str	r3, [r7, #20]
    return(posture);
 800ddb0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ddb2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddb4:	b672      	cpsid	i
    return(int_posture);
 800ddb6:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800ddb8:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d114      	bne.n	800ddec <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	210d      	movs	r1, #13
 800ddca:	69f8      	ldr	r0, [r7, #28]
 800ddcc:	4798      	blx	r3
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f383 8810 	msr	PRIMASK, r3
}
 800ddd8:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2204      	movs	r2, #4
 800ddde:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3330      	adds	r3, #48	@ 0x30
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 fd74 	bl	800e8d2 <_ux_utility_semaphore_put>
 800ddea:	e005      	b.n	800ddf8 <_ux_device_stack_transfer_abort+0x64>
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	f383 8810 	msr	PRIMASK, r3
}
 800ddf6:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3720      	adds	r7, #32
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	20003170 	.word	0x20003170

0800de08 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	3320      	adds	r3, #32
 800de16:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7ff ffba 	bl	800dd94 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b08e      	sub	sp, #56	@ 0x38
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d101      	bne.n	800de44 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 800de40:	2300      	movs	r3, #0
 800de42:	e077      	b.n	800df34 <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de44:	f3ef 8310 	mrs	r3, PRIMASK
 800de48:	623b      	str	r3, [r7, #32]
    return(posture);
 800de4a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800de4c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de4e:	b672      	cpsid	i
    return(int_posture);
 800de50:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 800de52:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800de54:	4b39      	ldr	r3, [pc, #228]	@ (800df3c <_ux_device_stack_transfer_request+0x110>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	6a1b      	ldr	r3, [r3, #32]
 800de5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 800de5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d005      	beq.n	800de6e <_ux_device_stack_transfer_request+0x42>
 800de62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de64:	2b02      	cmp	r3, #2
 800de66:	d002      	beq.n	800de6e <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 800de68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	d115      	bne.n	800de9a <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2201      	movs	r2, #1
 800de72:	601a      	str	r2, [r3, #0]
 800de74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de76:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	f383 8810 	msr	PRIMASK, r3
}
 800de7e:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800de80:	4b2e      	ldr	r3, [pc, #184]	@ (800df3c <_ux_device_stack_transfer_request+0x110>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800de8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8e:	7bdb      	ldrb	r3, [r3, #15]
 800de90:	f003 0303 	and.w	r3, r3, #3
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10b      	bne.n	800deb0 <_ux_device_stack_transfer_request+0x84>
 800de98:	e01a      	b.n	800ded0 <_ux_device_stack_transfer_request+0xa4>
 800de9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de9c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f383 8810 	msr	PRIMASK, r3
}
 800dea4:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 800dea6:	2325      	movs	r3, #37	@ 0x25
 800dea8:	e044      	b.n	800df34 <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 800deaa:	2064      	movs	r0, #100	@ 0x64
 800deac:	f000 f928 	bl	800e100 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800deb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d0f8      	beq.n	800deaa <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800deb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deba:	7b9b      	ldrb	r3, [r3, #14]
 800debc:	b25b      	sxtb	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	da03      	bge.n	800deca <_ux_device_stack_transfer_request+0x9e>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2203      	movs	r2, #3
 800dec6:	629a      	str	r2, [r3, #40]	@ 0x28
 800dec8:	e002      	b.n	800ded0 <_ux_device_stack_transfer_request+0xa4>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2202      	movs	r2, #2
 800dece:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded4:	2b03      	cmp	r3, #3
 800ded6:	d115      	bne.n	800df04 <_ux_device_stack_transfer_request+0xd8>
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d012      	beq.n	800df04 <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d00e      	beq.n	800df04 <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800dee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee8:	8a1b      	ldrh	r3, [r3, #16]
 800deea:	461a      	mov	r2, r3
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	fbb3 f1f2 	udiv	r1, r3, r2
 800def2:	fb01 f202 	mul.w	r2, r1, r2
 800def6:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 800def8:	2b00      	cmp	r3, #0
 800defa:	d103      	bne.n	800df04 <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2201      	movs	r2, #1
 800df00:	651a      	str	r2, [r3, #80]	@ 0x50
 800df02:	e002      	b.n	800df0a <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800df24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	210c      	movs	r1, #12
 800df2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df2e:	4798      	blx	r3
 800df30:	6278      	str	r0, [r7, #36]	@ 0x24

    /* And return the status.  */
    return(status);
 800df32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

#endif
}
 800df34:	4618      	mov	r0, r3
 800df36:	3738      	adds	r7, #56	@ 0x38
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20003170 	.word	0x20003170

0800df40 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800df4c:	4b0c      	ldr	r3, [pc, #48]	@ (800df80 <_ux_system_error_handler+0x40>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	641a      	str	r2, [r3, #64]	@ 0x40
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800df54:	4b0a      	ldr	r3, [pc, #40]	@ (800df80 <_ux_system_error_handler+0x40>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df5a:	3201      	adds	r2, #1
 800df5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800df5e:	4b08      	ldr	r3, [pc, #32]	@ (800df80 <_ux_system_error_handler+0x40>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df64:	2b00      	cmp	r3, #0
 800df66:	d006      	beq.n	800df76 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800df68:	4b05      	ldr	r3, [pc, #20]	@ (800df80 <_ux_system_error_handler+0x40>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	68b9      	ldr	r1, [r7, #8]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	4798      	blx	r3
    }
}
 800df76:	bf00      	nop
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	20003174 	.word	0x20003174

0800df84 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08a      	sub	sp, #40	@ 0x28
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <_ux_system_initialize+0x1a>
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 800df9e:	23fa      	movs	r3, #250	@ 0xfa
 800dfa0:	e08a      	b.n	800e0b8 <_ux_system_initialize+0x134>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f000 fc0a 	bl	800e7c0 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800dfac:	4a44      	ldr	r2, [pc, #272]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800dfb2:	234c      	movs	r3, #76	@ 0x4c
 800dfb4:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfba:	4413      	add	r3, r2
 800dfbc:	4a41      	ldr	r2, [pc, #260]	@ (800e0c4 <_ux_system_initialize+0x140>)
 800dfbe:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800dfc6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800dfc8:	4b3d      	ldr	r3, [pc, #244]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68f9      	ldr	r1, [r7, #12]
 800dfce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfd0:	440a      	add	r2, r1
 800dfd2:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd6:	3314      	adds	r3, #20
 800dfd8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00c      	beq.n	800dffa <_ux_system_initialize+0x76>
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d009      	beq.n	800dffa <_ux_system_initialize+0x76>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800dfe6:	4b36      	ldr	r3, [pc, #216]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68f9      	ldr	r1, [r7, #12]
 800dfec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfee:	440a      	add	r2, r1
 800dff0:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800dff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff4:	3314      	adds	r3, #20
 800dff6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dff8:	e005      	b.n	800e006 <_ux_system_initialize+0x82>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800dffa:	4b31      	ldr	r3, [pc, #196]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	4b30      	ldr	r3, [pc, #192]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6812      	ldr	r2, [r2, #0]
 800e004:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e00a:	4413      	add	r3, r2
 800e00c:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	3307      	adds	r3, #7
 800e012:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	f023 0307 	bic.w	r3, r3, #7
 800e01a:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	4413      	add	r3, r2
 800e022:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	6a3a      	ldr	r2, [r7, #32]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d301      	bcc.n	800e030 <_ux_system_initialize+0xac>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800e02c:	2312      	movs	r3, #18
 800e02e:	e043      	b.n	800e0b8 <_ux_system_initialize+0x134>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800e030:	69fa      	ldr	r2, [r7, #28]
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 800e038:	4b21      	ldr	r3, [pc, #132]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	6a39      	ldr	r1, [r7, #32]
 800e040:	69ba      	ldr	r2, [r7, #24]
 800e042:	4618      	mov	r0, r3
 800e044:	f000 fa2e 	bl	800e4a4 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d026      	beq.n	800e09c <_ux_system_initialize+0x118>
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d023      	beq.n	800e09c <_ux_system_initialize+0x118>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 800e054:	683a      	ldr	r2, [r7, #0]
 800e056:	2100      	movs	r1, #0
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fbb1 	bl	800e7c0 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800e062:	6a3b      	ldr	r3, [r7, #32]
 800e064:	3307      	adds	r3, #7
 800e066:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800e068:	6a3b      	ldr	r3, [r7, #32]
 800e06a:	f023 0307 	bic.w	r3, r3, #7
 800e06e:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	4413      	add	r3, r2
 800e076:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	6a3a      	ldr	r2, [r7, #32]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d301      	bcc.n	800e084 <_ux_system_initialize+0x100>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 800e080:	2312      	movs	r3, #18
 800e082:	e019      	b.n	800e0b8 <_ux_system_initialize+0x134>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	1ad3      	subs	r3, r2, r3
 800e08a:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 800e08c:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	6a39      	ldr	r1, [r7, #32]
 800e094:	69ba      	ldr	r2, [r7, #24]
 800e096:	4618      	mov	r0, r3
 800e098:	f000 fa04 	bl	800e4a4 <_ux_utility_memory_byte_pool_create>
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800e09c:	4b08      	ldr	r3, [pc, #32]	@ (800e0c0 <_ux_system_initialize+0x13c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	330c      	adds	r3, #12
 800e0a2:	4909      	ldr	r1, [pc, #36]	@ (800e0c8 <_ux_system_initialize+0x144>)
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f000 fba5 	bl	800e7f4 <_ux_utility_mutex_create>
 800e0aa:	6138      	str	r0, [r7, #16]
    if(status != UX_SUCCESS)
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <_ux_system_initialize+0x132>
        return(UX_MUTEX_ERROR);
 800e0b2:	2317      	movs	r3, #23
 800e0b4:	e000      	b.n	800e0b8 <_ux_system_initialize+0x134>
#endif

    return(UX_SUCCESS);
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3728      	adds	r7, #40	@ 0x28
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	20003174 	.word	0x20003174
 800e0c4:	20003170 	.word	0x20003170
 800e0c8:	080104ec 	.word	0x080104ec

0800e0cc <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
 800e0d8:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <_uxe_system_initialize+0x1a>
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 800e0e6:	23fa      	movs	r3, #250	@ 0xfa
 800e0e8:	e006      	b.n	800e0f8 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	68b9      	ldr	r1, [r7, #8]
 800e0f0:	68f8      	ldr	r0, [r7, #12]
 800e0f2:	f7ff ff47 	bl	800df84 <_ux_system_initialize>
 800e0f6:	4603      	mov	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2264      	movs	r2, #100	@ 0x64
 800e10c:	fb02 f303 	mul.w	r3, r2, r3
 800e110:	4a07      	ldr	r2, [pc, #28]	@ (800e130 <_ux_utility_delay_ms+0x30>)
 800e112:	fba2 2303 	umull	r2, r3, r2, r3
 800e116:	099b      	lsrs	r3, r3, #6
 800e118:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	3301      	adds	r3, #1
 800e11e:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f7fc ff8d 	bl	800b040 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800e126:	bf00      	nop
}
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	10624dd3 	.word	0x10624dd3

0800e134 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
 800e140:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800e142:	e041      	b.n	800e1c8 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	60ba      	str	r2, [r7, #8]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d01e      	beq.n	800e18e <_ux_utility_descriptor_parse+0x5a>
 800e150:	2b04      	cmp	r3, #4
 800e152:	d12f      	bne.n	800e1b4 <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 800e154:	e004      	b.n	800e160 <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	603a      	str	r2, [r7, #0]
 800e15c:	2200      	movs	r2, #0
 800e15e:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f003 0303 	and.w	r3, r3, #3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1f5      	bne.n	800e156 <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800e16a:	68f8      	ldr	r0, [r7, #12]
 800e16c:	f000 f835 	bl	800e1da <_ux_utility_long_get>
 800e170:	4602      	mov	r2, r0
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	3304      	adds	r3, #4
 800e17a:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	3304      	adds	r3, #4
 800e180:	603b      	str	r3, [r7, #0]
            break;
 800e182:	e021      	b.n	800e1c8 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	1c5a      	adds	r2, r3, #1
 800e188:	603a      	str	r2, [r7, #0]
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	f003 0301 	and.w	r3, r3, #1
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1f5      	bne.n	800e184 <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f000 fba7 	bl	800e8ec <_ux_utility_short_get>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3302      	adds	r3, #2
 800e1aa:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	3302      	adds	r3, #2
 800e1b0:	603b      	str	r3, [r7, #0]
            break;
 800e1b2:	e009      	b.n	800e1c8 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	781a      	ldrb	r2, [r3, #0]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	1e5a      	subs	r2, r3, #1
 800e1cc:	607a      	str	r2, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1b8      	bne.n	800e144 <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800e1d2:	bf00      	nop
}
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800e1da:	b480      	push	{r7}
 800e1dc:	b085      	sub	sp, #20
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	1c5a      	adds	r2, r3, #1
 800e1f0:	607a      	str	r2, [r7, #4]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	021b      	lsls	r3, r3, #8
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	1c5a      	adds	r2, r3, #1
 800e200:	607a      	str	r2, [r7, #4]
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	041b      	lsls	r3, r3, #16
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	4313      	orrs	r3, r2
 800e20a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	061b      	lsls	r3, r3, #24
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	4313      	orrs	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800e218:	68fb      	ldr	r3, [r7, #12]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800e226:	b480      	push	{r7}
 800e228:	b083      	sub	sp, #12
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	607a      	str	r2, [r7, #4]
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	b2d2      	uxtb	r2, r2
 800e23a:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	0a19      	lsrs	r1, r3, #8
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	607a      	str	r2, [r7, #4]
 800e246:	b2ca      	uxtb	r2, r1
 800e248:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	0c19      	lsrs	r1, r3, #16
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	1c5a      	adds	r2, r3, #1
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	b2ca      	uxtb	r2, r1
 800e256:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	0e1b      	lsrs	r3, r3, #24
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800e262:	bf00      	nop
}
 800e264:	370c      	adds	r7, #12
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
	...

0800e270 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08e      	sub	sp, #56	@ 0x38
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d104      	bne.n	800e28c <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800e282:	4b73      	ldr	r3, [pc, #460]	@ (800e450 <_ux_utility_memory_allocate+0x1e0>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	637b      	str	r3, [r7, #52]	@ 0x34
 800e28a:	e009      	b.n	800e2a0 <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d104      	bne.n	800e29c <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800e292:	4b6f      	ldr	r3, [pc, #444]	@ (800e450 <_ux_utility_memory_allocate+0x1e0>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	637b      	str	r3, [r7, #52]	@ 0x34
 800e29a:	e001      	b.n	800e2a0 <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 800e29c:	2300      	movs	r3, #0
 800e29e:	e0d2      	b.n	800e446 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800e2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d101      	bne.n	800e2aa <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e0cd      	b.n	800e446 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d101      	bne.n	800e2b4 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	e0c8      	b.n	800e446 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800e2b4:	4b66      	ldr	r3, [pc, #408]	@ (800e450 <_ux_utility_memory_allocate+0x1e0>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	330c      	adds	r3, #12
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 facb 	bl	800e856 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c6:	d101      	bne.n	800e2cc <_ux_utility_memory_allocate+0x5c>
        memory_alignment = UX_NO_ALIGN;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b06      	cmp	r3, #6
 800e2d0:	d801      	bhi.n	800e2d6 <_ux_utility_memory_allocate+0x66>
        memory_alignment =  UX_ALIGN_MIN;
 800e2d2:	2307      	movs	r3, #7
 800e2d4:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	3307      	adds	r3, #7
 800e2da:	f023 0307 	bic.w	r3, r3, #7
 800e2de:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2b07      	cmp	r3, #7
 800e2e4:	d805      	bhi.n	800e2f2 <_ux_utility_memory_allocate+0x82>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 800e2e6:	6879      	ldr	r1, [r7, #4]
 800e2e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e2ea:	f000 f92b 	bl	800e544 <_ux_utility_memory_byte_pool_search>
 800e2ee:	6338      	str	r0, [r7, #48]	@ 0x30
 800e2f0:	e007      	b.n	800e302 <_ux_utility_memory_allocate+0x92>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e2fc:	f000 f922 	bl	800e544 <_ux_utility_memory_byte_pool_search>
 800e300:	6338      	str	r0, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 800e302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10c      	bne.n	800e322 <_ux_utility_memory_allocate+0xb2>
    {

        /* We could not find a memory block.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e308:	4b51      	ldr	r3, [pc, #324]	@ (800e450 <_ux_utility_memory_allocate+0x1e0>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	330c      	adds	r3, #12
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 fa96 	bl	800e840 <_ux_utility_mutex_off>

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800e314:	2212      	movs	r2, #18
 800e316:	2108      	movs	r1, #8
 800e318:	2002      	movs	r0, #2
 800e31a:	f7ff fe11 	bl	800df40 <_ux_system_error_handler>

        return(UX_NULL);
 800e31e:	2300      	movs	r3, #0
 800e320:	e091      	b.n	800e446 <_ux_utility_memory_allocate+0x1d6>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 800e326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800e32c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	3b08      	subs	r3, #8
 800e338:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 800e33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33c:	3308      	adds	r3, #8
 800e33e:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 800e340:	6a3a      	ldr	r2, [r7, #32]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	4013      	ands	r3, r2
 800e346:	2b00      	cmp	r3, #0
 800e348:	d02f      	beq.n	800e3aa <_ux_utility_memory_allocate+0x13a>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800e34a:	6a3b      	ldr	r3, [r7, #32]
 800e34c:	3308      	adds	r3, #8
 800e34e:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 800e350:	6a3a      	ldr	r2, [r7, #32]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	4413      	add	r3, r2
 800e356:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	43db      	mvns	r3, r3
 800e35c:	6a3a      	ldr	r2, [r7, #32]
 800e35e:	4013      	ands	r3, r2
 800e360:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	3b08      	subs	r3, #8
 800e366:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 800e368:	6a3b      	ldr	r3, [r7, #32]
 800e36a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36e:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 800e370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800e378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37a:	3304      	adds	r3, #4
 800e37c:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	4a33      	ldr	r2, [pc, #204]	@ (800e454 <_ux_utility_memory_allocate+0x1e4>)
 800e386:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800e388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	1c5a      	adds	r2, r3, #1
 800e38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e390:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800e392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e396:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800e398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	461a      	mov	r2, r3
 800e3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a2:	1a9b      	subs	r3, r3, r2
 800e3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a8:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 800e3aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	2b13      	cmp	r3, #19
 800e3b2:	d91e      	bls.n	800e3f2 <_ux_utility_memory_allocate+0x182>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	3308      	adds	r3, #8
 800e3b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3ba:	4413      	add	r3, r2
 800e3bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c0:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 800e3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	4a1e      	ldr	r2, [pc, #120]	@ (800e454 <_ux_utility_memory_allocate+0x1e4>)
 800e3dc:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 800e3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3e6:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800e3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3ec:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800e3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e400:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 800e402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	f1a3 0208 	sub.w	r2, r3, #8
 800e40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e410:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 800e412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e418:	429a      	cmp	r2, r3
 800e41a:	d105      	bne.n	800e428 <_ux_utility_memory_allocate+0x1b8>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41e:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 800e420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e426:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800e428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42a:	3308      	adds	r3, #8
 800e42c:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 800e42e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e430:	2100      	movs	r1, #0
 800e432:	69b8      	ldr	r0, [r7, #24]
 800e434:	f000 f9c4 	bl	800e7c0 <_ux_utility_memory_set>
    if (_ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free > _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available)
        _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_min_free = _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_available;
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e438:	4b05      	ldr	r3, [pc, #20]	@ (800e450 <_ux_utility_memory_allocate+0x1e0>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	330c      	adds	r3, #12
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 f9fe 	bl	800e840 <_ux_utility_mutex_off>

    return(work_ptr);
 800e444:	69bb      	ldr	r3, [r7, #24]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3738      	adds	r7, #56	@ 0x38
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	20003174 	.word	0x20003174
 800e454:	ffffeeee 	.word	0xffffeeee

0800e458 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00a      	beq.n	800e482 <_ux_utility_memory_allocate_mulc_safe+0x2a>
 800e46c:	2100      	movs	r1, #0
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	fba3 2302 	umull	r2, r3, r3, r2
 800e476:	2b00      	cmp	r3, #0
 800e478:	d000      	beq.n	800e47c <_ux_utility_memory_allocate_mulc_safe+0x24>
 800e47a:	2101      	movs	r1, #1
 800e47c:	460b      	mov	r3, r1
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10a      	bne.n	800e498 <_ux_utility_memory_allocate_mulc_safe+0x40>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	fb02 f303 	mul.w	r3, r2, r3
 800e48a:	461a      	mov	r2, r3
 800e48c:	68b9      	ldr	r1, [r7, #8]
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f7ff feee 	bl	800e270 <_ux_utility_memory_allocate>
 800e494:	4603      	mov	r3, r0
 800e496:	e000      	b.n	800e49a <_ux_utility_memory_allocate_mulc_safe+0x42>
 800e498:	2300      	movs	r3, #0
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
	...

0800e4a4 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b088      	sub	sp, #32
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 800e4b0:	2214      	movs	r2, #20
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f000 f983 	bl	800e7c0 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f023 0303 	bic.w	r3, r3, #3
 800e4c0:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f1a3 0208 	sub.w	r2, r3, #8
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800e4e8:	69fa      	ldr	r2, [r7, #28]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	3b04      	subs	r3, #4
 800e4f4:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	69ba      	ldr	r2, [r7, #24]
 800e502:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	3b04      	subs	r3, #4
 800e508:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	68ba      	ldr	r2, [r7, #8]
 800e512:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	69fa      	ldr	r2, [r7, #28]
 800e520:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	3304      	adds	r3, #4
 800e52a:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	4a03      	ldr	r2, [pc, #12]	@ (800e540 <_ux_utility_memory_byte_pool_create+0x9c>)
 800e534:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 800e536:	2300      	movs	r3, #0
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3720      	adds	r7, #32
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	ffffeeee 	.word	0xffffeeee

0800e544 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800e544:	b480      	push	{r7}
 800e546:	b08d      	sub	sp, #52	@ 0x34
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 800e54e:	2300      	movs	r3, #0
 800e550:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	3b02      	subs	r3, #2
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	4413      	add	r3, r2
 800e560:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	429a      	cmp	r2, r3
 800e568:	d301      	bcc.n	800e56e <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 800e56a:	2300      	movs	r3, #0
 800e56c:	e07d      	b.n	800e66a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	429a      	cmp	r2, r3
 800e578:	d308      	bcc.n	800e58c <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	689a      	ldr	r2, [r3, #8]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68d9      	ldr	r1, [r3, #12]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	440b      	add	r3, r1
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 800e588:	429a      	cmp	r2, r3
 800e58a:	d901      	bls.n	800e590 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 800e58c:	2300      	movs	r3, #0
 800e58e:	e06c      	b.n	800e66a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	3301      	adds	r3, #1
 800e59c:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 800e59e:	2300      	movs	r3, #0
 800e5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800e5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a31      	ldr	r2, [pc, #196]	@ (800e678 <_ux_utility_memory_byte_pool_search+0x134>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d143      	bne.n	800e63e <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d104      	bne.n	800e5c6 <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5c0:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c8:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d4:	1ad3      	subs	r3, r2, r3
 800e5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 800e5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5da:	3b08      	subs	r3, #8
 800e5dc:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 800e5de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d23a      	bcs.n	800e65c <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a1f      	ldr	r2, [pc, #124]	@ (800e678 <_ux_utility_memory_byte_pool_search+0x134>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d113      	bne.n	800e626 <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	1e5a      	subs	r2, r3, #1
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d114      	bne.n	800e648 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e622:	609a      	str	r2, [r3, #8]
 800e624:	e010      	b.n	800e648 <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 800e630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e632:	2b00      	cmp	r3, #0
 800e634:	d008      	beq.n	800e648 <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 800e636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e638:	3b01      	subs	r3, #1
 800e63a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e63c:	e004      	b.n	800e648 <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e640:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 800e648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d002      	beq.n	800e654 <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 800e64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e650:	3b01      	subs	r3, #1
 800e652:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 800e654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1a3      	bne.n	800e5a2 <_ux_utility_memory_byte_pool_search+0x5e>
 800e65a:	e000      	b.n	800e65e <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 800e65c:	bf00      	nop

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 800e65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 800e664:	2300      	movs	r3, #0
 800e666:	e000      	b.n	800e66a <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800e668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3734      	adds	r7, #52	@ 0x34
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	ffffeeee 	.word	0xffffeeee

0800e67c <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b087      	sub	sp, #28
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800e690:	e007      	b.n	800e6a2 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800e692:	697a      	ldr	r2, [r7, #20]
 800e694:	1c53      	adds	r3, r2, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	1c59      	adds	r1, r3, #1
 800e69c:	6139      	str	r1, [r7, #16]
 800e69e:	7812      	ldrb	r2, [r2, #0]
 800e6a0:	701a      	strb	r2, [r3, #0]
    while(length--)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	1e5a      	subs	r2, r3, #1
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1f2      	bne.n	800e692 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800e6ac:	bf00      	nop
}
 800e6ae:	371c      	adds	r7, #28
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08a      	sub	sp, #40	@ 0x28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800e6c0:	4b3d      	ldr	r3, [pc, #244]	@ (800e7b8 <_ux_utility_memory_free+0x100>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	330c      	adds	r3, #12
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 f8c5 	bl	800e856 <_ux_utility_mutex_on>
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 800e6d4:	6a3b      	ldr	r3, [r7, #32]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d03b      	beq.n	800e752 <_ux_utility_memory_free+0x9a>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	3b08      	subs	r3, #8
 800e6de:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a33      	ldr	r2, [pc, #204]	@ (800e7bc <_ux_utility_memory_free+0x104>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d022      	beq.n	800e73a <_ux_utility_memory_free+0x82>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800e6f4:	6a3b      	ldr	r3, [r7, #32]
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 800e704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e706:	2b00      	cmp	r3, #0
 800e708:	d00b      	beq.n	800e722 <_ux_utility_memory_free+0x6a>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800e70a:	4b2b      	ldr	r3, [pc, #172]	@ (800e7b8 <_ux_utility_memory_free+0x100>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 800e710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e712:	429a      	cmp	r2, r3
 800e714:	d029      	beq.n	800e76a <_ux_utility_memory_free+0xb2>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 800e716:	4b28      	ldr	r3, [pc, #160]	@ (800e7b8 <_ux_utility_memory_free+0x100>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 800e71c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e71e:	429a      	cmp	r2, r3
 800e720:	d023      	beq.n	800e76a <_ux_utility_memory_free+0xb2>
            {

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e722:	4b25      	ldr	r3, [pc, #148]	@ (800e7b8 <_ux_utility_memory_free+0x100>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	330c      	adds	r3, #12
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 f889 	bl	800e840 <_ux_utility_mutex_off>

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800e72e:	2219      	movs	r2, #25
 800e730:	2108      	movs	r1, #8
 800e732:	2002      	movs	r0, #2
 800e734:	f7ff fc04 	bl	800df40 <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 800e738:	e03b      	b.n	800e7b2 <_ux_utility_memory_free+0xfa>
            }
        }
        else
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e73a:	4b1f      	ldr	r3, [pc, #124]	@ (800e7b8 <_ux_utility_memory_free+0x100>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	330c      	adds	r3, #12
 800e740:	4618      	mov	r0, r3
 800e742:	f000 f87d 	bl	800e840 <_ux_utility_mutex_off>

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800e746:	2219      	movs	r2, #25
 800e748:	2108      	movs	r1, #8
 800e74a:	2002      	movs	r0, #2
 800e74c:	f7ff fbf8 	bl	800df40 <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 800e750:	e02f      	b.n	800e7b2 <_ux_utility_memory_free+0xfa>
    }
    else
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e752:	4b19      	ldr	r3, [pc, #100]	@ (800e7b8 <_ux_utility_memory_free+0x100>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	330c      	adds	r3, #12
 800e758:	4618      	mov	r0, r3
 800e75a:	f000 f871 	bl	800e840 <_ux_utility_mutex_off>

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 800e75e:	2219      	movs	r2, #25
 800e760:	2108      	movs	r1, #8
 800e762:	2002      	movs	r0, #2
 800e764:	f7ff fbec 	bl	800df40 <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 800e768:	e023      	b.n	800e7b2 <_ux_utility_memory_free+0xfa>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	3304      	adds	r3, #4
 800e76e:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	4a11      	ldr	r2, [pc, #68]	@ (800e7bc <_ux_utility_memory_free+0x104>)
 800e778:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 800e784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68f9      	ldr	r1, [r7, #12]
 800e78a:	6a3a      	ldr	r2, [r7, #32]
 800e78c:	1a8a      	subs	r2, r1, r2
 800e78e:	441a      	add	r2, r3
    pool_ptr -> ux_byte_pool_available =
 800e790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e792:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 800e794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	6a3a      	ldr	r2, [r7, #32]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d202      	bcs.n	800e7a4 <_ux_utility_memory_free+0xec>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 800e79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a0:	6a3a      	ldr	r2, [r7, #32]
 800e7a2:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_count --;
    _ux_system -> ux_system_memory_byte_pool[index] -> ux_byte_pool_alloc_total -= UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e7a4:	4b04      	ldr	r3, [pc, #16]	@ (800e7b8 <_ux_utility_memory_free+0x100>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	330c      	adds	r3, #12
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f000 f848 	bl	800e840 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800e7b0:	bf00      	nop
}
 800e7b2:	3728      	adds	r7, #40	@ 0x28
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	20003174 	.word	0x20003174
 800e7bc:	ffffeeee 	.word	0xffffeeee

0800e7c0 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b087      	sub	sp, #28
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	607a      	str	r2, [r7, #4]
 800e7cc:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800e7d2:	e004      	b.n	800e7de <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	1c5a      	adds	r2, r3, #1
 800e7d8:	617a      	str	r2, [r7, #20]
 800e7da:	7afa      	ldrb	r2, [r7, #11]
 800e7dc:	701a      	strb	r2, [r3, #0]
    while(length--)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	1e5a      	subs	r2, r3, #1
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1f5      	bne.n	800e7d4 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800e7e8:	bf00      	nop
}
 800e7ea:	371c      	adds	r7, #28
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800e7fe:	2334      	movs	r3, #52	@ 0x34
 800e800:	2200      	movs	r2, #0
 800e802:	6839      	ldr	r1, [r7, #0]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7fd fac5 	bl	800bd94 <_txe_mutex_create>
 800e80a:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d004      	beq.n	800e81c <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	2108      	movs	r1, #8
 800e816:	2002      	movs	r0, #2
 800e818:	f7ff fb92 	bl	800df40 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800e81c:	68fb      	ldr	r3, [r7, #12]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7fd fb4e 	bl	800bed0 <_txe_mutex_delete>
 800e834:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800e836:	68fb      	ldr	r3, [r7, #12]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7fd fbd9 	bl	800c000 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800e84e:	bf00      	nop
}
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800e85e:	f04f 31ff 	mov.w	r1, #4294967295
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7fd fb72 	bl	800bf4c <_txe_mutex_get>
 800e868:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d005      	beq.n	800e87c <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	2108      	movs	r1, #8
 800e874:	2002      	movs	r0, #2
 800e876:	f7ff fb63 	bl	800df40 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800e87a:	bf00      	nop
 800e87c:	bf00      	nop
}
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800e890:	231c      	movs	r3, #28
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	68b9      	ldr	r1, [r7, #8]
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f7fd fbec 	bl	800c074 <_txe_semaphore_create>
 800e89c:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d004      	beq.n	800e8ae <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	2108      	movs	r1, #8
 800e8a8:	2002      	movs	r0, #2
 800e8aa:	f7ff fb49 	bl	800df40 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800e8ae:	697b      	ldr	r3, [r7, #20]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3718      	adds	r7, #24
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7fd fc6d 	bl	800c1a0 <_txe_semaphore_delete>
 800e8c6:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b084      	sub	sp, #16
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7fd fc9e 	bl	800c21c <_txe_semaphore_put>
 800e8e0:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b085      	sub	sp, #20
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	1c5a      	adds	r2, r3, #1
 800e8f8:	607a      	str	r2, [r7, #4]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	021b      	lsls	r3, r3, #8
 800e904:	b29a      	uxth	r2, r3
 800e906:	89fb      	ldrh	r3, [r7, #14]
 800e908:	4313      	orrs	r3, r2
 800e90a:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800e90c:	89fb      	ldrh	r3, [r7, #14]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b086      	sub	sp, #24
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d101      	bne.n	800e930 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800e92c:	23ff      	movs	r3, #255	@ 0xff
 800e92e:	e01d      	b.n	800e96c <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800e930:	2300      	movs	r3, #0
 800e932:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	4413      	add	r3, r2
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00d      	beq.n	800e95c <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	3301      	adds	r3, #1
 800e944:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800e946:	697a      	ldr	r2, [r7, #20]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d9f2      	bls.n	800e934 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800e94e:	22ff      	movs	r2, #255	@ 0xff
 800e950:	2108      	movs	r1, #8
 800e952:	2002      	movs	r0, #2
 800e954:	f7ff faf4 	bl	800df40 <_ux_system_error_handler>

            return(UX_ERROR);
 800e958:	23ff      	movs	r3, #255	@ 0xff
 800e95a:	e007      	b.n	800e96c <_ux_utility_string_length_check+0x52>
            break;
 800e95c:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	697a      	ldr	r2, [r7, #20]
 800e968:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e986:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	6938      	ldr	r0, [r7, #16]
 800e9a8:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b08a      	sub	sp, #40	@ 0x28
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e9c2:	6a3b      	ldr	r3, [r7, #32]
 800e9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9c6:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e9c8:	4b51      	ldr	r3, [pc, #324]	@ (800eb10 <_ux_device_class_cdc_acm_control_request+0x15c>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	3320      	adds	r3, #32
 800e9ce:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	3338      	adds	r3, #56	@ 0x38
 800e9d4:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800e9dc:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	3354      	adds	r3, #84	@ 0x54
 800e9e2:	3302      	adds	r3, #2
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff ff81 	bl	800e8ec <_ux_utility_short_get>
 800e9ea:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	3354      	adds	r3, #84	@ 0x54
 800e9f0:	3306      	adds	r3, #6
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7ff ff7a 	bl	800e8ec <_ux_utility_short_get>
 800e9f8:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	2b22      	cmp	r3, #34	@ 0x22
 800ea02:	d009      	beq.n	800ea18 <_ux_device_class_cdc_acm_control_request+0x64>
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	2b22      	cmp	r3, #34	@ 0x22
 800ea08:	d877      	bhi.n	800eafa <_ux_device_class_cdc_acm_control_request+0x146>
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	2b20      	cmp	r3, #32
 800ea0e:	d051      	beq.n	800eab4 <_ux_device_class_cdc_acm_control_request+0x100>
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	2b21      	cmp	r3, #33	@ 0x21
 800ea14:	d023      	beq.n	800ea5e <_ux_device_class_cdc_acm_control_request+0xaa>
 800ea16:	e070      	b.n	800eafa <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f003 0301 	and.w	r3, r3, #1
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f003 0302 	and.w	r3, r3, #2
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d003      	beq.n	800ea4c <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	2201      	movs	r2, #1
 800ea48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d054      	beq.n	800eafe <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	69f8      	ldr	r0, [r7, #28]
 800ea5a:	4798      	blx	r3
            }

            break ;
 800ea5c:	e04f      	b.n	800eafe <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	2b07      	cmp	r3, #7
 800ea62:	d901      	bls.n	800ea68 <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 800ea64:	2307      	movs	r3, #7
 800ea66:	627b      	str	r3, [r7, #36]	@ 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f7ff fbd7 	bl	800e226 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	3304      	adds	r3, #4
 800ea7e:	69fa      	ldr	r2, [r7, #28]
 800ea80:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 800ea84:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	3305      	adds	r3, #5
 800ea8c:	69fa      	ldr	r2, [r7, #28]
 800ea8e:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 800ea92:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	3306      	adds	r3, #6
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	f892 207e 	ldrb.w	r2, [r2, #126]	@ 0x7e
 800eaa0:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2203      	movs	r2, #3
 800eaa6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eaac:	6978      	ldr	r0, [r7, #20]
 800eaae:	f7ff f9bd 	bl	800de2c <_ux_device_stack_transfer_request>
            break; 
 800eab2:	e027      	b.n	800eb04 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7ff fb8e 	bl	800e1da <_ux_utility_long_get>
 800eabe:	4602      	mov	r2, r0
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	791a      	ldrb	r2, [r3, #4]
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	795a      	ldrb	r2, [r3, #5]
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	799a      	ldrb	r2, [r3, #6]
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d008      	beq.n	800eb02 <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	69f8      	ldr	r0, [r7, #28]
 800eaf6:	4798      	blx	r3
            }

            break ;
 800eaf8:	e003      	b.n	800eb02 <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800eafa:	23ff      	movs	r3, #255	@ 0xff
 800eafc:	e003      	b.n	800eb06 <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 800eafe:	bf00      	nop
 800eb00:	e000      	b.n	800eb04 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 800eb02:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3728      	adds	r7, #40	@ 0x28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	20003170 	.word	0x20003170

0800eb14 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b088      	sub	sp, #32
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6a1b      	ldr	r3, [r3, #32]
 800eb20:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb26:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	69db      	ldr	r3, [r3, #28]
 800eb32:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	7b9b      	ldrb	r3, [r3, #14]
 800eb38:	b25b      	sxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	db05      	blt.n	800eb4a <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	695b      	ldr	r3, [r3, #20]
 800eb46:	61fb      	str	r3, [r7, #28]
 800eb48:	e002      	b.n	800eb50 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	695b      	ldr	r3, [r3, #20]
 800eb4e:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800eb50:	2126      	movs	r1, #38	@ 0x26
 800eb52:	69f8      	ldr	r0, [r7, #28]
 800eb54:	f7ff f958 	bl	800de08 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800eb58:	2126      	movs	r1, #38	@ 0x26
 800eb5a:	69b8      	ldr	r0, [r7, #24]
 800eb5c:	f7ff f954 	bl	800de08 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800eb60:	2200      	movs	r2, #0
 800eb62:	2107      	movs	r1, #7
 800eb64:	6938      	ldr	r0, [r7, #16]
 800eb66:	f000 f8bb 	bl	800ece0 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d003      	beq.n	800eb7a <_ux_device_class_cdc_acm_deactivate+0x66>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	6938      	ldr	r0, [r7, #16]
 800eb78:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	2b06      	cmp	r3, #6
 800eba4:	d836      	bhi.n	800ec14 <_ux_device_class_cdc_acm_entry+0x80>
 800eba6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebac <_ux_device_class_cdc_acm_entry+0x18>)
 800eba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebac:	0800ebe1 	.word	0x0800ebe1
 800ebb0:	0800ebf1 	.word	0x0800ebf1
 800ebb4:	0800ebfd 	.word	0x0800ebfd
 800ebb8:	0800ec09 	.word	0x0800ec09
 800ebbc:	0800ebc9 	.word	0x0800ebc9
 800ebc0:	0800ec15 	.word	0x0800ec15
 800ebc4:	0800ebd5 	.word	0x0800ebd5
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f829 	bl	800ec20 <_ux_device_class_cdc_acm_initialize>
 800ebce:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	e020      	b.n	800ec16 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f000 f94d 	bl	800ee74 <_ux_device_class_cdc_acm_uninitialize>
 800ebda:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	e01a      	b.n	800ec16 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	695b      	ldr	r3, [r3, #20]
 800ebe4:	2b0a      	cmp	r3, #10
 800ebe6:	d101      	bne.n	800ebec <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e014      	b.n	800ec16 <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800ebec:	2357      	movs	r3, #87	@ 0x57
 800ebee:	e012      	b.n	800ec16 <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7ff febf 	bl	800e974 <_ux_device_class_cdc_acm_activate>
 800ebf6:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	e00c      	b.n	800ec16 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7ff ff89 	bl	800eb14 <_ux_device_class_cdc_acm_deactivate>
 800ec02:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	e006      	b.n	800ec16 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7ff fed3 	bl	800e9b4 <_ux_device_class_cdc_acm_control_request>
 800ec0e:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	e000      	b.n	800ec16 <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800ec14:	2354      	movs	r3, #84	@ 0x54
    }   
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop

0800ec20 <_ux_device_class_cdc_acm_initialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a1b      	ldr	r3, [r3, #32]
 800ec2c:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800ec2e:	2284      	movs	r2, #132	@ 0x84
 800ec30:	2100      	movs	r1, #0
 800ec32:	2000      	movs	r0, #0
 800ec34:	f7ff fb1c 	bl	800e270 <_ux_utility_memory_allocate>
 800ec38:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d101      	bne.n	800ec44 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 800ec40:	2312      	movs	r3, #18
 800ec42:	e045      	b.n	800ecd0 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	693a      	ldr	r2, [r7, #16]
 800ec48:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec4e:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	685a      	ldr	r2, [r3, #4]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	689a      	ldr	r2, [r3, #8]
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	60da      	str	r2, [r3, #12]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	3310      	adds	r3, #16
 800ec6c:	491a      	ldr	r1, [pc, #104]	@ (800ecd8 <_ux_device_class_cdc_acm_initialize+0xb8>)
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7ff fdc0 	bl	800e7f4 <_ux_utility_mutex_create>
 800ec74:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <_ux_device_class_cdc_acm_initialize+0x66>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800ec7c:	6938      	ldr	r0, [r7, #16]
 800ec7e:	f7ff fd1b 	bl	800e6b8 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800ec82:	2317      	movs	r3, #23
 800ec84:	e024      	b.n	800ecd0 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	3344      	adds	r3, #68	@ 0x44
 800ec8a:	4914      	ldr	r1, [pc, #80]	@ (800ecdc <_ux_device_class_cdc_acm_initialize+0xbc>)
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7ff fdb1 	bl	800e7f4 <_ux_utility_mutex_create>
 800ec92:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d009      	beq.n	800ecae <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	3310      	adds	r3, #16
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff fdc1 	bl	800e826 <_ux_utility_mutex_delete>

        /* Free the resources.  */
#if defined(UX_DEVICE_CLASS_CDC_ACM_OWN_ENDPOINT_BUFFER)
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif
        _ux_utility_memory_free(cdc_acm);
 800eca4:	6938      	ldr	r0, [r7, #16]
 800eca6:	f7ff fd07 	bl	800e6b8 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800ecaa:	2317      	movs	r3, #23
 800ecac:	e010      	b.n	800ecd0 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ecb4:	679a      	str	r2, [r3, #120]	@ 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	2208      	movs	r2, #8
 800ecca:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3718      	adds	r7, #24
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	080104fc 	.word	0x080104fc
 800ecdc:	0801051c 	.word	0x0801051c

0800ece0 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08a      	sub	sp, #40	@ 0x28
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 800ecec:	2300      	movs	r3, #0
 800ecee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	2b08      	cmp	r3, #8
 800ecf6:	f200 80ae 	bhi.w	800ee56 <_ux_device_class_cdc_acm_ioctl+0x176>
 800ecfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ed00 <_ux_device_class_cdc_acm_ioctl+0x20>)
 800ecfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed00:	0800ed25 	.word	0x0800ed25
 800ed04:	0800ed51 	.word	0x0800ed51
 800ed08:	0800ed7d 	.word	0x0800ed7d
 800ed0c:	0800edb1 	.word	0x0800edb1
 800ed10:	0800ed97 	.word	0x0800ed97
 800ed14:	0800ee57 	.word	0x0800ee57
 800ed18:	0800ee57 	.word	0x0800ee57
 800ed1c:	0800ee11 	.word	0x0800ee11
 800ed20:	0800ee11 	.word	0x0800ee11
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	679a      	str	r2, [r3, #120]	@ 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	791a      	ldrb	r2, [r3, #4]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	795a      	ldrb	r2, [r3, #5]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	799a      	ldrb	r2, [r3, #6]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
            
            break;
 800ed4e:	e08b      	b.n	800ee68 <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f893 207e 	ldrb.w	r2, [r3, #126]	@ 0x7e
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	719a      	strb	r2, [r3, #6]
            
            break;
 800ed7a:	e075      	b.n	800ee68 <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f893 207f 	ldrb.w	r2, [r3, #127]	@ 0x7f
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	705a      	strb	r2, [r3, #1]
            
            break;
 800ed94:	e068      	b.n	800ee68 <_ux_device_class_cdc_acm_ioctl+0x188>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	781a      	ldrb	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	785a      	ldrb	r2, [r3, #1]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            
            break;
 800edae:	e05b      	b.n	800ee68 <_ux_device_class_cdc_acm_ioctl+0x188>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	69db      	ldr	r3, [r3, #28]
 800edba:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d002      	beq.n	800edc8 <_ux_device_class_cdc_acm_ioctl+0xe8>
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	d009      	beq.n	800edda <_ux_device_class_cdc_acm_ioctl+0xfa>
 800edc6:	e011      	b.n	800edec <_ux_device_class_cdc_acm_ioctl+0x10c>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	7b9b      	ldrb	r3, [r3, #14]
 800edcc:	b25b      	sxtb	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	db0f      	blt.n	800edf2 <_ux_device_class_cdc_acm_ioctl+0x112>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	695b      	ldr	r3, [r3, #20]
 800edd6:	623b      	str	r3, [r7, #32]
                }
                break;
 800edd8:	e00b      	b.n	800edf2 <_ux_device_class_cdc_acm_ioctl+0x112>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800edda:	6a3b      	ldr	r3, [r7, #32]
 800eddc:	7b9b      	ldrb	r3, [r3, #14]
 800edde:	b25b      	sxtb	r3, r3
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	da08      	bge.n	800edf6 <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	623b      	str	r3, [r7, #32]
                }
                break;
 800edea:	e004      	b.n	800edf6 <_ux_device_class_cdc_acm_ioctl+0x116>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800edec:	2353      	movs	r3, #83	@ 0x53
 800edee:	627b      	str	r3, [r7, #36]	@ 0x24
 800edf0:	e002      	b.n	800edf8 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800edf2:	bf00      	nop
 800edf4:	e000      	b.n	800edf8 <_ux_device_class_cdc_acm_ioctl+0x118>
                break;
 800edf6:	bf00      	nop
            }

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800edf8:	6a3b      	ldr	r3, [r7, #32]
 800edfa:	3320      	adds	r3, #32
 800edfc:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d12f      	bne.n	800ee66 <_ux_device_class_cdc_acm_ioctl+0x186>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800ee06:	21f9      	movs	r1, #249	@ 0xf9
 800ee08:	69b8      	ldr	r0, [r7, #24]
 800ee0a:	f7fe ffc3 	bl	800dd94 <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 800ee0e:	e02a      	b.n	800ee66 <_ux_device_class_cdc_acm_ioctl+0x186>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	69db      	ldr	r3, [r3, #28]
 800ee1a:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	7b9b      	ldrb	r3, [r3, #14]
 800ee20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	2a08      	cmp	r2, #8
 800ee28:	d101      	bne.n	800ee2e <_ux_device_class_cdc_acm_ioctl+0x14e>
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	e000      	b.n	800ee30 <_ux_device_class_cdc_acm_ioctl+0x150>
 800ee2e:	2280      	movs	r2, #128	@ 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d002      	beq.n	800ee3a <_ux_device_class_cdc_acm_ioctl+0x15a>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	3320      	adds	r3, #32
 800ee3e:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d102      	bne.n	800ee4e <_ux_device_class_cdc_acm_ioctl+0x16e>
                status = UX_ERROR;
 800ee48:	23ff      	movs	r3, #255	@ 0xff
 800ee4a:	627b      	str	r3, [r7, #36]	@ 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 800ee4c:	e00c      	b.n	800ee68 <_ux_device_class_cdc_acm_ioctl+0x188>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800ee54:	e008      	b.n	800ee68 <_ux_device_class_cdc_acm_ioctl+0x188>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800ee56:	2254      	movs	r2, #84	@ 0x54
 800ee58:	2107      	movs	r1, #7
 800ee5a:	2002      	movs	r0, #2
 800ee5c:	f7ff f870 	bl	800df40 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800ee60:	2354      	movs	r3, #84	@ 0x54
 800ee62:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee64:	e000      	b.n	800ee68 <_ux_device_class_cdc_acm_ioctl+0x188>
            break;
 800ee66:	bf00      	nop
    }

    /* Return status to caller.  */
    return(status);
 800ee68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3728      	adds	r7, #40	@ 0x28
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop

0800ee74 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a1b      	ldr	r3, [r3, #32]
 800ee80:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee86:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00c      	beq.n	800eea8 <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	3310      	adds	r3, #16
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff fcc7 	bl	800e826 <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	3344      	adds	r3, #68	@ 0x44
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff fcc2 	bl	800e826 <_ux_utility_mutex_delete>
        /* Free the buffer for bulk endpoints.  */
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800eea2:	68b8      	ldr	r0, [r7, #8]
 800eea4:	f7ff fc08 	bl	800e6b8 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b082      	sub	sp, #8
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2280      	movs	r2, #128	@ 0x80
 800eec0:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2201      	movs	r2, #1
 800eec6:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 800eec8:	6838      	ldr	r0, [r7, #0]
 800eeca:	f7fd ff33 	bl	800cd34 <_ux_device_stack_control_request_process>
}
 800eece:	bf00      	nop
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	60f8      	str	r0, [r7, #12]
 800eede:	60b9      	str	r1, [r7, #8]
 800eee0:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2200      	movs	r2, #0
 800eee6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2280      	movs	r2, #128	@ 0x80
 800eeec:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800eeee:	68b8      	ldr	r0, [r7, #8]
 800eef0:	f7fd ff20 	bl	800cd34 <_ux_device_stack_control_request_process>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d108      	bne.n	800ef0c <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2203      	movs	r2, #3
 800eefe:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800ef00:	2300      	movs	r3, #0
 800ef02:	2200      	movs	r2, #0
 800ef04:	2100      	movs	r1, #0
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7f3 fe81 	bl	8002c0e <HAL_PCD_EP_Transmit>
    }
}
 800ef0c:	bf00      	nop
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2280      	movs	r2, #128	@ 0x80
 800ef24:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800ef26:	68b8      	ldr	r0, [r7, #8]
 800ef28:	f7fd ff04 	bl	800cd34 <_ux_device_stack_control_request_process>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d108      	bne.n	800ef44 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2204      	movs	r2, #4
 800ef36:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800ef38:	2300      	movs	r3, #0
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7f3 fe65 	bl	8002c0e <HAL_PCD_EP_Transmit>
    }
}
 800ef44:	bf00      	nop
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b088      	sub	sp, #32
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ef54:	4b39      	ldr	r3, [pc, #228]	@ (800f03c <HAL_PCD_SetupStageCallback+0xf0>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	69db      	ldr	r3, [r3, #28]
 800ef5e:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	3304      	adds	r3, #4
 800ef64:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	3320      	adds	r3, #32
 800ef6c:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ef7a:	2208      	movs	r2, #8
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	f7ff fb7d 	bl	800e67c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	2200      	movs	r2, #0
 800ef86:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	2200      	movs	r2, #0
 800ef92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	f023 020e 	bic.w	r2, r3, #14
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800efa6:	b25b      	sxtb	r3, r3
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	da04      	bge.n	800efb6 <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800efac:	6939      	ldr	r1, [r7, #16]
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f7ff ff7f 	bl	800eeb2 <_ux_dcd_stm32_setup_in>
 800efb4:	e03e      	b.n	800f034 <HAL_PCD_SetupStageCallback+0xe8>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	2200      	movs	r2, #0
 800efba:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10a      	bne.n	800efdc <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d105      	bne.n	800efdc <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	6939      	ldr	r1, [r7, #16]
 800efd4:	6978      	ldr	r0, [r7, #20]
 800efd6:	f7ff ff9d 	bl	800ef14 <_ux_dcd_stm32_setup_status>
 800efda:	e02b      	b.n	800f034 <HAL_PCD_SetupStageCallback+0xe8>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	3354      	adds	r3, #84	@ 0x54
 800efe6:	3306      	adds	r3, #6
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff fc7f 	bl	800e8ec <_ux_utility_short_get>
 800efee:	4602      	mov	r2, r0
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	695b      	ldr	r3, [r3, #20]
 800eff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800effc:	d907      	bls.n	800f00e <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800effe:	68f9      	ldr	r1, [r7, #12]
 800f000:	69b8      	ldr	r0, [r7, #24]
 800f002:	f000 f9f9 	bl	800f3f8 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	2200      	movs	r2, #0
 800f00a:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 800f00c:	e012      	b.n	800f034 <HAL_PCD_SetupStageCallback+0xe8>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	2200      	movs	r2, #0
 800f012:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	68da      	ldr	r2, [r3, #12]
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7f3 fd9d 	bl	8002b68 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	2202      	movs	r2, #2
 800f032:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800f034:	3720      	adds	r7, #32
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	20003170 	.word	0x20003170

0800f040 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b088      	sub	sp, #32
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f04c:	4b56      	ldr	r3, [pc, #344]	@ (800f1a8 <HAL_PCD_DataInStageCallback+0x168>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	69db      	ldr	r3, [r3, #28]
 800f056:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800f058:	78fb      	ldrb	r3, [r7, #3]
 800f05a:	f003 030f 	and.w	r3, r3, #15
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00b      	beq.n	800f07a <HAL_PCD_DataInStageCallback+0x3a>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800f062:	78fb      	ldrb	r3, [r7, #3]
 800f064:	f003 020f 	and.w	r2, r3, #15
 800f068:	4613      	mov	r3, r2
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	4413      	add	r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	3370      	adds	r3, #112	@ 0x70
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	4413      	add	r3, r2
 800f076:	61fb      	str	r3, [r7, #28]
 800f078:	e00a      	b.n	800f090 <HAL_PCD_DataInStageCallback+0x50>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800f07a:	78fb      	ldrb	r3, [r7, #3]
 800f07c:	f003 020f 	and.w	r2, r3, #15
 800f080:	4613      	mov	r3, r2
 800f082:	005b      	lsls	r3, r3, #1
 800f084:	4413      	add	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	693a      	ldr	r2, [r7, #16]
 800f08a:	4413      	add	r3, r2
 800f08c:	3304      	adds	r3, #4
 800f08e:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	3320      	adds	r3, #32
 800f096:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800f098:	78fb      	ldrb	r3, [r7, #3]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d15c      	bne.n	800f158 <HAL_PCD_DataInStageCallback+0x118>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	7a1b      	ldrb	r3, [r3, #8]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d179      	bne.n	800f1a0 <HAL_PCD_DataInStageCallback+0x160>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7f3 fd58 	bl	8002b68 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d824      	bhi.n	800f10e <HAL_PCD_DataInStageCallback+0xce>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d10a      	bne.n	800f0e2 <HAL_PCD_DataInStageCallback+0xa2>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	7b99      	ldrb	r1, [r3, #14]
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7f3 fd9a 	bl	8002c0e <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800f0e0:	e05e      	b.n	800f1a0 <HAL_PCD_DataInStageCallback+0x160>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2202      	movs	r2, #2
 800f0ec:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <HAL_PCD_DataInStageCallback+0xc6>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	2204      	movs	r2, #4
 800f10a:	721a      	strb	r2, [r3, #8]
}
 800f10c:	e048      	b.n	800f1a0 <HAL_PCD_DataInStageCallback+0x160>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	69db      	ldr	r3, [r3, #28]
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	8a12      	ldrh	r2, [r2, #16]
 800f116:	1a9b      	subs	r3, r3, r2
 800f118:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	8a1b      	ldrh	r3, [r3, #16]
 800f11e:	461a      	mov	r2, r3
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	4293      	cmp	r3, r2
 800f124:	d902      	bls.n	800f12c <HAL_PCD_DataInStageCallback+0xec>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	8a1b      	ldrh	r3, [r3, #16]
 800f12a:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	691b      	ldr	r3, [r3, #16]
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	8a12      	ldrh	r2, [r2, #16]
 800f134:	441a      	add	r2, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	69da      	ldr	r2, [r3, #28]
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	1ad2      	subs	r2, r2, r3
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7f3 fd5c 	bl	8002c0e <HAL_PCD_EP_Transmit>
}
 800f156:	e023      	b.n	800f1a0 <HAL_PCD_DataInStageCallback+0x160>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d010      	beq.n	800f182 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00c      	beq.n	800f182 <HAL_PCD_DataInStageCallback+0x142>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	651a      	str	r2, [r3, #80]	@ 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2200      	movs	r2, #0
 800f172:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800f174:	78f9      	ldrb	r1, [r7, #3]
 800f176:	2300      	movs	r3, #0
 800f178:	2200      	movs	r2, #0
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7f3 fd47 	bl	8002c0e <HAL_PCD_EP_Transmit>
}
 800f180:	e00e      	b.n	800f1a0 <HAL_PCD_DataInStageCallback+0x160>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2200      	movs	r2, #0
 800f186:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2202      	movs	r2, #2
 800f18c:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	3330      	adds	r3, #48	@ 0x30
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff fb99 	bl	800e8d2 <_ux_utility_semaphore_put>
}
 800f1a0:	bf00      	nop
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	20003170 	.word	0x20003170

0800f1ac <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b088      	sub	sp, #32
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800f1b8:	4b3b      	ldr	r3, [pc, #236]	@ (800f2a8 <HAL_PCD_DataOutStageCallback+0xfc>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800f1c4:	78fb      	ldrb	r3, [r7, #3]
 800f1c6:	f003 020f 	and.w	r2, r3, #15
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	005b      	lsls	r3, r3, #1
 800f1ce:	4413      	add	r3, r2
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	69ba      	ldr	r2, [r7, #24]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	3304      	adds	r3, #4
 800f1d8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	3320      	adds	r3, #32
 800f1e0:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800f1e2:	78fb      	ldrb	r3, [r7, #3]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d147      	bne.n	800f278 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	7a1b      	ldrb	r3, [r3, #8]
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d156      	bne.n	800f29e <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800f1f6:	78fb      	ldrb	r3, [r7, #3]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7f3 fcef 	bl	8002bde <HAL_PCD_EP_GetRxCount>
 800f200:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	699a      	ldr	r2, [r3, #24]
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	441a      	add	r2, r3
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800f216:	429a      	cmp	r2, r3
 800f218:	d822      	bhi.n	800f260 <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800f222:	429a      	cmp	r2, r3
 800f224:	d005      	beq.n	800f232 <HAL_PCD_DataOutStageCallback+0x86>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	8a1b      	ldrh	r3, [r3, #16]
 800f22a:	461a      	mov	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	4293      	cmp	r3, r2
 800f230:	d005      	beq.n	800f23e <HAL_PCD_DataOutStageCallback+0x92>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	6939      	ldr	r1, [r7, #16]
 800f236:	6978      	ldr	r0, [r7, #20]
 800f238:	f7ff fe4d 	bl	800eed6 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800f23c:	e02f      	b.n	800f29e <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	8a12      	ldrh	r2, [r2, #16]
 800f246:	441a      	add	r2, r3
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7f3 fc85 	bl	8002b68 <HAL_PCD_EP_Receive>
}
 800f25e:	e01e      	b.n	800f29e <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	2227      	movs	r2, #39	@ 0x27
 800f264:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d017      	beq.n	800f29e <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f272:	6938      	ldr	r0, [r7, #16]
 800f274:	4798      	blx	r3
}
 800f276:	e012      	b.n	800f29e <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800f278:	78fb      	ldrb	r3, [r7, #3]
 800f27a:	4619      	mov	r1, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7f3 fcae 	bl	8002bde <HAL_PCD_EP_GetRxCount>
 800f282:	4602      	mov	r2, r0
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	2200      	movs	r2, #0
 800f28c:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	2202      	movs	r2, #2
 800f292:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	3330      	adds	r3, #48	@ 0x30
 800f298:	4618      	mov	r0, r3
 800f29a:	f7ff fb1a 	bl	800e8d2 <_ux_utility_semaphore_put>
}
 800f29e:	bf00      	nop
 800f2a0:	3720      	adds	r7, #32
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	20003170 	.word	0x20003170

0800f2ac <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800f2b4:	4b14      	ldr	r3, [pc, #80]	@ (800f308 <HAL_PCD_ResetCallback+0x5c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800f2be:	f7fe f8a9 	bl	800d414 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	79db      	ldrb	r3, [r3, #7]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d002      	beq.n	800f2d0 <HAL_PCD_ResetCallback+0x24>
 800f2ca:	2b02      	cmp	r3, #2
 800f2cc:	d006      	beq.n	800f2dc <HAL_PCD_ResetCallback+0x30>
 800f2ce:	e00b      	b.n	800f2e8 <HAL_PCD_ResetCallback+0x3c>
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800f2d0:	4b0d      	ldr	r3, [pc, #52]	@ (800f308 <HAL_PCD_ResetCallback+0x5c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800f2da:	e00b      	b.n	800f2f4 <HAL_PCD_ResetCallback+0x48>
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800f2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f308 <HAL_PCD_ResetCallback+0x5c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800f2e6:	e005      	b.n	800f2f4 <HAL_PCD_ResetCallback+0x48>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800f2e8:	4b07      	ldr	r3, [pc, #28]	@ (800f308 <HAL_PCD_ResetCallback+0x5c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        break;
 800f2f2:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800f2f4:	f000 f8a0 	bl	800f438 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f2f8:	4b03      	ldr	r3, [pc, #12]	@ (800f308 <HAL_PCD_ResetCallback+0x5c>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	621a      	str	r2, [r3, #32]
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	20003170 	.word	0x20003170

0800f30c <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f314:	4b07      	ldr	r3, [pc, #28]	@ (800f334 <HAL_PCD_ConnectCallback+0x28>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d005      	beq.n	800f32c <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 800f320:	4b04      	ldr	r3, [pc, #16]	@ (800f334 <HAL_PCD_ConnectCallback+0x28>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f328:	20f1      	movs	r0, #241	@ 0xf1
 800f32a:	4798      	blx	r3
    }
}
 800f32c:	bf00      	nop
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	20003170 	.word	0x20003170

0800f338 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f340:	4b0b      	ldr	r3, [pc, #44]	@ (800f370 <HAL_PCD_DisconnectCallback+0x38>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d005      	beq.n	800f358 <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 800f34c:	4b08      	ldr	r3, [pc, #32]	@ (800f370 <HAL_PCD_DisconnectCallback+0x38>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f354:	20f2      	movs	r0, #242	@ 0xf2
 800f356:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800f358:	4b05      	ldr	r3, [pc, #20]	@ (800f370 <HAL_PCD_DisconnectCallback+0x38>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800f362:	f7fe f857 	bl	800d414 <_ux_device_stack_disconnect>
    }
}
 800f366:	bf00      	nop
 800f368:	3708      	adds	r7, #8
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	20003170 	.word	0x20003170

0800f374 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f37c:	4b07      	ldr	r3, [pc, #28]	@ (800f39c <HAL_PCD_SuspendCallback+0x28>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f384:	2b00      	cmp	r3, #0
 800f386:	d005      	beq.n	800f394 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800f388:	4b04      	ldr	r3, [pc, #16]	@ (800f39c <HAL_PCD_SuspendCallback+0x28>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f390:	20f4      	movs	r0, #244	@ 0xf4
 800f392:	4798      	blx	r3
    }
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	20003170 	.word	0x20003170

0800f3a0 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f3a8:	4b07      	ldr	r3, [pc, #28]	@ (800f3c8 <HAL_PCD_ResumeCallback+0x28>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d005      	beq.n	800f3c0 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800f3b4:	4b04      	ldr	r3, [pc, #16]	@ (800f3c8 <HAL_PCD_ResumeCallback+0x28>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f3bc:	20f3      	movs	r0, #243	@ 0xf3
 800f3be:	4798      	blx	r3
    }
}
 800f3c0:	bf00      	nop
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	20003170 	.word	0x20003170

0800f3cc <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f3d4:	4b07      	ldr	r3, [pc, #28]	@ (800f3f4 <HAL_PCD_SOFCallback+0x28>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d005      	beq.n	800f3ec <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800f3e0:	4b04      	ldr	r3, [pc, #16]	@ (800f3f4 <HAL_PCD_SOFCallback+0x28>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f3e8:	20f0      	movs	r0, #240	@ 0xf0
 800f3ea:	4798      	blx	r3
    }
}
 800f3ec:	bf00      	nop
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	20003170 	.word	0x20003170

0800f3f8 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	f043 0204 	orr.w	r2, r3, #4
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	7b9a      	ldrb	r2, [r3, #14]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	7a9b      	ldrb	r3, [r3, #10]
 800f422:	4313      	orrs	r3, r2
 800f424:	b2db      	uxtb	r3, r3
 800f426:	4619      	mov	r1, r3
 800f428:	f7f3 fc2b 	bl	8002c82 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
	...

0800f438 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b086      	sub	sp, #24
 800f43c:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f43e:	4b62      	ldr	r3, [pc, #392]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	69db      	ldr	r3, [r3, #28]
 800f448:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f44a:	4b5f      	ldr	r3, [pc, #380]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	3320      	adds	r3, #32
 800f450:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800f452:	4b5d      	ldr	r3, [pc, #372]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d110      	bne.n	800f480 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800f45e:	4b5a      	ldr	r3, [pc, #360]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	4b59      	ldr	r3, [pc, #356]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f8d2 2108 	ldr.w	r2, [r2, #264]	@ 0x108
 800f46a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800f46e:	4b56      	ldr	r3, [pc, #344]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	4b55      	ldr	r3, [pc, #340]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
 800f47a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800f47e:	e02b      	b.n	800f4d8 <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800f480:	4b51      	ldr	r3, [pc, #324]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2200      	movs	r2, #0
 800f486:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800f48a:	4b4f      	ldr	r3, [pc, #316]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800f492:	2b01      	cmp	r3, #1
 800f494:	d110      	bne.n	800f4b8 <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800f496:	4b4c      	ldr	r3, [pc, #304]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	4b4b      	ldr	r3, [pc, #300]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 800f4a2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800f4a6:	4b48      	ldr	r3, [pc, #288]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	4b47      	ldr	r3, [pc, #284]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 800f4b2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800f4b6:	e00f      	b.n	800f4d8 <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800f4b8:	4b43      	ldr	r3, [pc, #268]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	4b42      	ldr	r3, [pc, #264]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800f4c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800f4c8:	4b3f      	ldr	r3, [pc, #252]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	4b3e      	ldr	r3, [pc, #248]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 800f4d4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800f4d8:	4b3b      	ldr	r3, [pc, #236]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f4e0:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800f4e6:	220e      	movs	r2, #14
 800f4e8:	4938      	ldr	r1, [pc, #224]	@ (800f5cc <_ux_dcd_stm32_initialize_complete+0x194>)
 800f4ea:	68b8      	ldr	r0, [r7, #8]
 800f4ec:	f7fe fe22 	bl	800e134 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	3338      	adds	r3, #56	@ 0x38
 800f4f4:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f4fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f103 0218 	add.w	r2, r3, #24
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	7adb      	ldrb	r3, [r3, #11]
 800f51e:	461a      	mov	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f103 0218 	add.w	r2, r3, #24
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800f536:	210e      	movs	r1, #14
 800f538:	6978      	ldr	r0, [r7, #20]
 800f53a:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f542:	2100      	movs	r1, #0
 800f544:	4618      	mov	r0, r3
 800f546:	f7f3 fc30 	bl	8002daa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	7adb      	ldrb	r3, [r3, #11]
 800f554:	461a      	mov	r2, r3
 800f556:	2300      	movs	r3, #0
 800f558:	2100      	movs	r1, #0
 800f55a:	f7f3 fa9b 	bl	8002a94 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800f564:	2180      	movs	r1, #128	@ 0x80
 800f566:	4618      	mov	r0, r3
 800f568:	f7f3 fc1f 	bl	8002daa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	7adb      	ldrb	r3, [r3, #11]
 800f576:	461a      	mov	r2, r3
 800f578:	2300      	movs	r3, #0
 800f57a:	2180      	movs	r1, #128	@ 0x80
 800f57c:	f7f3 fa8a 	bl	8002a94 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2200      	movs	r2, #0
 800f584:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2201      	movs	r2, #1
 800f58a:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2208      	movs	r2, #8
 800f596:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2208      	movs	r2, #8
 800f59c:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f5a4:	4b08      	ldr	r3, [pc, #32]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d005      	beq.n	800f5bc <_ux_dcd_stm32_initialize_complete+0x184>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800f5b0:	4b05      	ldr	r3, [pc, #20]	@ (800f5c8 <_ux_dcd_stm32_initialize_complete+0x190>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800f5b8:	2001      	movs	r0, #1
 800f5ba:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20003170 	.word	0x20003170
 800f5cc:	20000030 	.word	0x20000030

0800f5d0 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 800f5d0:	b590      	push	{r4, r7, lr}
 800f5d2:	b097      	sub	sp, #92	@ 0x5c
 800f5d4:	af08      	add	r7, sp, #32
 800f5d6:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	637b      	str	r3, [r7, #52]	@ 0x34
  ULONG language_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;

  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	633b      	str	r3, [r7, #48]	@ 0x30

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */
  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 800f5e0:	f107 010c 	add.w	r1, r7, #12
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f5ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5ec:	f7fc fabe 	bl	800bb6c <_txe_byte_allocate>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d001      	beq.n	800f5fa <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 800f5f6:	2302      	movs	r3, #2
 800f5f8:	e08b      	b.n	800f712 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_ALLOCATE_STACK_ERROR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	2200      	movs	r2, #0
 800f600:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f604:	f7fe fd62 	bl	800e0cc <_uxe_system_initialize>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d001      	beq.n	800f612 <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 800f60e:	23ff      	movs	r3, #255	@ 0xff
 800f610:	e07f      	b.n	800f712 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800f612:	f107 031c 	add.w	r3, r7, #28
 800f616:	4619      	mov	r1, r3
 800f618:	2001      	movs	r0, #1
 800f61a:	f000 f8bd 	bl	800f798 <USBD_Get_Device_Framework_Speed>
 800f61e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 800f620:	f107 0318 	add.w	r3, r7, #24
 800f624:	4619      	mov	r1, r3
 800f626:	2000      	movs	r0, #0
 800f628:	f000 f8b6 	bl	800f798 <USBD_Get_Device_Framework_Speed>
 800f62c:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 800f62e:	f107 0314 	add.w	r3, r7, #20
 800f632:	4618      	mov	r0, r3
 800f634:	f000 f8f2 	bl	800f81c <USBD_Get_String_Framework>
 800f638:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 800f63a:	f107 0310 	add.w	r3, r7, #16
 800f63e:	4618      	mov	r0, r3
 800f640:	f000 f970 	bl	800f924 <USBD_Get_Language_Id_Framework>
 800f644:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 800f646:	69f9      	ldr	r1, [r7, #28]
 800f648:	69b8      	ldr	r0, [r7, #24]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	693a      	ldr	r2, [r7, #16]
 800f64e:	2400      	movs	r4, #0
 800f650:	9404      	str	r4, [sp, #16]
 800f652:	9203      	str	r2, [sp, #12]
 800f654:	6a3a      	ldr	r2, [r7, #32]
 800f656:	9202      	str	r2, [sp, #8]
 800f658:	9301      	str	r3, [sp, #4]
 800f65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65c:	9300      	str	r3, [sp, #0]
 800f65e:	4603      	mov	r3, r0
 800f660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f662:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f664:	f7fd ffe4 	bl	800d630 <_ux_device_stack_initialize>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d001      	beq.n	800f672 <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
    return UX_ERROR;
 800f66e:	23ff      	movs	r3, #255	@ 0xff
 800f670:	e04f      	b.n	800f712 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 800f672:	4b2a      	ldr	r3, [pc, #168]	@ (800f71c <MX_USBX_Device_Init+0x14c>)
 800f674:	4a2a      	ldr	r2, [pc, #168]	@ (800f720 <MX_USBX_Device_Init+0x150>)
 800f676:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 800f678:	4b28      	ldr	r3, [pc, #160]	@ (800f71c <MX_USBX_Device_Init+0x14c>)
 800f67a:	4a2a      	ldr	r2, [pc, #168]	@ (800f724 <MX_USBX_Device_Init+0x154>)
 800f67c:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 800f67e:	4b27      	ldr	r3, [pc, #156]	@ (800f71c <MX_USBX_Device_Init+0x14c>)
 800f680:	4a29      	ldr	r2, [pc, #164]	@ (800f728 <MX_USBX_Device_Init+0x158>)
 800f682:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 800f684:	2100      	movs	r1, #0
 800f686:	2002      	movs	r0, #2
 800f688:	f000 f9ac 	bl	800f9e4 <USBD_Get_Configuration_Number>
 800f68c:	4603      	mov	r3, r0
 800f68e:	461a      	mov	r2, r3
 800f690:	4b26      	ldr	r3, [pc, #152]	@ (800f72c <MX_USBX_Device_Init+0x15c>)
 800f692:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 800f694:	2100      	movs	r1, #0
 800f696:	2002      	movs	r0, #2
 800f698:	f000 f966 	bl	800f968 <USBD_Get_Interface_Number>
 800f69c:	4603      	mov	r3, r0
 800f69e:	461a      	mov	r2, r3
 800f6a0:	4b23      	ldr	r3, [pc, #140]	@ (800f730 <MX_USBX_Device_Init+0x160>)
 800f6a2:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 800f6a4:	4b21      	ldr	r3, [pc, #132]	@ (800f72c <MX_USBX_Device_Init+0x15c>)
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	4b21      	ldr	r3, [pc, #132]	@ (800f730 <MX_USBX_Device_Init+0x160>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	491b      	ldr	r1, [pc, #108]	@ (800f71c <MX_USBX_Device_Init+0x14c>)
 800f6ae:	9100      	str	r1, [sp, #0]
 800f6b0:	4920      	ldr	r1, [pc, #128]	@ (800f734 <MX_USBX_Device_Init+0x164>)
 800f6b2:	4821      	ldr	r0, [pc, #132]	@ (800f738 <MX_USBX_Device_Init+0x168>)
 800f6b4:	f7fd f906 	bl	800c8c4 <_ux_device_stack_class_register>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <MX_USBX_Device_Init+0xf2>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
    return UX_ERROR;
 800f6be:	23ff      	movs	r3, #255	@ 0xff
 800f6c0:	e027      	b.n	800f712 <MX_USBX_Device_Init+0x142>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERROR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 800f6c2:	f107 010c 	add.w	r1, r7, #12
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f6cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6ce:	f7fc fa4d 	bl	800bb6c <_txe_byte_allocate>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d001      	beq.n	800f6dc <MX_USBX_Device_Init+0x10c>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERROR */
    return TX_POOL_ERROR;
 800f6d8:	2302      	movs	r3, #2
 800f6da:	e01a      	b.n	800f712 <MX_USBX_Device_Init+0x142>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERROR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	22b0      	movs	r2, #176	@ 0xb0
 800f6e0:	9206      	str	r2, [sp, #24]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	9205      	str	r2, [sp, #20]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	9204      	str	r2, [sp, #16]
 800f6ea:	220a      	movs	r2, #10
 800f6ec:	9203      	str	r2, [sp, #12]
 800f6ee:	220a      	movs	r2, #10
 800f6f0:	9202      	str	r2, [sp, #8]
 800f6f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f6f6:	9201      	str	r2, [sp, #4]
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	4a0f      	ldr	r2, [pc, #60]	@ (800f73c <MX_USBX_Device_Init+0x16c>)
 800f6fe:	4910      	ldr	r1, [pc, #64]	@ (800f740 <MX_USBX_Device_Init+0x170>)
 800f700:	4810      	ldr	r0, [pc, #64]	@ (800f744 <MX_USBX_Device_Init+0x174>)
 800f702:	f7fc fda9 	bl	800c258 <_txe_thread_create>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <MX_USBX_Device_Init+0x140>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERROR */
    return TX_THREAD_ERROR;
 800f70c:	230e      	movs	r3, #14
 800f70e:	e000      	b.n	800f712 <MX_USBX_Device_Init+0x142>

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 800f710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f712:	4618      	mov	r0, r3
 800f714:	373c      	adds	r7, #60	@ 0x3c
 800f716:	46bd      	mov	sp, r7
 800f718:	bd90      	pop	{r4, r7, pc}
 800f71a:	bf00      	nop
 800f71c:	20003180 	.word	0x20003180
 800f720:	0800f75d 	.word	0x0800f75d
 800f724:	0800f771 	.word	0x0800f771
 800f728:	0800f785 	.word	0x0800f785
 800f72c:	2000317c 	.word	0x2000317c
 800f730:	20003178 	.word	0x20003178
 800f734:	0800eb95 	.word	0x0800eb95
 800f738:	20000010 	.word	0x20000010
 800f73c:	0800f749 	.word	0x0800f749
 800f740:	08010540 	.word	0x08010540
 800f744:	2000318c 	.word	0x2000318c

0800f748 <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */
  TX_PARAMETER_NOT_USED(thread_input);
  /* USER CODE END app_ux_device_thread_entry */
}
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 800f764:	bf00      	nop
}
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 800f778:	bf00      	nop
}
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 800f78c:	bf00      	nop
}
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	6039      	str	r1, [r7, #0]
 800f7a2:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 800f7a8:	79fb      	ldrb	r3, [r7, #7]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d113      	bne.n	800f7d6 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 800f7ae:	4b16      	ldr	r3, [pc, #88]	@ (800f808 <USBD_Get_Device_Framework_Speed+0x70>)
 800f7b0:	6819      	ldr	r1, [r3, #0]
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	4a15      	ldr	r2, [pc, #84]	@ (800f80c <USBD_Get_Device_Framework_Speed+0x74>)
 800f7b6:	4816      	ldr	r0, [pc, #88]	@ (800f810 <USBD_Get_Device_Framework_Speed+0x78>)
 800f7b8:	f000 f974 	bl	800faa4 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800f7bc:	4b14      	ldr	r3, [pc, #80]	@ (800f810 <USBD_Get_Device_Framework_Speed+0x78>)
 800f7be:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800f7c2:	4b13      	ldr	r3, [pc, #76]	@ (800f810 <USBD_Get_Device_Framework_Speed+0x78>)
 800f7c4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800f7c8:	441a      	add	r2, r3
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 800f7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f808 <USBD_Get_Device_Framework_Speed+0x70>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	60fb      	str	r3, [r7, #12]
 800f7d4:	e012      	b.n	800f7fc <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 800f7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f814 <USBD_Get_Device_Framework_Speed+0x7c>)
 800f7d8:	6819      	ldr	r1, [r3, #0]
 800f7da:	79fb      	ldrb	r3, [r7, #7]
 800f7dc:	4a0b      	ldr	r2, [pc, #44]	@ (800f80c <USBD_Get_Device_Framework_Speed+0x74>)
 800f7de:	480e      	ldr	r0, [pc, #56]	@ (800f818 <USBD_Get_Device_Framework_Speed+0x80>)
 800f7e0:	f000 f960 	bl	800faa4 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 800f7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f818 <USBD_Get_Device_Framework_Speed+0x80>)
 800f7e6:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800f7ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f818 <USBD_Get_Device_Framework_Speed+0x80>)
 800f7ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800f7f0:	441a      	add	r2, r3
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 800f7f6:	4b07      	ldr	r3, [pc, #28]	@ (800f814 <USBD_Get_Device_Framework_Speed+0x7c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	20000064 	.word	0x20000064
 800f80c:	20000058 	.word	0x20000058
 800f810:	2000323c 	.word	0x2000323c
 800f814:	20000068 	.word	0x20000068
 800f818:	20003364 	.word	0x20003364

0800f81c <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 800f824:	2300      	movs	r3, #0
 800f826:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 800f828:	2300      	movs	r3, #0
 800f82a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f82c:	7bfb      	ldrb	r3, [r7, #15]
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	73fa      	strb	r2, [r7, #15]
 800f832:	461a      	mov	r2, r3
 800f834:	4b37      	ldr	r3, [pc, #220]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f836:	2109      	movs	r1, #9
 800f838:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f83a:	7bfb      	ldrb	r3, [r7, #15]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	73fa      	strb	r2, [r7, #15]
 800f840:	461a      	mov	r2, r3
 800f842:	4b34      	ldr	r3, [pc, #208]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f844:	2104      	movs	r1, #4
 800f846:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800f848:	7bfb      	ldrb	r3, [r7, #15]
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	73fa      	strb	r2, [r7, #15]
 800f84e:	461a      	mov	r2, r3
 800f850:	4b30      	ldr	r3, [pc, #192]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f852:	2101      	movs	r1, #1
 800f854:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 800f856:	7bfb      	ldrb	r3, [r7, #15]
 800f858:	4a2e      	ldr	r2, [pc, #184]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f85a:	4413      	add	r3, r2
 800f85c:	f107 020c 	add.w	r2, r7, #12
 800f860:	4619      	mov	r1, r3
 800f862:	482d      	ldr	r0, [pc, #180]	@ (800f918 <USBD_Get_String_Framework+0xfc>)
 800f864:	f000 f8d0 	bl	800fa08 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 800f868:	89bb      	ldrh	r3, [r7, #12]
 800f86a:	b2da      	uxtb	r2, r3
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	4413      	add	r3, r2
 800f870:	b2db      	uxtb	r3, r3
 800f872:	3301      	adds	r3, #1
 800f874:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f876:	7bfb      	ldrb	r3, [r7, #15]
 800f878:	1c5a      	adds	r2, r3, #1
 800f87a:	73fa      	strb	r2, [r7, #15]
 800f87c:	461a      	mov	r2, r3
 800f87e:	4b25      	ldr	r3, [pc, #148]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f880:	2109      	movs	r1, #9
 800f882:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f884:	7bfb      	ldrb	r3, [r7, #15]
 800f886:	1c5a      	adds	r2, r3, #1
 800f888:	73fa      	strb	r2, [r7, #15]
 800f88a:	461a      	mov	r2, r3
 800f88c:	4b21      	ldr	r3, [pc, #132]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f88e:	2104      	movs	r1, #4
 800f890:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800f892:	7bfb      	ldrb	r3, [r7, #15]
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	73fa      	strb	r2, [r7, #15]
 800f898:	461a      	mov	r2, r3
 800f89a:	4b1e      	ldr	r3, [pc, #120]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f89c:	2102      	movs	r1, #2
 800f89e:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800f8a0:	7bfb      	ldrb	r3, [r7, #15]
 800f8a2:	4a1c      	ldr	r2, [pc, #112]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f107 020c 	add.w	r2, r7, #12
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	481b      	ldr	r0, [pc, #108]	@ (800f91c <USBD_Get_String_Framework+0x100>)
 800f8ae:	f000 f8ab 	bl	800fa08 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 800f8b2:	89bb      	ldrh	r3, [r7, #12]
 800f8b4:	b2da      	uxtb	r2, r3
 800f8b6:	7bfb      	ldrb	r3, [r7, #15]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	3301      	adds	r3, #1
 800f8be:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f8c0:	7bfb      	ldrb	r3, [r7, #15]
 800f8c2:	1c5a      	adds	r2, r3, #1
 800f8c4:	73fa      	strb	r2, [r7, #15]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	4b12      	ldr	r3, [pc, #72]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f8ca:	2109      	movs	r1, #9
 800f8cc:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f8ce:	7bfb      	ldrb	r3, [r7, #15]
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	73fa      	strb	r2, [r7, #15]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f8d8:	2104      	movs	r1, #4
 800f8da:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800f8dc:	7bfb      	ldrb	r3, [r7, #15]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	73fa      	strb	r2, [r7, #15]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f8e6:	2103      	movs	r1, #3
 800f8e8:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 800f8ea:	7bfb      	ldrb	r3, [r7, #15]
 800f8ec:	4a09      	ldr	r2, [pc, #36]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f107 020c 	add.w	r2, r7, #12
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	480a      	ldr	r0, [pc, #40]	@ (800f920 <USBD_Get_String_Framework+0x104>)
 800f8f8:	f000 f886 	bl	800fa08 <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 800f8fc:	4805      	ldr	r0, [pc, #20]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
 800f8fe:	f7f0 fde5 	bl	80004cc <strlen>
 800f902:	4602      	mov	r2, r0
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 800f908:	4b02      	ldr	r3, [pc, #8]	@ (800f914 <USBD_Get_String_Framework+0xf8>)
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	2000361c 	.word	0x2000361c
 800f918:	0801055c 	.word	0x0801055c
 800f91c:	08010570 	.word	0x08010570
 800f920:	08010588 	.word	0x08010588

0800f924 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 800f92c:	2300      	movs	r3, #0
 800f92e:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f930:	7bfb      	ldrb	r3, [r7, #15]
 800f932:	1c5a      	adds	r2, r3, #1
 800f934:	73fa      	strb	r2, [r7, #15]
 800f936:	461a      	mov	r2, r3
 800f938:	4b0a      	ldr	r3, [pc, #40]	@ (800f964 <USBD_Get_Language_Id_Framework+0x40>)
 800f93a:	2109      	movs	r1, #9
 800f93c:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 800f93e:	7bfb      	ldrb	r3, [r7, #15]
 800f940:	1c5a      	adds	r2, r3, #1
 800f942:	73fa      	strb	r2, [r7, #15]
 800f944:	461a      	mov	r2, r3
 800f946:	4b07      	ldr	r3, [pc, #28]	@ (800f964 <USBD_Get_Language_Id_Framework+0x40>)
 800f948:	2104      	movs	r1, #4
 800f94a:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 800f94c:	4805      	ldr	r0, [pc, #20]	@ (800f964 <USBD_Get_Language_Id_Framework+0x40>)
 800f94e:	f7f0 fdbd 	bl	80004cc <strlen>
 800f952:	4602      	mov	r2, r0
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 800f958:	4b02      	ldr	r3, [pc, #8]	@ (800f964 <USBD_Get_Language_Id_Framework+0x40>)
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	2000371c 	.word	0x2000371c

0800f968 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	460a      	mov	r2, r1
 800f972:	71fb      	strb	r3, [r7, #7]
 800f974:	4613      	mov	r3, r2
 800f976:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 800f978:	2300      	movs	r3, #0
 800f97a:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 800f97c:	2300      	movs	r3, #0
 800f97e:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800f980:	2300      	movs	r3, #0
 800f982:	73bb      	strb	r3, [r7, #14]
 800f984:	e021      	b.n	800f9ca <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800f986:	7bbb      	ldrb	r3, [r7, #14]
 800f988:	4a15      	ldr	r2, [pc, #84]	@ (800f9e0 <USBD_Get_Interface_Number+0x78>)
 800f98a:	215c      	movs	r1, #92	@ 0x5c
 800f98c:	fb01 f303 	mul.w	r3, r1, r3
 800f990:	4413      	add	r3, r2
 800f992:	330c      	adds	r3, #12
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	79fa      	ldrb	r2, [r7, #7]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d113      	bne.n	800f9c4 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 800f99c:	7bbb      	ldrb	r3, [r7, #14]
 800f99e:	4a10      	ldr	r2, [pc, #64]	@ (800f9e0 <USBD_Get_Interface_Number+0x78>)
 800f9a0:	215c      	movs	r1, #92	@ 0x5c
 800f9a2:	fb01 f303 	mul.w	r3, r1, r3
 800f9a6:	4413      	add	r3, r2
 800f9a8:	3314      	adds	r3, #20
 800f9aa:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800f9ac:	79ba      	ldrb	r2, [r7, #6]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d108      	bne.n	800f9c4 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800f9b2:	7bbb      	ldrb	r3, [r7, #14]
 800f9b4:	4a0a      	ldr	r2, [pc, #40]	@ (800f9e0 <USBD_Get_Interface_Number+0x78>)
 800f9b6:	215c      	movs	r1, #92	@ 0x5c
 800f9b8:	fb01 f303 	mul.w	r3, r1, r3
 800f9bc:	4413      	add	r3, r2
 800f9be:	335a      	adds	r3, #90	@ 0x5a
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800f9c4:	7bbb      	ldrb	r3, [r7, #14]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	73bb      	strb	r3, [r7, #14]
 800f9ca:	7bbb      	ldrb	r3, [r7, #14]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d9da      	bls.n	800f986 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 800f9d0:	7bfb      	ldrb	r3, [r7, #15]
 800f9d2:	b29b      	uxth	r3, r3
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3714      	adds	r7, #20
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr
 800f9e0:	2000323c 	.word	0x2000323c

0800f9e4 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	460a      	mov	r2, r1
 800f9ee:	71fb      	strb	r3, [r7, #7]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
 800f9fa:	b29b      	uxth	r3, r3
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3714      	adds	r7, #20
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b086      	sub	sp, #24
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa14:	2300      	movs	r3, #0
 800fa16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d023      	beq.n	800fa66 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 800fa22:	6938      	ldr	r0, [r7, #16]
 800fa24:	f000 f823 	bl	800fa6e <USBD_Desc_GetLen>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 800fa30:	7dfb      	ldrb	r3, [r7, #23]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	75fa      	strb	r2, [r7, #23]
 800fa36:	461a      	mov	r2, r3
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	7812      	ldrb	r2, [r2, #0]
 800fa40:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800fa42:	e00b      	b.n	800fa5c <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 800fa44:	7dfb      	ldrb	r3, [r7, #23]
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	75fa      	strb	r2, [r7, #23]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	4413      	add	r3, r2
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	7812      	ldrb	r2, [r2, #0]
 800fa54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d1ef      	bne.n	800fa44 <USBD_Desc_GetString+0x3c>
 800fa64:	e000      	b.n	800fa68 <USBD_Desc_GetString+0x60>
    return;
 800fa66:	bf00      	nop
  }
}
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 800fa6e:	b480      	push	{r7}
 800fa70:	b085      	sub	sp, #20
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa76:	2300      	movs	r3, #0
 800fa78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa7e:	e005      	b.n	800fa8c <USBD_Desc_GetLen+0x1e>
  {
    len++;
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	3301      	adds	r3, #1
 800fa84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1f5      	bne.n	800fa80 <USBD_Desc_GetLen+0x12>
  }

  return len;
 800fa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3714      	adds	r7, #20
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
	...

0800faa4 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b088      	sub	sp, #32
 800faa8:	af02      	add	r7, sp, #8
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	607a      	str	r2, [r7, #4]
 800fab0:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 800fab2:	2300      	movs	r3, #0
 800fab4:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2200      	movs	r2, #0
 800faba:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  pdev->CurrDevDescSz = 0U;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2200      	movs	r2, #0
 800fac2:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800fac6:	4a73      	ldr	r2, [pc, #460]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800facc:	4b71      	ldr	r3, [pc, #452]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2212      	movs	r2, #18
 800fad2:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800fad4:	4b6f      	ldr	r3, [pc, #444]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2201      	movs	r2, #1
 800fada:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800fadc:	4b6d      	ldr	r3, [pc, #436]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2200      	movs	r2, #0
 800fae2:	709a      	strb	r2, [r3, #2]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f042 0202 	orr.w	r2, r2, #2
 800faea:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 800faec:	4b69      	ldr	r3, [pc, #420]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2200      	movs	r2, #0
 800faf2:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 800faf4:	4b67      	ldr	r3, [pc, #412]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2200      	movs	r2, #0
 800fafa:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 800fafc:	4b65      	ldr	r3, [pc, #404]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2200      	movs	r2, #0
 800fb02:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800fb04:	4b63      	ldr	r3, [pc, #396]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2240      	movs	r2, #64	@ 0x40
 800fb0a:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 800fb0c:	4b61      	ldr	r3, [pc, #388]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f062 027c 	orn	r2, r2, #124	@ 0x7c
 800fb16:	721a      	strb	r2, [r3, #8]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f042 0204 	orr.w	r2, r2, #4
 800fb1e:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 800fb20:	4b5c      	ldr	r3, [pc, #368]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2200      	movs	r2, #0
 800fb26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb2a:	729a      	strb	r2, [r3, #10]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
 800fb32:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 800fb34:	4b57      	ldr	r3, [pc, #348]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	731a      	strb	r2, [r3, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f042 0202 	orr.w	r2, r2, #2
 800fb42:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800fb44:	4b53      	ldr	r3, [pc, #332]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800fb4c:	4b51      	ldr	r3, [pc, #324]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2202      	movs	r2, #2
 800fb52:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800fb54:	4b4f      	ldr	r3, [pc, #316]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2203      	movs	r2, #3
 800fb5a:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800fb5c:	4b4d      	ldr	r3, [pc, #308]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2201      	movs	r2, #1
 800fb62:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800fb6a:	f103 0212 	add.w	r2, r3, #18
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 800fb74:	78fb      	ldrb	r3, [r7, #3]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d162      	bne.n	800fc40 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	4413      	add	r3, r2
 800fb84:	4a44      	ldr	r2, [pc, #272]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fb86:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800fb88:	4b43      	ldr	r3, [pc, #268]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	220a      	movs	r2, #10
 800fb8e:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800fb90:	4b41      	ldr	r3, [pc, #260]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2206      	movs	r2, #6
 800fb96:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 800fb98:	4b3f      	ldr	r3, [pc, #252]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	709a      	strb	r2, [r3, #2]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f042 0202 	orr.w	r2, r2, #2
 800fba6:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 800fba8:	4b3b      	ldr	r3, [pc, #236]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2200      	movs	r2, #0
 800fbae:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 800fbb0:	4b39      	ldr	r3, [pc, #228]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 800fbb8:	4b37      	ldr	r3, [pc, #220]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 800fbc0:	4b35      	ldr	r3, [pc, #212]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2240      	movs	r2, #64	@ 0x40
 800fbc6:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 800fbc8:	4b33      	ldr	r3, [pc, #204]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 800fbd0:	4b31      	ldr	r3, [pc, #196]	@ (800fc98 <USBD_Device_Framework_Builder+0x1f4>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800fbde:	f103 020a 	add.w	r2, r3, #10
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800fbe8:	e02a      	b.n	800fc40 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	2b02      	cmp	r3, #2
 800fbf0:	d823      	bhi.n	800fc3a <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	d81f      	bhi.n	800fc3a <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 800fbfa:	7dfb      	ldrb	r3, [r7, #23]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	4413      	add	r3, r2
 800fc00:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d019      	beq.n	800fc3a <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 800fc06:	7dfb      	ldrb	r3, [r7, #23]
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 800fc0c:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	4413      	add	r3, r2
 800fc18:	78fa      	ldrb	r2, [r7, #3]
 800fc1a:	9300      	str	r3, [sp, #0]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	2200      	movs	r2, #0
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f000 f83b 	bl	800fc9c <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	1c5a      	adds	r2, r3, #1
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	1c5a      	adds	r2, r3, #1
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 800fc3a:	7dfb      	ldrb	r3, [r7, #23]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800fc40:	7dfb      	ldrb	r3, [r7, #23]
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	d9d1      	bls.n	800fbea <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d90c      	bls.n	800fc68 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 800fc4e:	4b11      	ldr	r3, [pc, #68]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	22ef      	movs	r2, #239	@ 0xef
 800fc54:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800fc56:	4b0f      	ldr	r3, [pc, #60]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2202      	movs	r2, #2
 800fc5c:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 800fc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2201      	movs	r2, #1
 800fc64:	719a      	strb	r2, [r3, #6]
 800fc66:	e00f      	b.n	800fc88 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	2b02      	cmp	r3, #2
 800fc6e:	d10b      	bne.n	800fc88 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 800fc70:	4b08      	ldr	r3, [pc, #32]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2202      	movs	r2, #2
 800fc76:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800fc78:	4b06      	ldr	r3, [pc, #24]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2202      	movs	r2, #2
 800fc7e:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 800fc80:	4b04      	ldr	r3, [pc, #16]	@ (800fc94 <USBD_Device_Framework_Builder+0x1f0>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2200      	movs	r2, #0
 800fc86:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 800fc88:	68bb      	ldr	r3, [r7, #8]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3718      	adds	r7, #24
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	20003720 	.word	0x20003720
 800fc98:	20003724 	.word	0x20003724

0800fc9c <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	4608      	mov	r0, r1
 800fca6:	4611      	mov	r1, r2
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4603      	mov	r3, r0
 800fcac:	70fb      	strb	r3, [r7, #3]
 800fcae:	460b      	mov	r3, r1
 800fcb0:	70bb      	strb	r3, [r7, #2]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	707b      	strb	r3, [r7, #1]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d834      	bhi.n	800fd28 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	215c      	movs	r1, #92	@ 0x5c
 800fcc6:	fb01 f303 	mul.w	r3, r1, r3
 800fcca:	4413      	add	r3, r2
 800fccc:	3318      	adds	r3, #24
 800fcce:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d129      	bne.n	800fd28 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	6852      	ldr	r2, [r2, #4]
 800fcdc:	6879      	ldr	r1, [r7, #4]
 800fcde:	205c      	movs	r0, #92	@ 0x5c
 800fce0:	fb00 f303 	mul.w	r3, r0, r3
 800fce4:	440b      	add	r3, r1
 800fce6:	3310      	adds	r3, #16
 800fce8:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	215c      	movs	r1, #92	@ 0x5c
 800fcf2:	fb01 f303 	mul.w	r3, r1, r3
 800fcf6:	4413      	add	r3, r2
 800fcf8:	3318      	adds	r3, #24
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	215c      	movs	r1, #92	@ 0x5c
 800fd06:	fb01 f303 	mul.w	r3, r1, r3
 800fd0a:	4413      	add	r3, r2
 800fd0c:	330c      	adds	r3, #12
 800fd0e:	78fa      	ldrb	r2, [r7, #3]
 800fd10:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 800fd12:	787b      	ldrb	r3, [r7, #1]
 800fd14:	693a      	ldr	r2, [r7, #16]
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 f80a 	bl	800fd32 <USBD_FrameWork_AddToConfDesc>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 800fd24:	23ff      	movs	r3, #255	@ 0xff
 800fd26:	e000      	b.n	800fd2a <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b086      	sub	sp, #24
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	60f8      	str	r0, [r7, #12]
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	607a      	str	r2, [r7, #4]
 800fd3e:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 800fd40:	2300      	movs	r3, #0
 800fd42:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	7afa      	ldrb	r2, [r7, #11]
 800fd48:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d107      	bne.n	800fd62 <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	4610      	mov	r0, r2
 800fd5e:	f000 f8a1 	bl	800fea4 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	215c      	movs	r1, #92	@ 0x5c
 800fd6a:	fb01 f303 	mul.w	r3, r1, r3
 800fd6e:	4413      	add	r3, r2
 800fd70:	330c      	adds	r3, #12
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	2b02      	cmp	r3, #2
 800fd76:	d162      	bne.n	800fe3e <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f000 f866 	bl	800fe4a <USBD_FrameWork_FindFreeIFNbr>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	215c      	movs	r1, #92	@ 0x5c
 800fd8a:	fb01 f303 	mul.w	r3, r1, r3
 800fd8e:	4413      	add	r3, r2
 800fd90:	3320      	adds	r3, #32
 800fd92:	2202      	movs	r2, #2
 800fd94:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	215c      	movs	r1, #92	@ 0x5c
 800fd9e:	fb01 f303 	mul.w	r3, r1, r3
 800fda2:	4413      	add	r3, r2
 800fda4:	335a      	adds	r3, #90	@ 0x5a
 800fda6:	7dfa      	ldrb	r2, [r7, #23]
 800fda8:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	7dfa      	ldrb	r2, [r7, #23]
 800fdb0:	3201      	adds	r2, #1
 800fdb2:	b2d0      	uxtb	r0, r2
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	215c      	movs	r1, #92	@ 0x5c
 800fdb8:	fb01 f303 	mul.w	r3, r1, r3
 800fdbc:	4413      	add	r3, r2
 800fdbe:	335b      	adds	r3, #91	@ 0x5b
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	215c      	movs	r1, #92	@ 0x5c
 800fdcc:	fb01 f303 	mul.w	r3, r1, r3
 800fdd0:	4413      	add	r3, r2
 800fdd2:	331c      	adds	r3, #28
 800fdd4:	2203      	movs	r2, #3
 800fdd6:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 800fdd8:	7afb      	ldrb	r3, [r7, #11]
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d114      	bne.n	800fe08 <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800fdde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fde2:	2202      	movs	r2, #2
 800fde4:	2103      	movs	r1, #3
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f000 f889 	bl	800fefe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800fdec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdf0:	2202      	movs	r2, #2
 800fdf2:	2182      	movs	r1, #130	@ 0x82
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f000 f882 	bl	800fefe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800fdfa:	2308      	movs	r3, #8
 800fdfc:	2203      	movs	r2, #3
 800fdfe:	2181      	movs	r1, #129	@ 0x81
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f000 f87c 	bl	800fefe <USBD_FrameWork_AssignEp>
 800fe06:	e011      	b.n	800fe2c <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800fe08:	2340      	movs	r3, #64	@ 0x40
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	2103      	movs	r1, #3
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f000 f875 	bl	800fefe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800fe14:	2340      	movs	r3, #64	@ 0x40
 800fe16:	2202      	movs	r2, #2
 800fe18:	2182      	movs	r1, #130	@ 0x82
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f000 f86f 	bl	800fefe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800fe20:	2308      	movs	r3, #8
 800fe22:	2203      	movs	r2, #3
 800fe24:	2181      	movs	r1, #129	@ 0x81
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f000 f869 	bl	800fefe <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 800fe2c:	6879      	ldr	r1, [r7, #4]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800fe34:	461a      	mov	r2, r3
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f000 f8d4 	bl	800ffe4 <USBD_FrameWork_CDCDesc>

      break;
 800fe3c:	e000      	b.n	800fe40 <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 800fe3e:	bf00      	nop
  }

  return UX_SUCCESS;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3718      	adds	r7, #24
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 800fe4a:	b480      	push	{r7}
 800fe4c:	b087      	sub	sp, #28
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800fe56:	2300      	movs	r3, #0
 800fe58:	613b      	str	r3, [r7, #16]
 800fe5a:	e016      	b.n	800fe8a <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	e005      	b.n	800fe6e <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	3301      	adds	r3, #1
 800fe66:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	60fb      	str	r3, [r7, #12]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	215c      	movs	r1, #92	@ 0x5c
 800fe74:	fb01 f303 	mul.w	r3, r1, r3
 800fe78:	4413      	add	r3, r2
 800fe7a:	3320      	adds	r3, #32
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d3ee      	bcc.n	800fe62 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	3301      	adds	r3, #1
 800fe88:	613b      	str	r3, [r7, #16]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	693a      	ldr	r2, [r7, #16]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d3e3      	bcc.n	800fe5c <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	b2db      	uxtb	r3, r3
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	371c      	adds	r7, #28
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr

0800fea4 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b085      	sub	sp, #20
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2209      	movs	r2, #9
 800feb6:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2202      	movs	r2, #2
 800febc:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2200      	movs	r2, #0
 800fec2:	709a      	strb	r2, [r3, #2]
 800fec4:	2200      	movs	r2, #0
 800fec6:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2201      	movs	r2, #1
 800fed2:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2200      	movs	r2, #0
 800fed8:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	22c0      	movs	r2, #192	@ 0xc0
 800fede:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2219      	movs	r2, #25
 800fee4:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f103 0209 	add.w	r2, r3, #9
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	601a      	str	r2, [r3, #0]
}
 800fef2:	bf00      	nop
 800fef4:	3714      	adds	r7, #20
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr

0800fefe <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 800fefe:	b490      	push	{r4, r7}
 800ff00:	b086      	sub	sp, #24
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	60f8      	str	r0, [r7, #12]
 800ff06:	607b      	str	r3, [r7, #4]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	72fb      	strb	r3, [r7, #11]
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 800ff10:	2300      	movs	r3, #0
 800ff12:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800ff14:	e002      	b.n	800ff1c <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	68fa      	ldr	r2, [r7, #12]
 800ff22:	215c      	movs	r1, #92	@ 0x5c
 800ff24:	fb01 f303 	mul.w	r3, r1, r3
 800ff28:	4413      	add	r3, r2
 800ff2a:	331c      	adds	r3, #28
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	697a      	ldr	r2, [r7, #20]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d210      	bcs.n	800ff56 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6858      	ldr	r0, [r3, #4]
 800ff38:	68f9      	ldr	r1, [r7, #12]
 800ff3a:	697a      	ldr	r2, [r7, #20]
 800ff3c:	4613      	mov	r3, r2
 800ff3e:	005b      	lsls	r3, r3, #1
 800ff40:	4413      	add	r3, r2
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	225c      	movs	r2, #92	@ 0x5c
 800ff46:	fb00 f202 	mul.w	r2, r0, r2
 800ff4a:	4413      	add	r3, r2
 800ff4c:	440b      	add	r3, r1
 800ff4e:	3328      	adds	r3, #40	@ 0x28
 800ff50:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1df      	bne.n	800ff16 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6858      	ldr	r0, [r3, #4]
 800ff5a:	68f9      	ldr	r1, [r7, #12]
 800ff5c:	697a      	ldr	r2, [r7, #20]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	4413      	add	r3, r2
 800ff64:	005b      	lsls	r3, r3, #1
 800ff66:	225c      	movs	r2, #92	@ 0x5c
 800ff68:	fb00 f202 	mul.w	r2, r0, r2
 800ff6c:	4413      	add	r3, r2
 800ff6e:	440b      	add	r3, r1
 800ff70:	3324      	adds	r3, #36	@ 0x24
 800ff72:	7afa      	ldrb	r2, [r7, #11]
 800ff74:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6858      	ldr	r0, [r3, #4]
 800ff7a:	68f9      	ldr	r1, [r7, #12]
 800ff7c:	697a      	ldr	r2, [r7, #20]
 800ff7e:	4613      	mov	r3, r2
 800ff80:	005b      	lsls	r3, r3, #1
 800ff82:	4413      	add	r3, r2
 800ff84:	005b      	lsls	r3, r3, #1
 800ff86:	225c      	movs	r2, #92	@ 0x5c
 800ff88:	fb00 f202 	mul.w	r2, r0, r2
 800ff8c:	4413      	add	r3, r2
 800ff8e:	440b      	add	r3, r1
 800ff90:	3325      	adds	r3, #37	@ 0x25
 800ff92:	7aba      	ldrb	r2, [r7, #10]
 800ff94:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6858      	ldr	r0, [r3, #4]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	b29c      	uxth	r4, r3
 800ff9e:	68f9      	ldr	r1, [r7, #12]
 800ffa0:	697a      	ldr	r2, [r7, #20]
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	005b      	lsls	r3, r3, #1
 800ffa6:	4413      	add	r3, r2
 800ffa8:	005b      	lsls	r3, r3, #1
 800ffaa:	225c      	movs	r2, #92	@ 0x5c
 800ffac:	fb00 f202 	mul.w	r2, r0, r2
 800ffb0:	4413      	add	r3, r2
 800ffb2:	440b      	add	r3, r1
 800ffb4:	3326      	adds	r3, #38	@ 0x26
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	6858      	ldr	r0, [r3, #4]
 800ffbe:	68f9      	ldr	r1, [r7, #12]
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	005b      	lsls	r3, r3, #1
 800ffc6:	4413      	add	r3, r2
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	225c      	movs	r2, #92	@ 0x5c
 800ffcc:	fb00 f202 	mul.w	r2, r0, r2
 800ffd0:	4413      	add	r3, r2
 800ffd2:	440b      	add	r3, r1
 800ffd4:	3328      	adds	r3, #40	@ 0x28
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	701a      	strb	r2, [r3, #0]
}
 800ffda:	bf00      	nop
 800ffdc:	3718      	adds	r7, #24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bc90      	pop	{r4, r7}
 800ffe2:	4770      	bx	lr

0800ffe4 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	4413      	add	r3, r2
 800fff8:	461a      	mov	r2, r3
 800fffa:	4b99      	ldr	r3, [pc, #612]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 800fffc:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 800fffe:	4b98      	ldr	r3, [pc, #608]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2208      	movs	r2, #8
 8010004:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8010006:	4b96      	ldr	r3, [pc, #600]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	220b      	movs	r2, #11
 801000c:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	685a      	ldr	r2, [r3, #4]
 8010012:	4b93      	ldr	r3, [pc, #588]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	68f9      	ldr	r1, [r7, #12]
 8010018:	205c      	movs	r0, #92	@ 0x5c
 801001a:	fb00 f202 	mul.w	r2, r0, r2
 801001e:	440a      	add	r2, r1
 8010020:	325a      	adds	r2, #90	@ 0x5a
 8010022:	7812      	ldrb	r2, [r2, #0]
 8010024:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 8010026:	4b8e      	ldr	r3, [pc, #568]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2202      	movs	r2, #2
 801002c:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 801002e:	4b8c      	ldr	r3, [pc, #560]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2202      	movs	r2, #2
 8010034:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 8010036:	4b8a      	ldr	r3, [pc, #552]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2202      	movs	r2, #2
 801003c:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 801003e:	4b88      	ldr	r3, [pc, #544]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2201      	movs	r2, #1
 8010044:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 8010046:	4b86      	ldr	r3, [pc, #536]	@ (8010260 <USBD_FrameWork_CDCDesc+0x27c>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2200      	movs	r2, #0
 801004c:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f103 0208 	add.w	r2, r3, #8
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	4413      	add	r3, r2
 8010062:	461a      	mov	r2, r3
 8010064:	4b7f      	ldr	r3, [pc, #508]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 8010066:	601a      	str	r2, [r3, #0]
 8010068:	4b7e      	ldr	r3, [pc, #504]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2209      	movs	r2, #9
 801006e:	701a      	strb	r2, [r3, #0]
 8010070:	4b7c      	ldr	r3, [pc, #496]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	2204      	movs	r2, #4
 8010076:	705a      	strb	r2, [r3, #1]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	685a      	ldr	r2, [r3, #4]
 801007c:	4b79      	ldr	r3, [pc, #484]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	68f9      	ldr	r1, [r7, #12]
 8010082:	205c      	movs	r0, #92	@ 0x5c
 8010084:	fb00 f202 	mul.w	r2, r0, r2
 8010088:	440a      	add	r2, r1
 801008a:	325a      	adds	r2, #90	@ 0x5a
 801008c:	7812      	ldrb	r2, [r2, #0]
 801008e:	709a      	strb	r2, [r3, #2]
 8010090:	4b74      	ldr	r3, [pc, #464]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2200      	movs	r2, #0
 8010096:	70da      	strb	r2, [r3, #3]
 8010098:	4b72      	ldr	r3, [pc, #456]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2201      	movs	r2, #1
 801009e:	711a      	strb	r2, [r3, #4]
 80100a0:	4b70      	ldr	r3, [pc, #448]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2202      	movs	r2, #2
 80100a6:	715a      	strb	r2, [r3, #5]
 80100a8:	4b6e      	ldr	r3, [pc, #440]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2202      	movs	r2, #2
 80100ae:	719a      	strb	r2, [r3, #6]
 80100b0:	4b6c      	ldr	r3, [pc, #432]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2201      	movs	r2, #1
 80100b6:	71da      	strb	r2, [r3, #7]
 80100b8:	4b6a      	ldr	r3, [pc, #424]	@ (8010264 <USBD_FrameWork_CDCDesc+0x280>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2200      	movs	r2, #0
 80100be:	721a      	strb	r2, [r3, #8]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f103 0209 	add.w	r2, r3, #9
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	4413      	add	r3, r2
 80100d4:	461a      	mov	r2, r3
 80100d6:	4b64      	ldr	r3, [pc, #400]	@ (8010268 <USBD_FrameWork_CDCDesc+0x284>)
 80100d8:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 80100da:	4b63      	ldr	r3, [pc, #396]	@ (8010268 <USBD_FrameWork_CDCDesc+0x284>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2205      	movs	r2, #5
 80100e0:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 80100e2:	4b61      	ldr	r3, [pc, #388]	@ (8010268 <USBD_FrameWork_CDCDesc+0x284>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2224      	movs	r2, #36	@ 0x24
 80100e8:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 80100ea:	4b5f      	ldr	r3, [pc, #380]	@ (8010268 <USBD_FrameWork_CDCDesc+0x284>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2200      	movs	r2, #0
 80100f0:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 80100f2:	4b5d      	ldr	r3, [pc, #372]	@ (8010268 <USBD_FrameWork_CDCDesc+0x284>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f042 0210 	orr.w	r2, r2, #16
 80100fc:	70da      	strb	r2, [r3, #3]
 80100fe:	2200      	movs	r2, #0
 8010100:	f042 0201 	orr.w	r2, r2, #1
 8010104:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	1d5a      	adds	r2, r3, #5
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	4413      	add	r3, r2
 8010118:	461a      	mov	r2, r3
 801011a:	4b54      	ldr	r3, [pc, #336]	@ (801026c <USBD_FrameWork_CDCDesc+0x288>)
 801011c:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 801011e:	4b53      	ldr	r3, [pc, #332]	@ (801026c <USBD_FrameWork_CDCDesc+0x288>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2205      	movs	r2, #5
 8010124:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8010126:	4b51      	ldr	r3, [pc, #324]	@ (801026c <USBD_FrameWork_CDCDesc+0x288>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2224      	movs	r2, #36	@ 0x24
 801012c:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 801012e:	4b4f      	ldr	r3, [pc, #316]	@ (801026c <USBD_FrameWork_CDCDesc+0x288>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2201      	movs	r2, #1
 8010134:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8010136:	4b4d      	ldr	r3, [pc, #308]	@ (801026c <USBD_FrameWork_CDCDesc+0x288>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2200      	movs	r2, #0
 801013c:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	685a      	ldr	r2, [r3, #4]
 8010142:	4b4a      	ldr	r3, [pc, #296]	@ (801026c <USBD_FrameWork_CDCDesc+0x288>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68f9      	ldr	r1, [r7, #12]
 8010148:	205c      	movs	r0, #92	@ 0x5c
 801014a:	fb00 f202 	mul.w	r2, r0, r2
 801014e:	440a      	add	r2, r1
 8010150:	325b      	adds	r2, #91	@ 0x5b
 8010152:	7812      	ldrb	r2, [r2, #0]
 8010154:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	1d5a      	adds	r2, r3, #5
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	4413      	add	r3, r2
 8010168:	461a      	mov	r2, r3
 801016a:	4b41      	ldr	r3, [pc, #260]	@ (8010270 <USBD_FrameWork_CDCDesc+0x28c>)
 801016c:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 801016e:	4b40      	ldr	r3, [pc, #256]	@ (8010270 <USBD_FrameWork_CDCDesc+0x28c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2204      	movs	r2, #4
 8010174:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8010176:	4b3e      	ldr	r3, [pc, #248]	@ (8010270 <USBD_FrameWork_CDCDesc+0x28c>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2224      	movs	r2, #36	@ 0x24
 801017c:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 801017e:	4b3c      	ldr	r3, [pc, #240]	@ (8010270 <USBD_FrameWork_CDCDesc+0x28c>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2202      	movs	r2, #2
 8010184:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8010186:	4b3a      	ldr	r3, [pc, #232]	@ (8010270 <USBD_FrameWork_CDCDesc+0x28c>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2202      	movs	r2, #2
 801018c:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	1d1a      	adds	r2, r3, #4
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	4413      	add	r3, r2
 80101a0:	461a      	mov	r2, r3
 80101a2:	4b34      	ldr	r3, [pc, #208]	@ (8010274 <USBD_FrameWork_CDCDesc+0x290>)
 80101a4:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 80101a6:	4b33      	ldr	r3, [pc, #204]	@ (8010274 <USBD_FrameWork_CDCDesc+0x290>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2205      	movs	r2, #5
 80101ac:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 80101ae:	4b31      	ldr	r3, [pc, #196]	@ (8010274 <USBD_FrameWork_CDCDesc+0x290>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2224      	movs	r2, #36	@ 0x24
 80101b4:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 80101b6:	4b2f      	ldr	r3, [pc, #188]	@ (8010274 <USBD_FrameWork_CDCDesc+0x290>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2206      	movs	r2, #6
 80101bc:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	685a      	ldr	r2, [r3, #4]
 80101c2:	4b2c      	ldr	r3, [pc, #176]	@ (8010274 <USBD_FrameWork_CDCDesc+0x290>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	68f9      	ldr	r1, [r7, #12]
 80101c8:	205c      	movs	r0, #92	@ 0x5c
 80101ca:	fb00 f202 	mul.w	r2, r0, r2
 80101ce:	440a      	add	r2, r1
 80101d0:	325a      	adds	r2, #90	@ 0x5a
 80101d2:	7812      	ldrb	r2, [r2, #0]
 80101d4:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	685a      	ldr	r2, [r3, #4]
 80101da:	4b26      	ldr	r3, [pc, #152]	@ (8010274 <USBD_FrameWork_CDCDesc+0x290>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	68f9      	ldr	r1, [r7, #12]
 80101e0:	205c      	movs	r0, #92	@ 0x5c
 80101e2:	fb00 f202 	mul.w	r2, r0, r2
 80101e6:	440a      	add	r2, r1
 80101e8:	325b      	adds	r2, #91	@ 0x5b
 80101ea:	7812      	ldrb	r2, [r2, #0]
 80101ec:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	1d5a      	adds	r2, r3, #5
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	4413      	add	r3, r2
 8010200:	461a      	mov	r2, r3
 8010202:	4b1d      	ldr	r3, [pc, #116]	@ (8010278 <USBD_FrameWork_CDCDesc+0x294>)
 8010204:	601a      	str	r2, [r3, #0]
 8010206:	4b1c      	ldr	r3, [pc, #112]	@ (8010278 <USBD_FrameWork_CDCDesc+0x294>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2207      	movs	r2, #7
 801020c:	701a      	strb	r2, [r3, #0]
 801020e:	4b1a      	ldr	r3, [pc, #104]	@ (8010278 <USBD_FrameWork_CDCDesc+0x294>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	2205      	movs	r2, #5
 8010214:	705a      	strb	r2, [r3, #1]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	685a      	ldr	r2, [r3, #4]
 801021a:	4b17      	ldr	r3, [pc, #92]	@ (8010278 <USBD_FrameWork_CDCDesc+0x294>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	68f9      	ldr	r1, [r7, #12]
 8010220:	205c      	movs	r0, #92	@ 0x5c
 8010222:	fb00 f202 	mul.w	r2, r0, r2
 8010226:	440a      	add	r2, r1
 8010228:	3230      	adds	r2, #48	@ 0x30
 801022a:	7812      	ldrb	r2, [r2, #0]
 801022c:	709a      	strb	r2, [r3, #2]
 801022e:	4b12      	ldr	r3, [pc, #72]	@ (8010278 <USBD_FrameWork_CDCDesc+0x294>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2203      	movs	r2, #3
 8010234:	70da      	strb	r2, [r3, #3]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	685a      	ldr	r2, [r3, #4]
 801023a:	4b0f      	ldr	r3, [pc, #60]	@ (8010278 <USBD_FrameWork_CDCDesc+0x294>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	68f9      	ldr	r1, [r7, #12]
 8010240:	205c      	movs	r0, #92	@ 0x5c
 8010242:	fb00 f202 	mul.w	r2, r0, r2
 8010246:	440a      	add	r2, r1
 8010248:	3232      	adds	r2, #50	@ 0x32
 801024a:	8812      	ldrh	r2, [r2, #0]
 801024c:	809a      	strh	r2, [r3, #4]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	2b01      	cmp	r3, #1
 8010254:	d112      	bne.n	801027c <USBD_FrameWork_CDCDesc+0x298>
 8010256:	4b08      	ldr	r3, [pc, #32]	@ (8010278 <USBD_FrameWork_CDCDesc+0x294>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2205      	movs	r2, #5
 801025c:	719a      	strb	r2, [r3, #6]
 801025e:	e011      	b.n	8010284 <USBD_FrameWork_CDCDesc+0x2a0>
 8010260:	20003728 	.word	0x20003728
 8010264:	2000372c 	.word	0x2000372c
 8010268:	20003730 	.word	0x20003730
 801026c:	20003734 	.word	0x20003734
 8010270:	20003738 	.word	0x20003738
 8010274:	2000373c 	.word	0x2000373c
 8010278:	20003740 	.word	0x20003740
 801027c:	4b66      	ldr	r3, [pc, #408]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2205      	movs	r2, #5
 8010282:	719a      	strb	r2, [r3, #6]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	1dda      	adds	r2, r3, #7
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	4413      	add	r3, r2
 8010296:	461a      	mov	r2, r3
 8010298:	4b60      	ldr	r3, [pc, #384]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 801029a:	601a      	str	r2, [r3, #0]
 801029c:	4b5f      	ldr	r3, [pc, #380]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2209      	movs	r2, #9
 80102a2:	701a      	strb	r2, [r3, #0]
 80102a4:	4b5d      	ldr	r3, [pc, #372]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	2204      	movs	r2, #4
 80102aa:	705a      	strb	r2, [r3, #1]
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	685a      	ldr	r2, [r3, #4]
 80102b0:	4b5a      	ldr	r3, [pc, #360]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	68f9      	ldr	r1, [r7, #12]
 80102b6:	205c      	movs	r0, #92	@ 0x5c
 80102b8:	fb00 f202 	mul.w	r2, r0, r2
 80102bc:	440a      	add	r2, r1
 80102be:	325b      	adds	r2, #91	@ 0x5b
 80102c0:	7812      	ldrb	r2, [r2, #0]
 80102c2:	709a      	strb	r2, [r3, #2]
 80102c4:	4b55      	ldr	r3, [pc, #340]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2200      	movs	r2, #0
 80102ca:	70da      	strb	r2, [r3, #3]
 80102cc:	4b53      	ldr	r3, [pc, #332]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2202      	movs	r2, #2
 80102d2:	711a      	strb	r2, [r3, #4]
 80102d4:	4b51      	ldr	r3, [pc, #324]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	220a      	movs	r2, #10
 80102da:	715a      	strb	r2, [r3, #5]
 80102dc:	4b4f      	ldr	r3, [pc, #316]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2200      	movs	r2, #0
 80102e2:	719a      	strb	r2, [r3, #6]
 80102e4:	4b4d      	ldr	r3, [pc, #308]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2200      	movs	r2, #0
 80102ea:	71da      	strb	r2, [r3, #7]
 80102ec:	4b4b      	ldr	r3, [pc, #300]	@ (801041c <USBD_FrameWork_CDCDesc+0x438>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2200      	movs	r2, #0
 80102f2:	721a      	strb	r2, [r3, #8]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f103 0209 	add.w	r2, r3, #9
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	4413      	add	r3, r2
 8010308:	461a      	mov	r2, r3
 801030a:	4b43      	ldr	r3, [pc, #268]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 801030c:	601a      	str	r2, [r3, #0]
 801030e:	4b42      	ldr	r3, [pc, #264]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2207      	movs	r2, #7
 8010314:	701a      	strb	r2, [r3, #0]
 8010316:	4b40      	ldr	r3, [pc, #256]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2205      	movs	r2, #5
 801031c:	705a      	strb	r2, [r3, #1]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	685a      	ldr	r2, [r3, #4]
 8010322:	4b3d      	ldr	r3, [pc, #244]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	68f9      	ldr	r1, [r7, #12]
 8010328:	205c      	movs	r0, #92	@ 0x5c
 801032a:	fb00 f202 	mul.w	r2, r0, r2
 801032e:	440a      	add	r2, r1
 8010330:	3224      	adds	r2, #36	@ 0x24
 8010332:	7812      	ldrb	r2, [r2, #0]
 8010334:	709a      	strb	r2, [r3, #2]
 8010336:	4b38      	ldr	r3, [pc, #224]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2202      	movs	r2, #2
 801033c:	70da      	strb	r2, [r3, #3]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	4b35      	ldr	r3, [pc, #212]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	68f9      	ldr	r1, [r7, #12]
 8010348:	205c      	movs	r0, #92	@ 0x5c
 801034a:	fb00 f202 	mul.w	r2, r0, r2
 801034e:	440a      	add	r2, r1
 8010350:	3226      	adds	r2, #38	@ 0x26
 8010352:	8812      	ldrh	r2, [r2, #0]
 8010354:	809a      	strh	r2, [r3, #4]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	2b01      	cmp	r3, #1
 801035c:	d104      	bne.n	8010368 <USBD_FrameWork_CDCDesc+0x384>
 801035e:	4b2e      	ldr	r3, [pc, #184]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2200      	movs	r2, #0
 8010364:	719a      	strb	r2, [r3, #6]
 8010366:	e003      	b.n	8010370 <USBD_FrameWork_CDCDesc+0x38c>
 8010368:	4b2b      	ldr	r3, [pc, #172]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2200      	movs	r2, #0
 801036e:	719a      	strb	r2, [r3, #6]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	1dda      	adds	r2, r3, #7
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	4413      	add	r3, r2
 8010382:	461a      	mov	r2, r3
 8010384:	4b24      	ldr	r3, [pc, #144]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010386:	601a      	str	r2, [r3, #0]
 8010388:	4b23      	ldr	r3, [pc, #140]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2207      	movs	r2, #7
 801038e:	701a      	strb	r2, [r3, #0]
 8010390:	4b21      	ldr	r3, [pc, #132]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2205      	movs	r2, #5
 8010396:	705a      	strb	r2, [r3, #1]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	685a      	ldr	r2, [r3, #4]
 801039c:	4b1e      	ldr	r3, [pc, #120]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	68f9      	ldr	r1, [r7, #12]
 80103a2:	205c      	movs	r0, #92	@ 0x5c
 80103a4:	fb00 f202 	mul.w	r2, r0, r2
 80103a8:	440a      	add	r2, r1
 80103aa:	322a      	adds	r2, #42	@ 0x2a
 80103ac:	7812      	ldrb	r2, [r2, #0]
 80103ae:	709a      	strb	r2, [r3, #2]
 80103b0:	4b19      	ldr	r3, [pc, #100]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	2202      	movs	r2, #2
 80103b6:	70da      	strb	r2, [r3, #3]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	685a      	ldr	r2, [r3, #4]
 80103bc:	4b16      	ldr	r3, [pc, #88]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	68f9      	ldr	r1, [r7, #12]
 80103c2:	205c      	movs	r0, #92	@ 0x5c
 80103c4:	fb00 f202 	mul.w	r2, r0, r2
 80103c8:	440a      	add	r2, r1
 80103ca:	322c      	adds	r2, #44	@ 0x2c
 80103cc:	8812      	ldrh	r2, [r2, #0]
 80103ce:	809a      	strh	r2, [r3, #4]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d104      	bne.n	80103e2 <USBD_FrameWork_CDCDesc+0x3fe>
 80103d8:	4b0f      	ldr	r3, [pc, #60]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2200      	movs	r2, #0
 80103de:	719a      	strb	r2, [r3, #6]
 80103e0:	e003      	b.n	80103ea <USBD_FrameWork_CDCDesc+0x406>
 80103e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010418 <USBD_FrameWork_CDCDesc+0x434>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2200      	movs	r2, #0
 80103e8:	719a      	strb	r2, [r3, #6]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	1dda      	adds	r2, r3, #7
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	791a      	ldrb	r2, [r3, #4]
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	3202      	adds	r2, #2
 80103fc:	b2d2      	uxtb	r2, r2
 80103fe:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	b292      	uxth	r2, r2
 8010408:	805a      	strh	r2, [r3, #2]
}
 801040a:	bf00      	nop
 801040c:	3714      	adds	r7, #20
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr
 8010416:	bf00      	nop
 8010418:	20003740 	.word	0x20003740
 801041c:	2000372c 	.word	0x2000372c

08010420 <memset>:
 8010420:	4402      	add	r2, r0
 8010422:	4603      	mov	r3, r0
 8010424:	4293      	cmp	r3, r2
 8010426:	d100      	bne.n	801042a <memset+0xa>
 8010428:	4770      	bx	lr
 801042a:	f803 1b01 	strb.w	r1, [r3], #1
 801042e:	e7f9      	b.n	8010424 <memset+0x4>

08010430 <__libc_init_array>:
 8010430:	b570      	push	{r4, r5, r6, lr}
 8010432:	4d0d      	ldr	r5, [pc, #52]	@ (8010468 <__libc_init_array+0x38>)
 8010434:	2600      	movs	r6, #0
 8010436:	4c0d      	ldr	r4, [pc, #52]	@ (801046c <__libc_init_array+0x3c>)
 8010438:	1b64      	subs	r4, r4, r5
 801043a:	10a4      	asrs	r4, r4, #2
 801043c:	42a6      	cmp	r6, r4
 801043e:	d109      	bne.n	8010454 <__libc_init_array+0x24>
 8010440:	4d0b      	ldr	r5, [pc, #44]	@ (8010470 <__libc_init_array+0x40>)
 8010442:	2600      	movs	r6, #0
 8010444:	4c0b      	ldr	r4, [pc, #44]	@ (8010474 <__libc_init_array+0x44>)
 8010446:	f000 f817 	bl	8010478 <_init>
 801044a:	1b64      	subs	r4, r4, r5
 801044c:	10a4      	asrs	r4, r4, #2
 801044e:	42a6      	cmp	r6, r4
 8010450:	d105      	bne.n	801045e <__libc_init_array+0x2e>
 8010452:	bd70      	pop	{r4, r5, r6, pc}
 8010454:	f855 3b04 	ldr.w	r3, [r5], #4
 8010458:	3601      	adds	r6, #1
 801045a:	4798      	blx	r3
 801045c:	e7ee      	b.n	801043c <__libc_init_array+0xc>
 801045e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010462:	3601      	adds	r6, #1
 8010464:	4798      	blx	r3
 8010466:	e7f2      	b.n	801044e <__libc_init_array+0x1e>
 8010468:	080106a0 	.word	0x080106a0
 801046c:	080106a0 	.word	0x080106a0
 8010470:	080106a0 	.word	0x080106a0
 8010474:	080106a4 	.word	0x080106a4

08010478 <_init>:
 8010478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047a:	bf00      	nop
 801047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801047e:	bc08      	pop	{r3}
 8010480:	469e      	mov	lr, r3
 8010482:	4770      	bx	lr

08010484 <_fini>:
 8010484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010486:	bf00      	nop
 8010488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801048a:	bc08      	pop	{r3}
 801048c:	469e      	mov	lr, r3
 801048e:	4770      	bx	lr
